99feeec119ca58e651468a8187a63b6b
const {
  body,
  param,
  query
} = require('express-validator');
const {
  ValidationError
} = require('../utils/errors');

// Common validation rules
const emailRule = body('email').isEmail().withMessage('Please provide a valid email address').normalizeEmail().toLowerCase();
const passwordRule = body('password').isLength({
  min: 6
}).withMessage('Password must be at least 6 characters long').matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/).withMessage('Password must contain at least one lowercase letter, one uppercase letter, and one number');
const nameRule = body('name').trim().isLength({
  min: 2,
  max: 50
}).withMessage('Name must be between 2 and 50 characters').matches(/^[a-zA-Z\s]+$/).withMessage('Name can only contain letters and spaces');
const dateOfBirthRule = body('dateOfBirth').optional().isISO8601().withMessage('Date of birth must be a valid date').custom(value => {
  if (value) {
    const birthDate = new Date(value);
    const today = new Date();
    const age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    const actualAge = monthDiff < 0 || monthDiff === 0 && today.getDate() < birthDate.getDate() ? age - 1 : age;
    if (actualAge < 20) {
      throw new Error('User must be at least 20 years old');
    }
  }
  return true;
});
const nationalityRule = body('nationality').optional().trim().isLength({
  min: 2,
  max: 50
}).withMessage('Nationality must be between 2 and 50 characters');
const currentPasswordRule = body('currentPassword').notEmpty().withMessage('Current password is required');
const newPasswordRule = body('newPassword').isLength({
  min: 6
}).withMessage('New password must be at least 6 characters long').matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/).withMessage('New password must contain at least one lowercase letter, one uppercase letter, and one number');
const destinationIdRule = param('destinationId').isMongoId().withMessage('Invalid destination ID format');

// Validation schemas
const registerSchema = [emailRule, passwordRule, nameRule, dateOfBirthRule, nationalityRule];
const loginSchema = [emailRule, body('password').notEmpty().withMessage('Password is required')];
const updateProfileSchema = [body('name').optional().trim().isLength({
  min: 2,
  max: 50
}).withMessage('Name must be between 2 and 50 characters').matches(/^[a-zA-Z\s]+$/).withMessage('Name can only contain letters and spaces'), body('email').optional().isEmail().withMessage('Please provide a valid email address').normalizeEmail().toLowerCase(), dateOfBirthRule, nationalityRule, body('password').not().exists().withMessage('Password updates are not allowed in this route')];
const updatePasswordSchema = [currentPasswordRule, newPasswordRule, body('confirmPassword').custom((value, {
  req
}) => {
  if (value !== req.body.newPassword) {
    throw new Error('Password confirmation does not match new password');
  }
  return true;
})];
const toggleFavoriteSchema = [destinationIdRule];
const paginationSchema = [query('page').optional().isInt({
  min: 1
}).withMessage('Page must be a positive integer'), query('limit').optional().isInt({
  min: 1,
  max: 100
}).withMessage('Limit must be between 1 and 100')];

// Custom validation middleware
const validateRequest = (req, res, next) => {
  const errors = [];

  // Check for validation errors
  if (req.validationErrors) {
    errors.push(...req.validationErrors);
  }
  if (errors.length > 0) {
    const errorMessages = errors.map(error => error.msg);
    const errorDetails = errors.map(error => ({
      field: error.param,
      message: error.msg,
      value: error.value
    }));
    throw new ValidationError(`Validation failed: ${errorMessages.join(', ')}`, errorDetails);
  }
  next();
};

// Sanitization middleware
const sanitizeInput = (req, res, next) => {
  // Remove any potential XSS attempts
  const sanitizeString = str => {
    if (typeof str !== 'string') {
      return str;
    }
    return str.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '').replace(/javascript:/gi, '').replace(/on\w+\s*=/gi, '').trim();
  };

  // Sanitize body
  if (req.body) {
    Object.keys(req.body).forEach(key => {
      if (typeof req.body[key] === 'string') {
        req.body[key] = sanitizeString(req.body[key]);
      }
    });
  }

  // Sanitize query parameters
  if (req.query) {
    Object.keys(req.query).forEach(key => {
      if (typeof req.query[key] === 'string') {
        req.query[key] = sanitizeString(req.query[key]);
      }
    });
  }
  next();
};
module.exports = {
  registerSchema,
  loginSchema,
  updateProfileSchema,
  updatePasswordSchema,
  toggleFavoriteSchema,
  paginationSchema,
  validateRequest,
  sanitizeInput
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJib2R5IiwicGFyYW0iLCJxdWVyeSIsInJlcXVpcmUiLCJWYWxpZGF0aW9uRXJyb3IiLCJlbWFpbFJ1bGUiLCJpc0VtYWlsIiwid2l0aE1lc3NhZ2UiLCJub3JtYWxpemVFbWFpbCIsInRvTG93ZXJDYXNlIiwicGFzc3dvcmRSdWxlIiwiaXNMZW5ndGgiLCJtaW4iLCJtYXRjaGVzIiwibmFtZVJ1bGUiLCJ0cmltIiwibWF4IiwiZGF0ZU9mQmlydGhSdWxlIiwib3B0aW9uYWwiLCJpc0lTTzg2MDEiLCJjdXN0b20iLCJ2YWx1ZSIsImJpcnRoRGF0ZSIsIkRhdGUiLCJ0b2RheSIsImFnZSIsImdldEZ1bGxZZWFyIiwibW9udGhEaWZmIiwiZ2V0TW9udGgiLCJhY3R1YWxBZ2UiLCJnZXREYXRlIiwiRXJyb3IiLCJuYXRpb25hbGl0eVJ1bGUiLCJjdXJyZW50UGFzc3dvcmRSdWxlIiwibm90RW1wdHkiLCJuZXdQYXNzd29yZFJ1bGUiLCJkZXN0aW5hdGlvbklkUnVsZSIsImlzTW9uZ29JZCIsInJlZ2lzdGVyU2NoZW1hIiwibG9naW5TY2hlbWEiLCJ1cGRhdGVQcm9maWxlU2NoZW1hIiwibm90IiwiZXhpc3RzIiwidXBkYXRlUGFzc3dvcmRTY2hlbWEiLCJyZXEiLCJuZXdQYXNzd29yZCIsInRvZ2dsZUZhdm9yaXRlU2NoZW1hIiwicGFnaW5hdGlvblNjaGVtYSIsImlzSW50IiwidmFsaWRhdGVSZXF1ZXN0IiwicmVzIiwibmV4dCIsImVycm9ycyIsInZhbGlkYXRpb25FcnJvcnMiLCJwdXNoIiwibGVuZ3RoIiwiZXJyb3JNZXNzYWdlcyIsIm1hcCIsImVycm9yIiwibXNnIiwiZXJyb3JEZXRhaWxzIiwiZmllbGQiLCJtZXNzYWdlIiwiam9pbiIsInNhbml0aXplSW5wdXQiLCJzYW5pdGl6ZVN0cmluZyIsInN0ciIsInJlcGxhY2UiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJhdXRoLnZhbGlkYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBib2R5LCBwYXJhbSwgcXVlcnkgfSA9IHJlcXVpcmUoJ2V4cHJlc3MtdmFsaWRhdG9yJyk7XG5jb25zdCB7IFZhbGlkYXRpb25FcnJvciB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvZXJyb3JzJyk7XG5cbi8vIENvbW1vbiB2YWxpZGF0aW9uIHJ1bGVzXG5jb25zdCBlbWFpbFJ1bGUgPSBib2R5KCdlbWFpbCcpXG4gIC5pc0VtYWlsKClcbiAgLndpdGhNZXNzYWdlKCdQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIGVtYWlsIGFkZHJlc3MnKVxuICAubm9ybWFsaXplRW1haWwoKVxuICAudG9Mb3dlckNhc2UoKTtcblxuY29uc3QgcGFzc3dvcmRSdWxlID0gYm9keSgncGFzc3dvcmQnKVxuICAuaXNMZW5ndGgoeyBtaW46IDYgfSlcbiAgLndpdGhNZXNzYWdlKCdQYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IDYgY2hhcmFjdGVycyBsb25nJylcbiAgLm1hdGNoZXMoL14oPz0uKlthLXpdKSg/PS4qW0EtWl0pKD89LipcXGQpLylcbiAgLndpdGhNZXNzYWdlKCdQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGxvd2VyY2FzZSBsZXR0ZXIsIG9uZSB1cHBlcmNhc2UgbGV0dGVyLCBhbmQgb25lIG51bWJlcicpO1xuXG5jb25zdCBuYW1lUnVsZSA9IGJvZHkoJ25hbWUnKVxuICAudHJpbSgpXG4gIC5pc0xlbmd0aCh7IG1pbjogMiwgbWF4OiA1MCB9KVxuICAud2l0aE1lc3NhZ2UoJ05hbWUgbXVzdCBiZSBiZXR3ZWVuIDIgYW5kIDUwIGNoYXJhY3RlcnMnKVxuICAubWF0Y2hlcygvXlthLXpBLVpcXHNdKyQvKVxuICAud2l0aE1lc3NhZ2UoJ05hbWUgY2FuIG9ubHkgY29udGFpbiBsZXR0ZXJzIGFuZCBzcGFjZXMnKTtcblxuY29uc3QgZGF0ZU9mQmlydGhSdWxlID0gYm9keSgnZGF0ZU9mQmlydGgnKVxuICAub3B0aW9uYWwoKVxuICAuaXNJU084NjAxKClcbiAgLndpdGhNZXNzYWdlKCdEYXRlIG9mIGJpcnRoIG11c3QgYmUgYSB2YWxpZCBkYXRlJylcbiAgLmN1c3RvbSgodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGNvbnN0IGJpcnRoRGF0ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgIGNvbnN0IGFnZSA9IHRvZGF5LmdldEZ1bGxZZWFyKCkgLSBiaXJ0aERhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgIGNvbnN0IG1vbnRoRGlmZiA9IHRvZGF5LmdldE1vbnRoKCkgLSBiaXJ0aERhdGUuZ2V0TW9udGgoKTtcblxuICAgICAgY29uc3QgYWN0dWFsQWdlID0gbW9udGhEaWZmIDwgMCB8fCAobW9udGhEaWZmID09PSAwICYmIHRvZGF5LmdldERhdGUoKSA8IGJpcnRoRGF0ZS5nZXREYXRlKCkpXG4gICAgICAgID8gYWdlIC0gMVxuICAgICAgICA6IGFnZTtcblxuICAgICAgaWYgKGFjdHVhbEFnZSA8IDIwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBtdXN0IGJlIGF0IGxlYXN0IDIwIHllYXJzIG9sZCcpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG5cbmNvbnN0IG5hdGlvbmFsaXR5UnVsZSA9IGJvZHkoJ25hdGlvbmFsaXR5JylcbiAgLm9wdGlvbmFsKClcbiAgLnRyaW0oKVxuICAuaXNMZW5ndGgoeyBtaW46IDIsIG1heDogNTAgfSlcbiAgLndpdGhNZXNzYWdlKCdOYXRpb25hbGl0eSBtdXN0IGJlIGJldHdlZW4gMiBhbmQgNTAgY2hhcmFjdGVycycpO1xuXG5jb25zdCBjdXJyZW50UGFzc3dvcmRSdWxlID0gYm9keSgnY3VycmVudFBhc3N3b3JkJylcbiAgLm5vdEVtcHR5KClcbiAgLndpdGhNZXNzYWdlKCdDdXJyZW50IHBhc3N3b3JkIGlzIHJlcXVpcmVkJyk7XG5cbmNvbnN0IG5ld1Bhc3N3b3JkUnVsZSA9IGJvZHkoJ25ld1Bhc3N3b3JkJylcbiAgLmlzTGVuZ3RoKHsgbWluOiA2IH0pXG4gIC53aXRoTWVzc2FnZSgnTmV3IHBhc3N3b3JkIG11c3QgYmUgYXQgbGVhc3QgNiBjaGFyYWN0ZXJzIGxvbmcnKVxuICAubWF0Y2hlcygvXig/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlxcZCkvKVxuICAud2l0aE1lc3NhZ2UoJ05ldyBwYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGxvd2VyY2FzZSBsZXR0ZXIsIG9uZSB1cHBlcmNhc2UgbGV0dGVyLCBhbmQgb25lIG51bWJlcicpO1xuXG5jb25zdCBkZXN0aW5hdGlvbklkUnVsZSA9IHBhcmFtKCdkZXN0aW5hdGlvbklkJylcbiAgLmlzTW9uZ29JZCgpXG4gIC53aXRoTWVzc2FnZSgnSW52YWxpZCBkZXN0aW5hdGlvbiBJRCBmb3JtYXQnKTtcblxuLy8gVmFsaWRhdGlvbiBzY2hlbWFzXG5jb25zdCByZWdpc3RlclNjaGVtYSA9IFtcbiAgZW1haWxSdWxlLFxuICBwYXNzd29yZFJ1bGUsXG4gIG5hbWVSdWxlLFxuICBkYXRlT2ZCaXJ0aFJ1bGUsXG4gIG5hdGlvbmFsaXR5UnVsZVxuXTtcblxuY29uc3QgbG9naW5TY2hlbWEgPSBbXG4gIGVtYWlsUnVsZSxcbiAgYm9keSgncGFzc3dvcmQnKVxuICAgIC5ub3RFbXB0eSgpXG4gICAgLndpdGhNZXNzYWdlKCdQYXNzd29yZCBpcyByZXF1aXJlZCcpXG5dO1xuXG5jb25zdCB1cGRhdGVQcm9maWxlU2NoZW1hID0gW1xuICBib2R5KCduYW1lJylcbiAgICAub3B0aW9uYWwoKVxuICAgIC50cmltKClcbiAgICAuaXNMZW5ndGgoeyBtaW46IDIsIG1heDogNTAgfSlcbiAgICAud2l0aE1lc3NhZ2UoJ05hbWUgbXVzdCBiZSBiZXR3ZWVuIDIgYW5kIDUwIGNoYXJhY3RlcnMnKVxuICAgIC5tYXRjaGVzKC9eW2EtekEtWlxcc10rJC8pXG4gICAgLndpdGhNZXNzYWdlKCdOYW1lIGNhbiBvbmx5IGNvbnRhaW4gbGV0dGVycyBhbmQgc3BhY2VzJyksXG4gIGJvZHkoJ2VtYWlsJylcbiAgICAub3B0aW9uYWwoKVxuICAgIC5pc0VtYWlsKClcbiAgICAud2l0aE1lc3NhZ2UoJ1BsZWFzZSBwcm92aWRlIGEgdmFsaWQgZW1haWwgYWRkcmVzcycpXG4gICAgLm5vcm1hbGl6ZUVtYWlsKClcbiAgICAudG9Mb3dlckNhc2UoKSxcbiAgZGF0ZU9mQmlydGhSdWxlLFxuICBuYXRpb25hbGl0eVJ1bGUsXG4gIGJvZHkoJ3Bhc3N3b3JkJylcbiAgICAubm90KClcbiAgICAuZXhpc3RzKClcbiAgICAud2l0aE1lc3NhZ2UoJ1Bhc3N3b3JkIHVwZGF0ZXMgYXJlIG5vdCBhbGxvd2VkIGluIHRoaXMgcm91dGUnKVxuXTtcblxuY29uc3QgdXBkYXRlUGFzc3dvcmRTY2hlbWEgPSBbXG4gIGN1cnJlbnRQYXNzd29yZFJ1bGUsXG4gIG5ld1Bhc3N3b3JkUnVsZSxcbiAgYm9keSgnY29uZmlybVBhc3N3b3JkJylcbiAgICAuY3VzdG9tKCh2YWx1ZSwgeyByZXEgfSkgPT4ge1xuICAgICAgaWYgKHZhbHVlICE9PSByZXEuYm9keS5uZXdQYXNzd29yZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Bhc3N3b3JkIGNvbmZpcm1hdGlvbiBkb2VzIG5vdCBtYXRjaCBuZXcgcGFzc3dvcmQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pXG5dO1xuXG5jb25zdCB0b2dnbGVGYXZvcml0ZVNjaGVtYSA9IFtcbiAgZGVzdGluYXRpb25JZFJ1bGVcbl07XG5cbmNvbnN0IHBhZ2luYXRpb25TY2hlbWEgPSBbXG4gIHF1ZXJ5KCdwYWdlJylcbiAgICAub3B0aW9uYWwoKVxuICAgIC5pc0ludCh7IG1pbjogMSB9KVxuICAgIC53aXRoTWVzc2FnZSgnUGFnZSBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpLFxuICBxdWVyeSgnbGltaXQnKVxuICAgIC5vcHRpb25hbCgpXG4gICAgLmlzSW50KHsgbWluOiAxLCBtYXg6IDEwMCB9KVxuICAgIC53aXRoTWVzc2FnZSgnTGltaXQgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwMCcpXG5dO1xuXG4vLyBDdXN0b20gdmFsaWRhdGlvbiBtaWRkbGV3YXJlXG5jb25zdCB2YWxpZGF0ZVJlcXVlc3QgPSAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgY29uc3QgZXJyb3JzID0gW107XG5cbiAgLy8gQ2hlY2sgZm9yIHZhbGlkYXRpb24gZXJyb3JzXG4gIGlmIChyZXEudmFsaWRhdGlvbkVycm9ycykge1xuICAgIGVycm9ycy5wdXNoKC4uLnJlcS52YWxpZGF0aW9uRXJyb3JzKTtcbiAgfVxuXG4gIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZXMgPSBlcnJvcnMubWFwKGVycm9yID0+IGVycm9yLm1zZyk7XG4gICAgY29uc3QgZXJyb3JEZXRhaWxzID0gZXJyb3JzLm1hcChlcnJvciA9PiAoe1xuICAgICAgZmllbGQ6IGVycm9yLnBhcmFtLFxuICAgICAgbWVzc2FnZTogZXJyb3IubXNnLFxuICAgICAgdmFsdWU6IGVycm9yLnZhbHVlXG4gICAgfSkpO1xuXG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihcbiAgICAgIGBWYWxpZGF0aW9uIGZhaWxlZDogJHtlcnJvck1lc3NhZ2VzLmpvaW4oJywgJyl9YCxcbiAgICAgIGVycm9yRGV0YWlsc1xuICAgICk7XG4gIH1cblxuICBuZXh0KCk7XG59O1xuXG4vLyBTYW5pdGl6YXRpb24gbWlkZGxld2FyZVxuY29uc3Qgc2FuaXRpemVJbnB1dCA9IChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAvLyBSZW1vdmUgYW55IHBvdGVudGlhbCBYU1MgYXR0ZW1wdHNcbiAgY29uc3Qgc2FuaXRpemVTdHJpbmcgPSAoc3RyKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICByZXR1cm4gc3RyXG4gICAgICAucmVwbGFjZSgvPHNjcmlwdFxcYltePF0qKD86KD8hPFxcL3NjcmlwdD4pPFtePF0qKSo8XFwvc2NyaXB0Pi9naSwgJycpXG4gICAgICAucmVwbGFjZSgvamF2YXNjcmlwdDovZ2ksICcnKVxuICAgICAgLnJlcGxhY2UoL29uXFx3K1xccyo9L2dpLCAnJylcbiAgICAgIC50cmltKCk7XG4gIH07XG5cbiAgLy8gU2FuaXRpemUgYm9keVxuICBpZiAocmVxLmJvZHkpIHtcbiAgICBPYmplY3Qua2V5cyhyZXEuYm9keSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiByZXEuYm9keVtrZXldID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXEuYm9keVtrZXldID0gc2FuaXRpemVTdHJpbmcocmVxLmJvZHlba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBTYW5pdGl6ZSBxdWVyeSBwYXJhbWV0ZXJzXG4gIGlmIChyZXEucXVlcnkpIHtcbiAgICBPYmplY3Qua2V5cyhyZXEucXVlcnkpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgcmVxLnF1ZXJ5W2tleV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlcS5xdWVyeVtrZXldID0gc2FuaXRpemVTdHJpbmcocmVxLnF1ZXJ5W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmV4dCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlZ2lzdGVyU2NoZW1hLFxuICBsb2dpblNjaGVtYSxcbiAgdXBkYXRlUHJvZmlsZVNjaGVtYSxcbiAgdXBkYXRlUGFzc3dvcmRTY2hlbWEsXG4gIHRvZ2dsZUZhdm9yaXRlU2NoZW1hLFxuICBwYWdpbmF0aW9uU2NoZW1hLFxuICB2YWxpZGF0ZVJlcXVlc3QsXG4gIHNhbml0aXplSW5wdXRcbn07Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0VBQUVBLElBQUk7RUFBRUMsS0FBSztFQUFFQztBQUFNLENBQUMsR0FBR0MsT0FBTyxDQUFD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