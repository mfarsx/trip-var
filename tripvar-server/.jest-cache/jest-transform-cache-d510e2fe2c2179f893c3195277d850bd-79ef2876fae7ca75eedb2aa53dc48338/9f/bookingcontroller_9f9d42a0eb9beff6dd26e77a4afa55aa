f0022101c2449d69faa118b9b9257404
const Booking = require('../public/models/booking.model');
const Destination = require('../public/models/destination.model');
const {
  ValidationError,
  NotFoundError,
  ConflictError
} = require('../utils/errors');
const {
  successResponse
} = require('../utils/response');
const {
  info,
  error
} = require('../utils/logger');
const NotificationService = require('../services/notification.service');

// Create a new booking
const createBooking = async (req, res, next) => {
  try {
    const {
      destinationId,
      checkInDate,
      checkOutDate,
      numberOfGuests,
      paymentMethod,
      specialRequests,
      contactEmail,
      contactPhone
    } = req.body;
    const userId = req.user.id;

    // Validate required fields
    if (!destinationId || !checkInDate || !checkOutDate || !numberOfGuests) {
      throw new ValidationError('Missing required booking information');
    }

    // Parse dates
    const checkIn = new Date(checkInDate);
    const checkOut = new Date(checkOutDate);

    // Validate dates
    if (checkIn <= new Date()) {
      throw new ValidationError('Check-in date must be in the future');
    }
    if (checkOut <= checkIn) {
      throw new ValidationError('Check-out date must be after check-in date');
    }

    // Get destination details
    const destination = await Destination.findById(destinationId);
    if (!destination) {
      throw new NotFoundError('Destination not found');
    }

    // Check availability
    const isAvailable = await Booking.checkAvailability(destinationId, checkIn, checkOut);
    if (!isAvailable) {
      throw new ConflictError('Destination is not available for the selected dates');
    }

    // Calculate pricing
    const totalNights = Math.ceil((checkOut - checkIn) / (1000 * 3600 * 24));
    const totalAmount = totalNights * destination.price * numberOfGuests;

    // Create booking
    const booking = new Booking({
      user: userId,
      destination: destinationId,
      checkInDate: checkIn,
      checkOutDate: checkOut,
      numberOfGuests,
      pricePerNight: destination.price,
      totalNights,
      totalAmount,
      paymentMethod,
      specialRequests,
      contactEmail: contactEmail || req.user.email,
      contactPhone
    });
    await booking.save();

    // Populate the booking with destination and user details
    await booking.populate([{
      path: 'destination',
      select: 'title location imageUrl'
    }, {
      path: 'user',
      select: 'name email'
    }]);
    info('New booking created', {
      bookingId: booking._id,
      userId,
      destinationId,
      totalAmount
    });

    // Create booking confirmation notification
    try {
      await NotificationService.createBookingConfirmationNotification(userId, booking);
    } catch (notificationError) {
      // Log error but don't fail the booking creation
      error('Failed to create booking confirmation notification', {
        error: notificationError.message,
        bookingId: booking._id,
        userId
      });
    }
    res.status(201).json(successResponse({
      booking
    }, 'Booking created successfully'));
  } catch (err) {
    error('Error creating booking', {
      error: err.message,
      userId: req.user?.id
    });
    next(err);
  }
};

// Get user's bookings
const getUserBookings = async (req, res, next) => {
  try {
    const userId = req.user.id;
    const {
      status,
      page = 1,
      limit = 10
    } = req.query;

    // Build query
    const query = {
      user: userId
    };
    if (status) {
      query.status = status;
    }

    // Calculate pagination
    const skip = (parseInt(page, 10) - 1) * parseInt(limit, 10);

    // Get bookings with pagination
    const bookings = await Booking.find(query).populate('destination', 'title location imageUrl rating').sort({
      createdAt: -1
    }).skip(skip).limit(parseInt(limit, 10));

    // Get total count for pagination
    const total = await Booking.countDocuments(query);
    res.json({
      success: true,
      data: {
        bookings,
        pagination: {
          current: parseInt(page, 10),
          pages: Math.ceil(total / parseInt(limit, 10)),
          total
        }
      }
    });
  } catch (err) {
    error('Error fetching user bookings', {
      error: err.message,
      userId: req.user?.id
    });
    next(err);
  }
};

// Get specific booking
const getBookingById = async (req, res, next) => {
  try {
    const {
      id
    } = req.params;
    const userId = req.user.id;
    const booking = await Booking.findById(id).populate('destination', 'title location imageUrl rating description').populate('user', 'name email');
    if (!booking) {
      throw new NotFoundError('Booking not found');
    }

    // Check if user owns this booking or is admin
    if (booking.user._id.toString() !== userId && req.user.role !== 'admin') {
      throw new ValidationError('Access denied');
    }
    res.json({
      success: true,
      data: {
        booking
      }
    });
  } catch (err) {
    error('Error fetching booking', {
      error: err.message,
      bookingId: req.params.id
    });
    next(err);
  }
};

// Cancel booking
const cancelBooking = async (req, res, next) => {
  try {
    const {
      id
    } = req.params;
    const {
      reason
    } = req.body;
    const userId = req.user.id;
    const booking = await Booking.findById(id).populate('destination');
    if (!booking) {
      throw new NotFoundError('Booking not found');
    }

    // Check if user owns this booking
    if (booking.user.toString() !== userId) {
      throw new ValidationError('Access denied');
    }

    // Check if booking can be cancelled
    if (booking.status === 'cancelled') {
      throw new ConflictError('Booking is already cancelled');
    }
    if (booking.status === 'completed') {
      throw new ConflictError('Cannot cancel completed booking');
    }

    // Calculate refund amount
    const refundAmount = booking.calculateRefund();

    // Update booking
    booking.status = 'cancelled';
    booking.cancelledAt = new Date();
    booking.cancellationReason = reason;
    booking.refundAmount = refundAmount;
    if (refundAmount > 0) {
      booking.paymentStatus = 'refunded';
      booking.refundedAt = new Date();
    }
    await booking.save();
    info('Booking cancelled', {
      bookingId: id,
      userId,
      refundAmount
    });

    // Create booking cancellation notification
    try {
      await NotificationService.createBookingCancellationNotification(userId, booking, refundAmount);
    } catch (notificationError) {
      // Log error but don't fail the cancellation
      error('Failed to create booking cancellation notification', {
        error: notificationError.message,
        bookingId: id,
        userId
      });
    }
    res.json({
      success: true,
      message: 'Booking cancelled successfully',
      data: {
        booking,
        refundAmount
      }
    });
  } catch (err) {
    error('Error cancelling booking', {
      error: err.message,
      bookingId: req.params.id
    });
    next(err);
  }
};

// Get all bookings (admin only)
const getAllBookings = async (req, res, next) => {
  try {
    const {
      status,
      page = 1,
      limit = 20,
      destinationId
    } = req.query;

    // Build query
    const query = {};
    if (status) {
      query.status = status;
    }
    if (destinationId) {
      query.destination = destinationId;
    }

    // Calculate pagination
    const skip = (parseInt(page, 10) - 1) * parseInt(limit, 10);

    // Get bookings with pagination
    const bookings = await Booking.find(query).populate('destination', 'title location').populate('user', 'name email').sort({
      createdAt: -1
    }).skip(skip).limit(parseInt(limit, 10));

    // Get total count
    const total = await Booking.countDocuments(query);
    res.json({
      success: true,
      data: {
        bookings,
        pagination: {
          current: parseInt(page, 10),
          pages: Math.ceil(total / parseInt(limit, 10)),
          total
        }
      }
    });
  } catch (err) {
    error('Error fetching all bookings', {
      error: err.message
    });
    next(err);
  }
};

// Update booking status (admin only)
const updateBookingStatus = async (req, res, next) => {
  try {
    const {
      id
    } = req.params;
    const {
      status
    } = req.body;
    const validStatuses = ['confirmed', 'cancelled', 'completed', 'no-show'];
    if (!validStatuses.includes(status)) {
      throw new ValidationError('Invalid booking status');
    }
    const booking = await Booking.findById(id);
    if (!booking) {
      throw new NotFoundError('Booking not found');
    }
    booking.status = status;
    await booking.save();
    info('Booking status updated', {
      bookingId: id,
      newStatus: status,
      adminId: req.user.id
    });
    res.json({
      success: true,
      message: 'Booking status updated successfully',
      data: {
        booking
      }
    });
  } catch (err) {
    error('Error updating booking status', {
      error: err.message,
      bookingId: req.params.id
    });
    next(err);
  }
};

// Check availability for a destination
const checkAvailability = async (req, res, next) => {
  try {
    const {
      destinationId,
      checkInDate,
      checkOutDate
    } = req.query;
    if (!destinationId || !checkInDate || !checkOutDate) {
      throw new ValidationError('Missing required parameters');
    }
    const checkIn = new Date(checkInDate);
    const checkOut = new Date(checkOutDate);
    const isAvailable = await Booking.checkAvailability(destinationId, checkIn, checkOut);
    res.json({
      success: true,
      data: {
        available: isAvailable,
        checkInDate: checkIn,
        checkOutDate: checkOut
      }
    });
  } catch (err) {
    error('Error checking availability', {
      error: err.message
    });
    next(err);
  }
};
module.exports = {
  createBooking,
  getUserBookings,
  getBookingById,
  cancelBooking,
  getAllBookings,
  updateBookingStatus,
  checkAvailability
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29raW5nIiwicmVxdWlyZSIsIkRlc3RpbmF0aW9uIiwiVmFsaWRhdGlvbkVycm9yIiwiTm90Rm91bmRFcnJvciIsIkNvbmZsaWN0RXJyb3IiLCJzdWNjZXNzUmVzcG9uc2UiLCJpbmZvIiwiZXJyb3IiLCJOb3RpZmljYXRpb25TZXJ2aWNlIiwiY3JlYXRlQm9va2luZyIsInJlcSIsInJlcyIsIm5leHQiLCJkZXN0aW5hdGlvbklkIiwiY2hlY2tJbkRhdGUiLCJjaGVja091dERhdGUiLCJudW1iZXJPZkd1ZXN0cyIsInBheW1lbnRNZXRob2QiLCJzcGVjaWFsUmVxdWVzdHMiLCJjb250YWN0RW1haWwiLCJjb250YWN0UGhvbmUiLCJib2R5IiwidXNlcklkIiwidXNlciIsImlkIiwiY2hlY2tJbiIsIkRhdGUiLCJjaGVja091dCIsImRlc3RpbmF0aW9uIiwiZmluZEJ5SWQiLCJpc0F2YWlsYWJsZSIsImNoZWNrQXZhaWxhYmlsaXR5IiwidG90YWxOaWdodHMiLCJNYXRoIiwiY2VpbCIsInRvdGFsQW1vdW50IiwicHJpY2UiLCJib29raW5nIiwicHJpY2VQZXJOaWdodCIsImVtYWlsIiwic2F2ZSIsInBvcHVsYXRlIiwicGF0aCIsInNlbGVjdCIsImJvb2tpbmdJZCIsIl9pZCIsImNyZWF0ZUJvb2tpbmdDb25maXJtYXRpb25Ob3RpZmljYXRpb24iLCJub3RpZmljYXRpb25FcnJvciIsIm1lc3NhZ2UiLCJzdGF0dXMiLCJqc29uIiwiZXJyIiwiZ2V0VXNlckJvb2tpbmdzIiwicGFnZSIsImxpbWl0IiwicXVlcnkiLCJza2lwIiwicGFyc2VJbnQiLCJib29raW5ncyIsImZpbmQiLCJzb3J0IiwiY3JlYXRlZEF0IiwidG90YWwiLCJjb3VudERvY3VtZW50cyIsInN1Y2Nlc3MiLCJkYXRhIiwicGFnaW5hdGlvbiIsImN1cnJlbnQiLCJwYWdlcyIsImdldEJvb2tpbmdCeUlkIiwicGFyYW1zIiwidG9TdHJpbmciLCJyb2xlIiwiY2FuY2VsQm9va2luZyIsInJlYXNvbiIsInJlZnVuZEFtb3VudCIsImNhbGN1bGF0ZVJlZnVuZCIsImNhbmNlbGxlZEF0IiwiY2FuY2VsbGF0aW9uUmVhc29uIiwicGF5bWVudFN0YXR1cyIsInJlZnVuZGVkQXQiLCJjcmVhdGVCb29raW5nQ2FuY2VsbGF0aW9uTm90aWZpY2F0aW9uIiwiZ2V0QWxsQm9va2luZ3MiLCJ1cGRhdGVCb29raW5nU3RhdHVzIiwidmFsaWRTdGF0dXNlcyIsImluY2x1ZGVzIiwibmV3U3RhdHVzIiwiYWRtaW5JZCIsImF2YWlsYWJsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJib29raW5nLmNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQm9va2luZyA9IHJlcXVpcmUoJy4uL3B1YmxpYy9tb2RlbHMvYm9va2luZy5tb2RlbCcpO1xuY29uc3QgRGVzdGluYXRpb24gPSByZXF1aXJlKCcuLi9wdWJsaWMvbW9kZWxzL2Rlc3RpbmF0aW9uLm1vZGVsJyk7XG5jb25zdCB7IFZhbGlkYXRpb25FcnJvciwgTm90Rm91bmRFcnJvciwgQ29uZmxpY3RFcnJvciB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvZXJyb3JzJyk7XG5jb25zdCB7IHN1Y2Nlc3NSZXNwb25zZSB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvcmVzcG9uc2UnKTtcbmNvbnN0IHsgaW5mbywgZXJyb3IgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2xvZ2dlcicpO1xuY29uc3QgTm90aWZpY2F0aW9uU2VydmljZSA9IHJlcXVpcmUoJy4uL3NlcnZpY2VzL25vdGlmaWNhdGlvbi5zZXJ2aWNlJyk7XG5cbi8vIENyZWF0ZSBhIG5ldyBib29raW5nXG5jb25zdCBjcmVhdGVCb29raW5nID0gYXN5bmMocmVxLCByZXMsIG5leHQpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7XG4gICAgICBkZXN0aW5hdGlvbklkLFxuICAgICAgY2hlY2tJbkRhdGUsXG4gICAgICBjaGVja091dERhdGUsXG4gICAgICBudW1iZXJPZkd1ZXN0cyxcbiAgICAgIHBheW1lbnRNZXRob2QsXG4gICAgICBzcGVjaWFsUmVxdWVzdHMsXG4gICAgICBjb250YWN0RW1haWwsXG4gICAgICBjb250YWN0UGhvbmVcbiAgICB9ID0gcmVxLmJvZHk7XG5cbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlci5pZDtcblxuICAgIC8vIFZhbGlkYXRlIHJlcXVpcmVkIGZpZWxkc1xuICAgIGlmICghZGVzdGluYXRpb25JZCB8fCAhY2hlY2tJbkRhdGUgfHwgIWNoZWNrT3V0RGF0ZSB8fCAhbnVtYmVyT2ZHdWVzdHMpIHtcbiAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ01pc3NpbmcgcmVxdWlyZWQgYm9va2luZyBpbmZvcm1hdGlvbicpO1xuICAgIH1cblxuICAgIC8vIFBhcnNlIGRhdGVzXG4gICAgY29uc3QgY2hlY2tJbiA9IG5ldyBEYXRlKGNoZWNrSW5EYXRlKTtcbiAgICBjb25zdCBjaGVja091dCA9IG5ldyBEYXRlKGNoZWNrT3V0RGF0ZSk7XG5cbiAgICAvLyBWYWxpZGF0ZSBkYXRlc1xuICAgIGlmIChjaGVja0luIDw9IG5ldyBEYXRlKCkpIHtcbiAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0NoZWNrLWluIGRhdGUgbXVzdCBiZSBpbiB0aGUgZnV0dXJlJyk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrT3V0IDw9IGNoZWNrSW4pIHtcbiAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0NoZWNrLW91dCBkYXRlIG11c3QgYmUgYWZ0ZXIgY2hlY2staW4gZGF0ZScpO1xuICAgIH1cblxuICAgIC8vIEdldCBkZXN0aW5hdGlvbiBkZXRhaWxzXG4gICAgY29uc3QgZGVzdGluYXRpb24gPSBhd2FpdCBEZXN0aW5hdGlvbi5maW5kQnlJZChkZXN0aW5hdGlvbklkKTtcbiAgICBpZiAoIWRlc3RpbmF0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgTm90Rm91bmRFcnJvcignRGVzdGluYXRpb24gbm90IGZvdW5kJyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgYXZhaWxhYmlsaXR5XG4gICAgY29uc3QgaXNBdmFpbGFibGUgPSBhd2FpdCBCb29raW5nLmNoZWNrQXZhaWxhYmlsaXR5KGRlc3RpbmF0aW9uSWQsIGNoZWNrSW4sIGNoZWNrT3V0KTtcbiAgICBpZiAoIWlzQXZhaWxhYmxlKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RFcnJvcignRGVzdGluYXRpb24gaXMgbm90IGF2YWlsYWJsZSBmb3IgdGhlIHNlbGVjdGVkIGRhdGVzJyk7XG4gICAgfVxuXG4gICAgLy8gQ2FsY3VsYXRlIHByaWNpbmdcbiAgICBjb25zdCB0b3RhbE5pZ2h0cyA9IE1hdGguY2VpbCgoY2hlY2tPdXQgLSBjaGVja0luKSAvICgxMDAwICogMzYwMCAqIDI0KSk7XG4gICAgY29uc3QgdG90YWxBbW91bnQgPSB0b3RhbE5pZ2h0cyAqIGRlc3RpbmF0aW9uLnByaWNlICogbnVtYmVyT2ZHdWVzdHM7XG5cbiAgICAvLyBDcmVhdGUgYm9va2luZ1xuICAgIGNvbnN0IGJvb2tpbmcgPSBuZXcgQm9va2luZyh7XG4gICAgICB1c2VyOiB1c2VySWQsXG4gICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb25JZCxcbiAgICAgIGNoZWNrSW5EYXRlOiBjaGVja0luLFxuICAgICAgY2hlY2tPdXREYXRlOiBjaGVja091dCxcbiAgICAgIG51bWJlck9mR3Vlc3RzLFxuICAgICAgcHJpY2VQZXJOaWdodDogZGVzdGluYXRpb24ucHJpY2UsXG4gICAgICB0b3RhbE5pZ2h0cyxcbiAgICAgIHRvdGFsQW1vdW50LFxuICAgICAgcGF5bWVudE1ldGhvZCxcbiAgICAgIHNwZWNpYWxSZXF1ZXN0cyxcbiAgICAgIGNvbnRhY3RFbWFpbDogY29udGFjdEVtYWlsIHx8IHJlcS51c2VyLmVtYWlsLFxuICAgICAgY29udGFjdFBob25lXG4gICAgfSk7XG5cbiAgICBhd2FpdCBib29raW5nLnNhdmUoKTtcblxuICAgIC8vIFBvcHVsYXRlIHRoZSBib29raW5nIHdpdGggZGVzdGluYXRpb24gYW5kIHVzZXIgZGV0YWlsc1xuICAgIGF3YWl0IGJvb2tpbmcucG9wdWxhdGUoW1xuICAgICAgeyBwYXRoOiAnZGVzdGluYXRpb24nLCBzZWxlY3Q6ICd0aXRsZSBsb2NhdGlvbiBpbWFnZVVybCcgfSxcbiAgICAgIHsgcGF0aDogJ3VzZXInLCBzZWxlY3Q6ICduYW1lIGVtYWlsJyB9XG4gICAgXSk7XG5cbiAgICBpbmZvKCdOZXcgYm9va2luZyBjcmVhdGVkJywge1xuICAgICAgYm9va2luZ0lkOiBib29raW5nLl9pZCxcbiAgICAgIHVzZXJJZCxcbiAgICAgIGRlc3RpbmF0aW9uSWQsXG4gICAgICB0b3RhbEFtb3VudFxuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIGJvb2tpbmcgY29uZmlybWF0aW9uIG5vdGlmaWNhdGlvblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBOb3RpZmljYXRpb25TZXJ2aWNlLmNyZWF0ZUJvb2tpbmdDb25maXJtYXRpb25Ob3RpZmljYXRpb24odXNlcklkLCBib29raW5nKTtcbiAgICB9IGNhdGNoIChub3RpZmljYXRpb25FcnJvcikge1xuICAgICAgLy8gTG9nIGVycm9yIGJ1dCBkb24ndCBmYWlsIHRoZSBib29raW5nIGNyZWF0aW9uXG4gICAgICBlcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBib29raW5nIGNvbmZpcm1hdGlvbiBub3RpZmljYXRpb24nLCB7XG4gICAgICAgIGVycm9yOiBub3RpZmljYXRpb25FcnJvci5tZXNzYWdlLFxuICAgICAgICBib29raW5nSWQ6IGJvb2tpbmcuX2lkLFxuICAgICAgICB1c2VySWRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHN1Y2Nlc3NSZXNwb25zZShcbiAgICAgIHsgYm9va2luZyB9LFxuICAgICAgJ0Jvb2tpbmcgY3JlYXRlZCBzdWNjZXNzZnVsbHknXG4gICAgKSk7XG5cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIGJvb2tpbmcnLCB7IGVycm9yOiBlcnIubWVzc2FnZSwgdXNlcklkOiByZXEudXNlcj8uaWQgfSk7XG4gICAgbmV4dChlcnIpO1xuICB9XG59O1xuXG4vLyBHZXQgdXNlcidzIGJvb2tpbmdzXG5jb25zdCBnZXRVc2VyQm9va2luZ3MgPSBhc3luYyhyZXEsIHJlcywgbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyLmlkO1xuICAgIGNvbnN0IHsgc3RhdHVzLCBwYWdlID0gMSwgbGltaXQgPSAxMCB9ID0gcmVxLnF1ZXJ5O1xuXG4gICAgLy8gQnVpbGQgcXVlcnlcbiAgICBjb25zdCBxdWVyeSA9IHsgdXNlcjogdXNlcklkIH07XG4gICAgaWYgKHN0YXR1cykge1xuICAgICAgcXVlcnkuc3RhdHVzID0gc3RhdHVzO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0ZSBwYWdpbmF0aW9uXG4gICAgY29uc3Qgc2tpcCA9IChwYXJzZUludChwYWdlLCAxMCkgLSAxKSAqIHBhcnNlSW50KGxpbWl0LCAxMCk7XG5cbiAgICAvLyBHZXQgYm9va2luZ3Mgd2l0aCBwYWdpbmF0aW9uXG4gICAgY29uc3QgYm9va2luZ3MgPSBhd2FpdCBCb29raW5nLmZpbmQocXVlcnkpXG4gICAgICAucG9wdWxhdGUoJ2Rlc3RpbmF0aW9uJywgJ3RpdGxlIGxvY2F0aW9uIGltYWdlVXJsIHJhdGluZycpXG4gICAgICAuc29ydCh7IGNyZWF0ZWRBdDogLTEgfSlcbiAgICAgIC5za2lwKHNraXApXG4gICAgICAubGltaXQocGFyc2VJbnQobGltaXQsIDEwKSk7XG5cbiAgICAvLyBHZXQgdG90YWwgY291bnQgZm9yIHBhZ2luYXRpb25cbiAgICBjb25zdCB0b3RhbCA9IGF3YWl0IEJvb2tpbmcuY291bnREb2N1bWVudHMocXVlcnkpO1xuXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgYm9va2luZ3MsXG4gICAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgICBjdXJyZW50OiBwYXJzZUludChwYWdlLCAxMCksXG4gICAgICAgICAgcGFnZXM6IE1hdGguY2VpbCh0b3RhbCAvIHBhcnNlSW50KGxpbWl0LCAxMCkpLFxuICAgICAgICAgIHRvdGFsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvcignRXJyb3IgZmV0Y2hpbmcgdXNlciBib29raW5ncycsIHsgZXJyb3I6IGVyci5tZXNzYWdlLCB1c2VySWQ6IHJlcS51c2VyPy5pZCB9KTtcbiAgICBuZXh0KGVycik7XG4gIH1cbn07XG5cbi8vIEdldCBzcGVjaWZpYyBib29raW5nXG5jb25zdCBnZXRCb29raW5nQnlJZCA9IGFzeW5jKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlci5pZDtcblxuICAgIGNvbnN0IGJvb2tpbmcgPSBhd2FpdCBCb29raW5nLmZpbmRCeUlkKGlkKVxuICAgICAgLnBvcHVsYXRlKCdkZXN0aW5hdGlvbicsICd0aXRsZSBsb2NhdGlvbiBpbWFnZVVybCByYXRpbmcgZGVzY3JpcHRpb24nKVxuICAgICAgLnBvcHVsYXRlKCd1c2VyJywgJ25hbWUgZW1haWwnKTtcblxuICAgIGlmICghYm9va2luZykge1xuICAgICAgdGhyb3cgbmV3IE5vdEZvdW5kRXJyb3IoJ0Jvb2tpbmcgbm90IGZvdW5kJyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdXNlciBvd25zIHRoaXMgYm9va2luZyBvciBpcyBhZG1pblxuICAgIGlmIChib29raW5nLnVzZXIuX2lkLnRvU3RyaW5nKCkgIT09IHVzZXJJZCAmJiByZXEudXNlci5yb2xlICE9PSAnYWRtaW4nKSB7XG4gICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdBY2Nlc3MgZGVuaWVkJyk7XG4gICAgfVxuXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgYm9va2luZ1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yKCdFcnJvciBmZXRjaGluZyBib29raW5nJywgeyBlcnJvcjogZXJyLm1lc3NhZ2UsIGJvb2tpbmdJZDogcmVxLnBhcmFtcy5pZCB9KTtcbiAgICBuZXh0KGVycik7XG4gIH1cbn07XG5cbi8vIENhbmNlbCBib29raW5nXG5jb25zdCBjYW5jZWxCb29raW5nID0gYXN5bmMocmVxLCByZXMsIG5leHQpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICAgIGNvbnN0IHsgcmVhc29uIH0gPSByZXEuYm9keTtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlci5pZDtcblxuICAgIGNvbnN0IGJvb2tpbmcgPSBhd2FpdCBCb29raW5nLmZpbmRCeUlkKGlkKS5wb3B1bGF0ZSgnZGVzdGluYXRpb24nKTtcblxuICAgIGlmICghYm9va2luZykge1xuICAgICAgdGhyb3cgbmV3IE5vdEZvdW5kRXJyb3IoJ0Jvb2tpbmcgbm90IGZvdW5kJyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdXNlciBvd25zIHRoaXMgYm9va2luZ1xuICAgIGlmIChib29raW5nLnVzZXIudG9TdHJpbmcoKSAhPT0gdXNlcklkKSB7XG4gICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdBY2Nlc3MgZGVuaWVkJyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgYm9va2luZyBjYW4gYmUgY2FuY2VsbGVkXG4gICAgaWYgKGJvb2tpbmcuc3RhdHVzID09PSAnY2FuY2VsbGVkJykge1xuICAgICAgdGhyb3cgbmV3IENvbmZsaWN0RXJyb3IoJ0Jvb2tpbmcgaXMgYWxyZWFkeSBjYW5jZWxsZWQnKTtcbiAgICB9XG5cbiAgICBpZiAoYm9va2luZy5zdGF0dXMgPT09ICdjb21wbGV0ZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RFcnJvcignQ2Fubm90IGNhbmNlbCBjb21wbGV0ZWQgYm9va2luZycpO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0ZSByZWZ1bmQgYW1vdW50XG4gICAgY29uc3QgcmVmdW5kQW1vdW50ID0gYm9va2luZy5jYWxjdWxhdGVSZWZ1bmQoKTtcblxuICAgIC8vIFVwZGF0ZSBib29raW5nXG4gICAgYm9va2luZy5zdGF0dXMgPSAnY2FuY2VsbGVkJztcbiAgICBib29raW5nLmNhbmNlbGxlZEF0ID0gbmV3IERhdGUoKTtcbiAgICBib29raW5nLmNhbmNlbGxhdGlvblJlYXNvbiA9IHJlYXNvbjtcbiAgICBib29raW5nLnJlZnVuZEFtb3VudCA9IHJlZnVuZEFtb3VudDtcblxuICAgIGlmIChyZWZ1bmRBbW91bnQgPiAwKSB7XG4gICAgICBib29raW5nLnBheW1lbnRTdGF0dXMgPSAncmVmdW5kZWQnO1xuICAgICAgYm9va2luZy5yZWZ1bmRlZEF0ID0gbmV3IERhdGUoKTtcbiAgICB9XG5cbiAgICBhd2FpdCBib29raW5nLnNhdmUoKTtcblxuICAgIGluZm8oJ0Jvb2tpbmcgY2FuY2VsbGVkJywge1xuICAgICAgYm9va2luZ0lkOiBpZCxcbiAgICAgIHVzZXJJZCxcbiAgICAgIHJlZnVuZEFtb3VudFxuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIGJvb2tpbmcgY2FuY2VsbGF0aW9uIG5vdGlmaWNhdGlvblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBOb3RpZmljYXRpb25TZXJ2aWNlLmNyZWF0ZUJvb2tpbmdDYW5jZWxsYXRpb25Ob3RpZmljYXRpb24odXNlcklkLCBib29raW5nLCByZWZ1bmRBbW91bnQpO1xuICAgIH0gY2F0Y2ggKG5vdGlmaWNhdGlvbkVycm9yKSB7XG4gICAgICAvLyBMb2cgZXJyb3IgYnV0IGRvbid0IGZhaWwgdGhlIGNhbmNlbGxhdGlvblxuICAgICAgZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgYm9va2luZyBjYW5jZWxsYXRpb24gbm90aWZpY2F0aW9uJywge1xuICAgICAgICBlcnJvcjogbm90aWZpY2F0aW9uRXJyb3IubWVzc2FnZSxcbiAgICAgICAgYm9va2luZ0lkOiBpZCxcbiAgICAgICAgdXNlcklkXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogJ0Jvb2tpbmcgY2FuY2VsbGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGJvb2tpbmcsXG4gICAgICAgIHJlZnVuZEFtb3VudFxuICAgICAgfVxuICAgIH0pO1xuXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yKCdFcnJvciBjYW5jZWxsaW5nIGJvb2tpbmcnLCB7IGVycm9yOiBlcnIubWVzc2FnZSwgYm9va2luZ0lkOiByZXEucGFyYW1zLmlkIH0pO1xuICAgIG5leHQoZXJyKTtcbiAgfVxufTtcblxuLy8gR2V0IGFsbCBib29raW5ncyAoYWRtaW4gb25seSlcbmNvbnN0IGdldEFsbEJvb2tpbmdzID0gYXN5bmMocmVxLCByZXMsIG5leHQpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IHN0YXR1cywgcGFnZSA9IDEsIGxpbWl0ID0gMjAsIGRlc3RpbmF0aW9uSWQgfSA9IHJlcS5xdWVyeTtcblxuICAgIC8vIEJ1aWxkIHF1ZXJ5XG4gICAgY29uc3QgcXVlcnkgPSB7fTtcbiAgICBpZiAoc3RhdHVzKSB7XG4gICAgICBxdWVyeS5zdGF0dXMgPSBzdGF0dXM7XG4gICAgfVxuICAgIGlmIChkZXN0aW5hdGlvbklkKSB7XG4gICAgICBxdWVyeS5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uSWQ7XG4gICAgfVxuXG4gICAgLy8gQ2FsY3VsYXRlIHBhZ2luYXRpb25cbiAgICBjb25zdCBza2lwID0gKHBhcnNlSW50KHBhZ2UsIDEwKSAtIDEpICogcGFyc2VJbnQobGltaXQsIDEwKTtcblxuICAgIC8vIEdldCBib29raW5ncyB3aXRoIHBhZ2luYXRpb25cbiAgICBjb25zdCBib29raW5ncyA9IGF3YWl0IEJvb2tpbmcuZmluZChxdWVyeSlcbiAgICAgIC5wb3B1bGF0ZSgnZGVzdGluYXRpb24nLCAndGl0bGUgbG9jYXRpb24nKVxuICAgICAgLnBvcHVsYXRlKCd1c2VyJywgJ25hbWUgZW1haWwnKVxuICAgICAgLnNvcnQoeyBjcmVhdGVkQXQ6IC0xIH0pXG4gICAgICAuc2tpcChza2lwKVxuICAgICAgLmxpbWl0KHBhcnNlSW50KGxpbWl0LCAxMCkpO1xuXG4gICAgLy8gR2V0IHRvdGFsIGNvdW50XG4gICAgY29uc3QgdG90YWwgPSBhd2FpdCBCb29raW5nLmNvdW50RG9jdW1lbnRzKHF1ZXJ5KTtcblxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGJvb2tpbmdzLFxuICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgY3VycmVudDogcGFyc2VJbnQocGFnZSwgMTApLFxuICAgICAgICAgIHBhZ2VzOiBNYXRoLmNlaWwodG90YWwgLyBwYXJzZUludChsaW1pdCwgMTApKSxcbiAgICAgICAgICB0b3RhbFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGFsbCBib29raW5ncycsIHsgZXJyb3I6IGVyci5tZXNzYWdlIH0pO1xuICAgIG5leHQoZXJyKTtcbiAgfVxufTtcblxuLy8gVXBkYXRlIGJvb2tpbmcgc3RhdHVzIChhZG1pbiBvbmx5KVxuY29uc3QgdXBkYXRlQm9va2luZ1N0YXR1cyA9IGFzeW5jKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcbiAgICBjb25zdCB7IHN0YXR1cyB9ID0gcmVxLmJvZHk7XG5cbiAgICBjb25zdCB2YWxpZFN0YXR1c2VzID0gWydjb25maXJtZWQnLCAnY2FuY2VsbGVkJywgJ2NvbXBsZXRlZCcsICduby1zaG93J107XG4gICAgaWYgKCF2YWxpZFN0YXR1c2VzLmluY2x1ZGVzKHN0YXR1cykpIHtcbiAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0ludmFsaWQgYm9va2luZyBzdGF0dXMnKTtcbiAgICB9XG5cbiAgICBjb25zdCBib29raW5nID0gYXdhaXQgQm9va2luZy5maW5kQnlJZChpZCk7XG4gICAgaWYgKCFib29raW5nKSB7XG4gICAgICB0aHJvdyBuZXcgTm90Rm91bmRFcnJvcignQm9va2luZyBub3QgZm91bmQnKTtcbiAgICB9XG5cbiAgICBib29raW5nLnN0YXR1cyA9IHN0YXR1cztcbiAgICBhd2FpdCBib29raW5nLnNhdmUoKTtcblxuICAgIGluZm8oJ0Jvb2tpbmcgc3RhdHVzIHVwZGF0ZWQnLCB7XG4gICAgICBib29raW5nSWQ6IGlkLFxuICAgICAgbmV3U3RhdHVzOiBzdGF0dXMsXG4gICAgICBhZG1pbklkOiByZXEudXNlci5pZFxuICAgIH0pO1xuXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6ICdCb29raW5nIHN0YXR1cyB1cGRhdGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGJvb2tpbmdcbiAgICAgIH1cbiAgICB9KTtcblxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvcignRXJyb3IgdXBkYXRpbmcgYm9va2luZyBzdGF0dXMnLCB7IGVycm9yOiBlcnIubWVzc2FnZSwgYm9va2luZ0lkOiByZXEucGFyYW1zLmlkIH0pO1xuICAgIG5leHQoZXJyKTtcbiAgfVxufTtcblxuLy8gQ2hlY2sgYXZhaWxhYmlsaXR5IGZvciBhIGRlc3RpbmF0aW9uXG5jb25zdCBjaGVja0F2YWlsYWJpbGl0eSA9IGFzeW5jKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBkZXN0aW5hdGlvbklkLCBjaGVja0luRGF0ZSwgY2hlY2tPdXREYXRlIH0gPSByZXEucXVlcnk7XG5cbiAgICBpZiAoIWRlc3RpbmF0aW9uSWQgfHwgIWNoZWNrSW5EYXRlIHx8ICFjaGVja091dERhdGUpIHtcbiAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVycycpO1xuICAgIH1cblxuICAgIGNvbnN0IGNoZWNrSW4gPSBuZXcgRGF0ZShjaGVja0luRGF0ZSk7XG4gICAgY29uc3QgY2hlY2tPdXQgPSBuZXcgRGF0ZShjaGVja091dERhdGUpO1xuXG4gICAgY29uc3QgaXNBdmFpbGFibGUgPSBhd2FpdCBCb29raW5nLmNoZWNrQXZhaWxhYmlsaXR5KGRlc3RpbmF0aW9uSWQsIGNoZWNrSW4sIGNoZWNrT3V0KTtcblxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGF2YWlsYWJsZTogaXNBdmFpbGFibGUsXG4gICAgICAgIGNoZWNrSW5EYXRlOiBjaGVja0luLFxuICAgICAgICBjaGVja091dERhdGU6IGNoZWNrT3V0XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IoJ0Vycm9yIGNoZWNraW5nIGF2YWlsYWJpbGl0eScsIHsgZXJyb3I6IGVyci5tZXNzYWdlIH0pO1xuICAgIG5leHQoZXJyKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZUJvb2tpbmcsXG4gIGdldFVzZXJCb29raW5ncyxcbiAgZ2V0Qm9va2luZ0J5SWQsXG4gIGNhbmNlbEJvb2tpbmcsXG4gIGdldEFsbEJvb2tpbmdzLFxuICB1cGRhdGVCb29raW5nU3RhdHVzLFxuICBjaGVja0F2YWlsYWJpbGl0eVxufTsiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO0FBQ3pELE1BQU1DLFdBQVcsR0FBR0QsT0FBTyxDQUFDLG9DQUFvQyxDQUFDO0FBQ2pFLE1BQU07RUFBRUUsZUFBZTtFQUFFQyxhQUFhO0VBQUVDO0FBQWMsQ0FBQyxHQUFH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