cce2967d779f9e84cca3dea1201ff50f
// Mock external services before importing routes
_getJestObj().mock('../config/redis', () => ({
  connectRedis: jest.fn().mockResolvedValue(),
  disconnectRedis: jest.fn().mockResolvedValue(),
  getRedisClient: jest.fn(() => ({
    get: jest.fn().mockResolvedValue(null),
    set: jest.fn().mockResolvedValue('OK'),
    del: jest.fn().mockResolvedValue(1),
    exists: jest.fn().mockResolvedValue(0),
    expire: jest.fn().mockResolvedValue(1),
    flushall: jest.fn().mockResolvedValue('OK'),
    ping: jest.fn().mockResolvedValue('PONG'),
    quit: jest.fn().mockResolvedValue('OK'),
    status: 'ready'
  })),
  redisUtils: {
    deleteCache: jest.fn().mockResolvedValue(true),
    getCache: jest.fn().mockResolvedValue(null),
    setCache: jest.fn().mockResolvedValue('OK'),
    exists: jest.fn().mockResolvedValue(false),
    expire: jest.fn().mockResolvedValue(true),
    flushall: jest.fn().mockResolvedValue('OK')
  }
}));

// Import routes
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
// Test-specific app configuration that doesn't connect to external services
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
const slowDown = require('express-slow-down');
const authRoutes = require('../routes/auth.routes');
const destinationRoutes = require('../routes/destination.routes');
const bookingRoutes = require('../routes/booking.routes');
const healthRoutes = require('../routes/health.routes');

// Import middleware
const errorHandler = require('../middleware/errorHandler');

// Create Express app
const app = express();

// Security middleware
app.use(helmet({
  contentSecurityPolicy: false,
  // Disable for testing
  crossOriginEmbedderPolicy: false
}));

// CORS configuration
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000', 'http://localhost:5173'],
  credentials: true
}));

// Compression middleware
app.use(compression());

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  // 15 minutes
  max: 100,
  // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});
app.use('/api/', limiter);

// Speed limiting
const speedLimiter = slowDown({
  windowMs: 15 * 60 * 1000,
  // 15 minutes
  delayAfter: 50,
  // allow 50 requests per 15 minutes, then...
  delayMs: () => 500,
  // begin adding 500ms of delay per request above 50
  validate: {
    delayMs: false
  } // Disable validation warning
});
app.use('/api/', speedLimiter);

// Body parsing middleware
app.use(express.json({
  limit: '10mb'
}));
app.use(express.urlencoded({
  extended: true,
  limit: '10mb'
}));

// Request validation middleware (disabled for tests)
// app.use(validateRequest);

// Routes
app.use('/api/v1/auth', authRoutes);
app.use('/api/v1/destinations', destinationRoutes);
app.use('/api/v1/bookings', bookingRoutes);
app.use('/health', healthRoutes);

// 404 handler for undefined routes
app.use('*', (req, res, next) => {
  const error = new Error(`Route ${req.originalUrl} not found`);
  error.statusCode = 404;
  error.status = 'fail';
  error.code = 'ROUTE_NOT_FOUND';
  next(error);
});

// Error handling middleware (must be last)
app.use(errorHandler);
module.exports = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,