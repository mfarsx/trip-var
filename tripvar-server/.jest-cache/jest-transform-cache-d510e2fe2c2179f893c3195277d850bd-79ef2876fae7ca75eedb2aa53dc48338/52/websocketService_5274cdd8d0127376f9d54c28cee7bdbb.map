{"version":3,"names":["cov_1px0sjufky","actualCoverage","WebSocket","s","require","jwt","info","warn","error","config","WebSocketService","constructor","f","wss","clients","Map","connectionCount","rateLimitMap","maxMessagesPerMinute","cleanupInterval","initialize","server","Server","path","verifyClient","bind","maxPayload","perMessageDeflate","threshold","concurrencyLimit","memLevel","on","handleConnection","setInterval","cleanupRateLimit","port","url","URL","req","headers","host","token","searchParams","get","b","decoded","verify","secret","user","err","message","ws","userId","userAgent","has","set","Set","add","sendToClient","type","payload","timestamp","Date","toISOString","data","JSON","parse","handleMessage","code","reason","toString","delete","size","pingInterval","readyState","OPEN","ping","clearInterval","checkRateLimit","handleSubscription","events","send","stringify","sendToUser","userConnections","forEach","broadcast","sendNotification","notification","sendBookingUpdate","booking","sendPaymentUpdate","payment","sendSystemMessage","getStats","totalConnections","uniqueUsers","connectedUsers","Array","from","keys","now","userRateLimit","count","resetTime","rateLimit","entries","close","websocketService","module","exports"],"sources":["websocketService.js"],"sourcesContent":["const WebSocket = require('ws');\nconst jwt = require('jsonwebtoken');\nconst { info, warn, error } = require('../utils/logger');\nconst config = require('../config/config');\n\nclass WebSocketService {\n  constructor() {\n    this.wss = null;\n    this.clients = new Map(); // Map of userId to WebSocket connections\n    this.connectionCount = 0;\n    this.rateLimitMap = new Map(); // Rate limiting per user\n    this.maxMessagesPerMinute = 60; // Rate limit\n    this.cleanupInterval = null;\n  }\n\n  initialize(server) {\n    this.wss = new WebSocket.Server({ \n      server,\n      path: '/ws',\n      verifyClient: this.verifyClient.bind(this),\n      maxPayload: 1024 * 1024, // 1MB max payload\n      perMessageDeflate: {\n        threshold: 1024,\n        concurrencyLimit: 10,\n        memLevel: 7\n      }\n    });\n\n    this.wss.on('connection', this.handleConnection.bind(this));\n    \n    // Start cleanup interval for rate limiting\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupRateLimit();\n    }, 60000); // Clean up every minute\n    \n    info('WebSocket server initialized', {\n      path: '/ws',\n      port: config.server.port\n    });\n  }\n\n  verifyClient(info) {\n    try {\n      const url = new URL(info.req.url, `http://${info.req.headers.host}`);\n      const token = url.searchParams.get('token');\n      \n      if (!token) {\n        warn('WebSocket connection attempt without token');\n        return false;\n      }\n\n      // Verify JWT token\n      const decoded = jwt.verify(token, config.jwt.secret);\n      info.req.user = decoded;\n      return true;\n    } catch (err) {\n      warn('WebSocket connection with invalid token', { error: err.message });\n      return false;\n    }\n  }\n\n  handleConnection(ws, req) {\n    const user = req.user;\n    const userId = user.userId;\n    \n    this.connectionCount++;\n    info('WebSocket client connected', {\n      userId,\n      connectionCount: this.connectionCount,\n      userAgent: req.headers['user-agent']\n    });\n\n    // Store the connection\n    if (!this.clients.has(userId)) {\n      this.clients.set(userId, new Set());\n    }\n    this.clients.get(userId).add(ws);\n\n    // Send welcome message\n    this.sendToClient(ws, {\n      type: 'connection_established',\n      payload: {\n        message: 'WebSocket connection established',\n        userId,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n    // Handle incoming messages\n    ws.on('message', (data) => {\n      try {\n        const message = JSON.parse(data);\n        this.handleMessage(ws, user, message);\n      } catch (err) {\n        error('Invalid WebSocket message format', { error: err.message });\n        this.sendToClient(ws, {\n          type: 'error',\n          payload: { message: 'Invalid message format' }\n        });\n      }\n    });\n\n    // Handle disconnection\n    ws.on('close', (code, reason) => {\n      this.connectionCount--;\n      info('WebSocket client disconnected', {\n        userId,\n        code,\n        reason: reason.toString(),\n        connectionCount: this.connectionCount\n      });\n\n      // Remove from clients map\n      if (this.clients.has(userId)) {\n        this.clients.get(userId).delete(ws);\n        if (this.clients.get(userId).size === 0) {\n          this.clients.delete(userId);\n        }\n      }\n    });\n\n    // Handle errors\n    ws.on('error', (err) => {\n      error('WebSocket error', { userId, error: err.message });\n    });\n\n    // Send ping to keep connection alive\n    const pingInterval = setInterval(() => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.ping();\n      } else {\n        clearInterval(pingInterval);\n      }\n    }, 30000); // Ping every 30 seconds\n\n    ws.on('close', () => {\n      clearInterval(pingInterval);\n    });\n  }\n\n  handleMessage(ws, user, message) {\n    // Rate limiting check\n    if (!this.checkRateLimit(user.userId)) {\n      warn('Rate limit exceeded for user', { userId: user.userId });\n      this.sendToClient(ws, {\n        type: 'error',\n        payload: { message: 'Rate limit exceeded' }\n      });\n      return;\n    }\n\n    info('WebSocket message received', {\n      userId: user.userId,\n      type: message.type\n    });\n\n    switch (message.type) {\n      case 'ping':\n        this.sendToClient(ws, { type: 'pong', payload: { timestamp: new Date().toISOString() } });\n        break;\n      case 'subscribe':\n        // Handle subscription to specific events\n        this.handleSubscription(ws, user, message.payload);\n        break;\n      default:\n        warn('Unknown WebSocket message type', { type: message.type, userId: user.userId });\n    }\n  }\n\n  handleSubscription(ws, user, payload) {\n    // Store subscription preferences for the user\n    // This could be extended to support different event types\n    info('User subscribed to events', {\n      userId: user.userId,\n      events: payload.events\n    });\n  }\n\n  // Send message to a specific client\n  sendToClient(ws, message) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }\n\n  // Send message to a specific user (all their connections)\n  sendToUser(userId, message) {\n    if (this.clients.has(userId)) {\n      const userConnections = this.clients.get(userId);\n      userConnections.forEach(ws => {\n        this.sendToClient(ws, message);\n      });\n    }\n  }\n\n  // Send message to all connected clients\n  broadcast(message) {\n    this.wss.clients.forEach(ws => {\n      this.sendToClient(ws, message);\n    });\n  }\n\n  // Send notification to a user\n  sendNotification(userId, notification) {\n    this.sendToUser(userId, {\n      type: 'notification',\n      payload: notification\n    });\n  }\n\n  // Send booking update to a user\n  sendBookingUpdate(userId, booking) {\n    this.sendToUser(userId, {\n      type: 'booking_update',\n      payload: booking\n    });\n  }\n\n  // Send payment update to a user\n  sendPaymentUpdate(userId, payment) {\n    this.sendToUser(userId, {\n      type: 'payment_update',\n      payload: payment\n    });\n  }\n\n  // Send system message to all users\n  sendSystemMessage(message) {\n    this.broadcast({\n      type: 'system_message',\n      payload: {\n        message,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n\n  // Get connection statistics\n  getStats() {\n    return {\n      totalConnections: this.connectionCount,\n      uniqueUsers: this.clients.size,\n      connectedUsers: Array.from(this.clients.keys())\n    };\n  }\n\n  // Rate limiting methods\n  checkRateLimit(userId) {\n    const now = Date.now();\n    const userRateLimit = this.rateLimitMap.get(userId) || { count: 0, resetTime: now + 60000 };\n    \n    if (now > userRateLimit.resetTime) {\n      // Reset counter\n      userRateLimit.count = 1;\n      userRateLimit.resetTime = now + 60000;\n    } else {\n      userRateLimit.count++;\n    }\n    \n    this.rateLimitMap.set(userId, userRateLimit);\n    return userRateLimit.count <= this.maxMessagesPerMinute;\n  }\n\n  cleanupRateLimit() {\n    const now = Date.now();\n    for (const [userId, rateLimit] of this.rateLimitMap.entries()) {\n      if (now > rateLimit.resetTime) {\n        this.rateLimitMap.delete(userId);\n      }\n    }\n  }\n\n  // Close all connections\n  close() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    \n    if (this.wss) {\n      this.wss.close();\n      info('WebSocket server closed');\n    }\n  }\n}\n\n// Create singleton instance\nconst websocketService = new WebSocketService();\n\nmodule.exports = websocketService;"],"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","ignoreList":[]}