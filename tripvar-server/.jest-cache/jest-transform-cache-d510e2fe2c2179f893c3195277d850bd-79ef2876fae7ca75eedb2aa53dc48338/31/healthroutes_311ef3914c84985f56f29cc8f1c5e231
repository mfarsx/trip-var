fefc3bc26917e742c8cd8908e1bd0f38
/* istanbul ignore next */
function cov_2mhdytxhta() {
  var path = "/Users/mfarsx/dev/tripvar/tripvar-server/src/routes/health.routes.js";
  var hash = "add72dc5bfe306e06f52e0d1db820da22cf51c91";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/mfarsx/dev/tripvar/tripvar-server/src/routes/health.routes.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 15
        },
        end: {
          line: 2,
          column: 31
        }
      },
      "2": {
        start: {
          line: 3,
          column: 17
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "3": {
        start: {
          line: 4,
          column: 27
        },
        end: {
          line: 4,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 42
        }
      },
      "5": {
        start: {
          line: 8,
          column: 11
        },
        end: {
          line: 8,
          column: 24
        }
      },
      "6": {
        start: {
          line: 9,
          column: 16
        },
        end: {
          line: 9,
          column: 34
        }
      },
      "7": {
        start: {
          line: 22,
          column: 0
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "8": {
        start: {
          line: 23,
          column: 17
        },
        end: {
          line: 30,
          column: 3
        }
      },
      "9": {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 32,
          column: 19
        }
      },
      "10": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 47,
          column: 3
        }
      },
      "11": {
        start: {
          line: 37,
          column: 2
        },
        end: {
          line: 46,
          column: 3
        }
      },
      "12": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 50
        }
      },
      "13": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "14": {
        start: {
          line: 40,
          column: 6
        },
        end: {
          line: 40,
          column: 56
        }
      },
      "15": {
        start: {
          line: 42,
          column: 6
        },
        end: {
          line: 42,
          column: 74
        }
      },
      "16": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 70
        }
      },
      "17": {
        start: {
          line: 50,
          column: 0
        },
        end: {
          line: 69,
          column: 3
        }
      },
      "18": {
        start: {
          line: 51,
          column: 2
        },
        end: {
          line: 68,
          column: 3
        }
      },
      "19": {
        start: {
          line: 52,
          column: 24
        },
        end: {
          line: 52,
          column: 40
        }
      },
      "20": {
        start: {
          line: 53,
          column: 22
        },
        end: {
          line: 53,
          column: 32
        }
      },
      "21": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 29
        }
      },
      "22": {
        start: {
          line: 55,
          column: 25
        },
        end: {
          line: 55,
          column: 47
        }
      },
      "23": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 61,
          column: 7
        }
      },
      "24": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 67,
          column: 7
        }
      },
      "25": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 100,
          column: 3
        }
      },
      "26": {
        start: {
          line: 73,
          column: 18
        },
        end: {
          line: 97,
          column: 3
        }
      },
      "27": {
        start: {
          line: 99,
          column: 2
        },
        end: {
          line: 99,
          column: 20
        }
      },
      "28": {
        start: {
          line: 103,
          column: 0
        },
        end: {
          line: 190,
          column: 3
        }
      },
      "29": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 30
        }
      },
      "30": {
        start: {
          line: 105,
          column: 17
        },
        end: {
          line: 114,
          column: 3
        }
      },
      "31": {
        start: {
          line: 117,
          column: 2
        },
        end: {
          line: 140,
          column: 3
        }
      },
      "32": {
        start: {
          line: 118,
          column: 24
        },
        end: {
          line: 118,
          column: 34
        }
      },
      "33": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 119,
          column: 50
        }
      },
      "34": {
        start: {
          line: 120,
          column: 27
        },
        end: {
          line: 120,
          column: 51
        }
      },
      "35": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 126,
          column: 6
        }
      },
      "36": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 128,
          column: 60
        }
      },
      "37": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 132,
          column: 5
        }
      },
      "38": {
        start: {
          line: 131,
          column: 6
        },
        end: {
          line: 131,
          column: 33
        }
      },
      "39": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 137,
          column: 6
        }
      },
      "40": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 138,
          column: 35
        }
      },
      "41": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 139,
          column: 28
        }
      },
      "42": {
        start: {
          line: 143,
          column: 2
        },
        end: {
          line: 162,
          column: 3
        }
      },
      "43": {
        start: {
          line: 144,
          column: 27
        },
        end: {
          line: 144,
          column: 37
        }
      },
      "44": {
        start: {
          line: 145,
          column: 24
        },
        end: {
          line: 145,
          column: 40
        }
      },
      "45": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 146,
          column: 29
        }
      },
      "46": {
        start: {
          line: 147,
          column: 30
        },
        end: {
          line: 147,
          column: 57
        }
      },
      "47": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 152,
          column: 6
        }
      },
      "48": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 154,
          column: 33
        }
      },
      "49": {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 159,
          column: 6
        }
      },
      "50": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 160,
          column: 33
        }
      },
      "51": {
        start: {
          line: 161,
          column: 4
        },
        end: {
          line: 161,
          column: 31
        }
      },
      "52": {
        start: {
          line: 165,
          column: 22
        },
        end: {
          line: 165,
          column: 43
        }
      },
      "53": {
        start: {
          line: 166,
          column: 29
        },
        end: {
          line: 166,
          column: 81
        }
      },
      "54": {
        start: {
          line: 168,
          column: 2
        },
        end: {
          line: 176,
          column: 4
        }
      },
      "55": {
        start: {
          line: 179,
          column: 2
        },
        end: {
          line: 179,
          column: 54
        }
      },
      "56": {
        start: {
          line: 182,
          column: 19
        },
        end: {
          line: 182,
          column: 22
        }
      },
      "57": {
        start: {
          line: 183,
          column: 2
        },
        end: {
          line: 187,
          column: 3
        }
      },
      "58": {
        start: {
          line: 184,
          column: 4
        },
        end: {
          line: 184,
          column: 21
        }
      },
      "59": {
        start: {
          line: 185,
          column: 9
        },
        end: {
          line: 187,
          column: 3
        }
      },
      "60": {
        start: {
          line: 186,
          column: 4
        },
        end: {
          line: 186,
          column: 21
        }
      },
      "61": {
        start: {
          line: 189,
          column: 2
        },
        end: {
          line: 189,
          column: 38
        }
      },
      "62": {
        start: {
          line: 193,
          column: 0
        },
        end: {
          line: 223,
          column: 3
        }
      },
      "63": {
        start: {
          line: 194,
          column: 2
        },
        end: {
          line: 222,
          column: 3
        }
      },
      "64": {
        start: {
          line: 196,
          column: 20
        },
        end: {
          line: 196,
          column: 50
        }
      },
      "65": {
        start: {
          line: 199,
          column: 21
        },
        end: {
          line: 199,
          column: 25
        }
      },
      "66": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 207,
          column: 5
        }
      },
      "67": {
        start: {
          line: 201,
          column: 26
        },
        end: {
          line: 201,
          column: 42
        }
      },
      "68": {
        start: {
          line: 202,
          column: 6
        },
        end: {
          line: 202,
          column: 31
        }
      },
      "69": {
        start: {
          line: 204,
          column: 6
        },
        end: {
          line: 204,
          column: 25
        }
      },
      "70": {
        start: {
          line: 206,
          column: 6
        },
        end: {
          line: 206,
          column: 59
        }
      },
      "71": {
        start: {
          line: 209,
          column: 4
        },
        end: {
          line: 219,
          column: 5
        }
      },
      "72": {
        start: {
          line: 210,
          column: 6
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "73": {
        start: {
          line: 218,
          column: 6
        },
        end: {
          line: 218,
          column: 86
        }
      },
      "74": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 221,
          column: 73
        }
      },
      "75": {
        start: {
          line: 226,
          column: 0
        },
        end: {
          line: 229,
          column: 3
        }
      },
      "76": {
        start: {
          line: 228,
          column: 2
        },
        end: {
          line: 228,
          column: 70
        }
      },
      "77": {
        start: {
          line: 231,
          column: 0
        },
        end: {
          line: 231,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 22,
            column: 17
          }
        },
        loc: {
          start: {
            line: 22,
            column: 30
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 22
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 36,
            column: 18
          },
          end: {
            line: 36,
            column: 19
          }
        },
        loc: {
          start: {
            line: 36,
            column: 37
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 36
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 50,
            column: 21
          },
          end: {
            line: 50,
            column: 22
          }
        },
        loc: {
          start: {
            line: 50,
            column: 40
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 50
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 72,
            column: 23
          },
          end: {
            line: 72,
            column: 24
          }
        },
        loc: {
          start: {
            line: 72,
            column: 37
          },
          end: {
            line: 100,
            column: 1
          }
        },
        line: 72
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 103,
            column: 19
          },
          end: {
            line: 103,
            column: 20
          }
        },
        loc: {
          start: {
            line: 103,
            column: 38
          },
          end: {
            line: 190,
            column: 1
          }
        },
        line: 103
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 193,
            column: 21
          },
          end: {
            line: 193,
            column: 22
          }
        },
        loc: {
          start: {
            line: 193,
            column: 40
          },
          end: {
            line: 223,
            column: 1
          }
        },
        line: 193
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 226,
            column: 20
          },
          end: {
            line: 226,
            column: 21
          }
        },
        loc: {
          start: {
            line: 226,
            column: 34
          },
          end: {
            line: 229,
            column: 1
          }
        },
        line: 226
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 13
          },
          end: {
            line: 27,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 13
          },
          end: {
            line: 27,
            column: 44
          }
        }, {
          start: {
            line: 27,
            column: 48
          },
          end: {
            line: 27,
            column: 55
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: 41,
            column: 11
          },
          end: {
            line: 43,
            column: 5
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 109,
            column: 13
          },
          end: {
            line: 109,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 13
          },
          end: {
            line: 109,
            column: 44
          }
        }, {
          start: {
            line: 109,
            column: 48
          },
          end: {
            line: 109,
            column: 55
          }
        }],
        line: 109
      },
      "3": {
        loc: {
          start: {
            line: 123,
            column: 14
          },
          end: {
            line: 123,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 30
          },
          end: {
            line: 123,
            column: 41
          }
        }, {
          start: {
            line: 123,
            column: 44
          },
          end: {
            line: 123,
            column: 58
          }
        }],
        line: 123
      },
      "4": {
        loc: {
          start: {
            line: 128,
            column: 28
          },
          end: {
            line: 128,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 128,
            column: 44
          },
          end: {
            line: 128,
            column: 50
          }
        }, {
          start: {
            line: 128,
            column: 53
          },
          end: {
            line: 128,
            column: 59
          }
        }],
        line: 128
      },
      "5": {
        loc: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "6": {
        loc: {
          start: {
            line: 183,
            column: 2
          },
          end: {
            line: 187,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 2
          },
          end: {
            line: 187,
            column: 3
          }
        }, {
          start: {
            line: 185,
            column: 9
          },
          end: {
            line: 187,
            column: 3
          }
        }],
        line: 183
      },
      "7": {
        loc: {
          start: {
            line: 185,
            column: 9
          },
          end: {
            line: 187,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 9
          },
          end: {
            line: 187,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "8": {
        loc: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        }, {
          start: {
            line: 217,
            column: 11
          },
          end: {
            line: 219,
            column: 5
          }
        }],
        line: 209
      },
      "9": {
        loc: {
          start: {
            line: 214,
            column: 17
          },
          end: {
            line: 214,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 214,
            column: 30
          },
          end: {
            line: 214,
            column: 37
          }
        }, {
          start: {
            line: 214,
            column: 40
          },
          end: {
            line: 214,
            column: 51
          }
        }],
        line: 214
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "add72dc5bfe306e06f52e0d1db820da22cf51c91"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2mhdytxhta = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2mhdytxhta();
const express =
/* istanbul ignore next */
(cov_2mhdytxhta().s[0]++, require('express'));
const router =
/* istanbul ignore next */
(cov_2mhdytxhta().s[1]++, express.Router());
const mongoose =
/* istanbul ignore next */
(cov_2mhdytxhta().s[2]++, require('mongoose'));
const {
  getRedisClient
} =
/* istanbul ignore next */
(cov_2mhdytxhta().s[3]++, require('../config/redis'));
// const { HealthChecker, createHealthCheckMiddleware, createReadinessMiddleware, createLivenessMiddleware, createMetricsMiddleware } = require('../middleware/healthCheck');

const config =
/* istanbul ignore next */
(cov_2mhdytxhta().s[4]++, require('../config/config'));
const os =
/* istanbul ignore next */
(cov_2mhdytxhta().s[5]++, require('os'));
const process =
/* istanbul ignore next */
(cov_2mhdytxhta().s[6]++, require('process'));

// Initialize health checker
let healthChecker;
let redisClient;

// Initialize health checker without Redis initially
// healthChecker = new HealthChecker(null); // HealthChecker not implemented yet

// Metrics middleware
// const metricsMiddleware = createMetricsMiddleware(); // Metrics middleware not implemented yet

// Basic health check
/* istanbul ignore next */
cov_2mhdytxhta().s[7]++;
router.get('/', (req, res) => {
  /* istanbul ignore next */
  cov_2mhdytxhta().f[0]++;
  const health =
  /* istanbul ignore next */
  (cov_2mhdytxhta().s[8]++, {
    status: 'ok',
    timestamp: new Date().toISOString(),
    service: 'tripvar-server',
    version:
    /* istanbul ignore next */
    (cov_2mhdytxhta().b[0][0]++, process.env.npm_package_version) ||
    /* istanbul ignore next */
    (cov_2mhdytxhta().b[0][1]++, '1.0.0'),
    environment: config.server.nodeEnv,
    uptime: process.uptime()
  });
  /* istanbul ignore next */
  cov_2mhdytxhta().s[9]++;
  res.json(health);
});

// Database health check
/* istanbul ignore next */
cov_2mhdytxhta().s[10]++;
router.get('/db', async (req, res) => {
  /* istanbul ignore next */
  cov_2mhdytxhta().f[1]++;
  cov_2mhdytxhta().s[11]++;
  try {
    const dbState =
    /* istanbul ignore next */
    (cov_2mhdytxhta().s[12]++, mongoose.connection.readyState);
    /* istanbul ignore next */
    cov_2mhdytxhta().s[13]++;
    if (dbState === 1) {
      /* istanbul ignore next */
      cov_2mhdytxhta().b[1][0]++;
      cov_2mhdytxhta().s[14]++;
      res.json({
        status: 'ok',
        database: 'connected'
      });
    } else {
      /* istanbul ignore next */
      cov_2mhdytxhta().b[1][1]++;
      cov_2mhdytxhta().s[15]++;
      res.status(503).json({
        status: 'error',
        database: 'disconnected'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2mhdytxhta().s[16]++;
    res.status(503).json({
      status: 'error',
      message: error.message
    });
  }
});

// Redis health check
/* istanbul ignore next */
cov_2mhdytxhta().s[17]++;
router.get('/redis', async (req, res) => {
  /* istanbul ignore next */
  cov_2mhdytxhta().f[2]++;
  cov_2mhdytxhta().s[18]++;
  try {
    const redisClient =
    /* istanbul ignore next */
    (cov_2mhdytxhta().s[19]++, getRedisClient());
    const startTime =
    /* istanbul ignore next */
    (cov_2mhdytxhta().s[20]++, Date.now());
    /* istanbul ignore next */
    cov_2mhdytxhta().s[21]++;
    await redisClient.ping();
    const responseTime =
    /* istanbul ignore next */
    (cov_2mhdytxhta().s[22]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_2mhdytxhta().s[23]++;
    res.json({
      status: 'ok',
      redis: 'connected',
      responseTime: `${responseTime}ms`
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2mhdytxhta().s[24]++;
    res.status(503).json({
      status: 'error',
      redis: 'disconnected',
      message: error.message
    });
  }
});

// System metrics
/* istanbul ignore next */
cov_2mhdytxhta().s[25]++;
router.get('/metrics', (req, res) => {
  /* istanbul ignore next */
  cov_2mhdytxhta().f[3]++;
  const metrics =
  /* istanbul ignore next */
  (cov_2mhdytxhta().s[26]++, {
    timestamp: new Date().toISOString(),
    system: {
      uptime: process.uptime(),
      memory: {
        used: process.memoryUsage(),
        free: os.freemem(),
        total: os.totalmem()
      },
      cpu: {
        loadAverage: os.loadavg(),
        cpus: os.cpus().length
      },
      platform: os.platform(),
      arch: os.arch(),
      nodeVersion: process.version
    },
    process: {
      pid: process.pid,
      ppid: process.ppid,
      title: process.title,
      argv: process.argv,
      execPath: process.execPath
    }
  });
  /* istanbul ignore next */
  cov_2mhdytxhta().s[27]++;
  res.json(metrics);
});

// Complete health check (all services)
/* istanbul ignore next */
cov_2mhdytxhta().s[28]++;
router.get('/all', async (req, res) => {
  /* istanbul ignore next */
  cov_2mhdytxhta().f[4]++;
  const startTime =
  /* istanbul ignore next */
  (cov_2mhdytxhta().s[29]++, Date.now());
  const health =
  /* istanbul ignore next */
  (cov_2mhdytxhta().s[30]++, {
    status: 'ok',
    timestamp: new Date().toISOString(),
    service: 'tripvar-server',
    version:
    /* istanbul ignore next */
    (cov_2mhdytxhta().b[2][0]++, process.env.npm_package_version) ||
    /* istanbul ignore next */
    (cov_2mhdytxhta().b[2][1]++, '1.0.0'),
    environment: config.server.nodeEnv,
    uptime: process.uptime(),
    services: {},
    checks: {}
  });

  // Check MongoDB
  /* istanbul ignore next */
  cov_2mhdytxhta().s[31]++;
  try {
    const dbStartTime =
    /* istanbul ignore next */
    (cov_2mhdytxhta().s[32]++, Date.now());
    const dbState =
    /* istanbul ignore next */
    (cov_2mhdytxhta().s[33]++, mongoose.connection.readyState);
    const dbResponseTime =
    /* istanbul ignore next */
    (cov_2mhdytxhta().s[34]++, Date.now() - dbStartTime);
    /* istanbul ignore next */
    cov_2mhdytxhta().s[35]++;
    health.services.mongodb = {
      status: dbState === 1 ?
      /* istanbul ignore next */
      (cov_2mhdytxhta().b[3][0]++, 'connected') :
      /* istanbul ignore next */
      (cov_2mhdytxhta().b[3][1]++, 'disconnected'),
      responseTime: `${dbResponseTime}ms`,
      readyState: dbState
    };
    /* istanbul ignore next */
    cov_2mhdytxhta().s[36]++;
    health.checks.mongodb = dbState === 1 ?
    /* istanbul ignore next */
    (cov_2mhdytxhta().b[4][0]++, 'pass') :
    /* istanbul ignore next */
    (cov_2mhdytxhta().b[4][1]++, 'fail');
    /* istanbul ignore next */
    cov_2mhdytxhta().s[37]++;
    if (dbState !== 1) {
      /* istanbul ignore next */
      cov_2mhdytxhta().b[5][0]++;
      cov_2mhdytxhta().s[38]++;
      health.status = 'degraded';
    } else
    /* istanbul ignore next */
    {
      cov_2mhdytxhta().b[5][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2mhdytxhta().s[39]++;
    health.services.mongodb = {
      status: 'error',
      error: error.message
    };
    /* istanbul ignore next */
    cov_2mhdytxhta().s[40]++;
    health.checks.mongodb = 'fail';
    /* istanbul ignore next */
    cov_2mhdytxhta().s[41]++;
    health.status = 'error';
  }

  // Check Redis
  /* istanbul ignore next */
  cov_2mhdytxhta().s[42]++;
  try {
    const redisStartTime =
    /* istanbul ignore next */
    (cov_2mhdytxhta().s[43]++, Date.now());
    const redisClient =
    /* istanbul ignore next */
    (cov_2mhdytxhta().s[44]++, getRedisClient());
    /* istanbul ignore next */
    cov_2mhdytxhta().s[45]++;
    await redisClient.ping();
    const redisResponseTime =
    /* istanbul ignore next */
    (cov_2mhdytxhta().s[46]++, Date.now() - redisStartTime);
    /* istanbul ignore next */
    cov_2mhdytxhta().s[47]++;
    health.services.redis = {
      status: 'connected',
      responseTime: `${redisResponseTime}ms`
    };
    /* istanbul ignore next */
    cov_2mhdytxhta().s[48]++;
    health.checks.redis = 'pass';
  } catch (error) {
    /* istanbul ignore next */
    cov_2mhdytxhta().s[49]++;
    health.services.redis = {
      status: 'disconnected',
      error: error.message
    };
    /* istanbul ignore next */
    cov_2mhdytxhta().s[50]++;
    health.checks.redis = 'fail';
    /* istanbul ignore next */
    cov_2mhdytxhta().s[51]++;
    health.status = 'degraded';
  }

  // System health
  const memoryUsage =
  /* istanbul ignore next */
  (cov_2mhdytxhta().s[52]++, process.memoryUsage());
  const memoryUsagePercent =
  /* istanbul ignore next */
  (cov_2mhdytxhta().s[53]++, memoryUsage.heapUsed / memoryUsage.heapTotal * 100);
  /* istanbul ignore next */
  cov_2mhdytxhta().s[54]++;
  health.system = {
    memory: {
      used: `${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB`,
      total: `${Math.round(memoryUsage.heapTotal / 1024 / 1024)}MB`,
      usagePercent: Math.round(memoryUsagePercent)
    },
    uptime: `${Math.round(process.uptime())}s`,
    loadAverage: os.loadavg()
  };

  // Overall response time
  /* istanbul ignore next */
  cov_2mhdytxhta().s[55]++;
  health.responseTime = `${Date.now() - startTime}ms`;

  // Determine status code
  let statusCode =
  /* istanbul ignore next */
  (cov_2mhdytxhta().s[56]++, 200);
  /* istanbul ignore next */
  cov_2mhdytxhta().s[57]++;
  if (health.status === 'error') {
    /* istanbul ignore next */
    cov_2mhdytxhta().b[6][0]++;
    cov_2mhdytxhta().s[58]++;
    statusCode = 503;
  } else {
    /* istanbul ignore next */
    cov_2mhdytxhta().b[6][1]++;
    cov_2mhdytxhta().s[59]++;
    if (health.status === 'degraded') {
      /* istanbul ignore next */
      cov_2mhdytxhta().b[7][0]++;
      cov_2mhdytxhta().s[60]++;
      statusCode = 200; // Still operational but with issues
    } else
    /* istanbul ignore next */
    {
      cov_2mhdytxhta().b[7][1]++;
    }
  }
  /* istanbul ignore next */
  cov_2mhdytxhta().s[61]++;
  res.status(statusCode).json(health);
});

// Readiness probe (for Kubernetes)
/* istanbul ignore next */
cov_2mhdytxhta().s[62]++;
router.get('/ready', async (req, res) => {
  /* istanbul ignore next */
  cov_2mhdytxhta().f[5]++;
  cov_2mhdytxhta().s[63]++;
  try {
    // Check if all critical services are ready
    const dbState =
    /* istanbul ignore next */
    (cov_2mhdytxhta().s[64]++, mongoose.connection.readyState);

    // Check Redis if available
    let redisReady =
    /* istanbul ignore next */
    (cov_2mhdytxhta().s[65]++, true);
    /* istanbul ignore next */
    cov_2mhdytxhta().s[66]++;
    try {
      const redisClient =
      /* istanbul ignore next */
      (cov_2mhdytxhta().s[67]++, getRedisClient());
      /* istanbul ignore next */
      cov_2mhdytxhta().s[68]++;
      await redisClient.ping();
    } catch (redisError) {
      /* istanbul ignore next */
      cov_2mhdytxhta().s[69]++;
      redisReady = false;
      // Redis is not critical for readiness, just log the warning
      /* istanbul ignore next */
      cov_2mhdytxhta().s[70]++;
      console.warn('Redis not ready:', redisError.message);
    }
    /* istanbul ignore next */
    cov_2mhdytxhta().s[71]++;
    if (dbState === 1) {
      /* istanbul ignore next */
      cov_2mhdytxhta().b[8][0]++;
      cov_2mhdytxhta().s[72]++;
      res.status(200).json({
        status: 'ready',
        services: {
          database: 'ready',
          redis: redisReady ?
          /* istanbul ignore next */
          (cov_2mhdytxhta().b[9][0]++, 'ready') :
          /* istanbul ignore next */
          (cov_2mhdytxhta().b[9][1]++, 'not ready')
        }
      });
    } else {
      /* istanbul ignore next */
      cov_2mhdytxhta().b[8][1]++;
      cov_2mhdytxhta().s[73]++;
      res.status(503).json({
        status: 'not ready',
        reason: 'database not connected'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2mhdytxhta().s[74]++;
    res.status(503).json({
      status: 'not ready',
      reason: error.message
    });
  }
});

// Liveness probe (for Kubernetes)
/* istanbul ignore next */
cov_2mhdytxhta().s[75]++;
router.get('/live', (req, res) => {
  /* istanbul ignore next */
  cov_2mhdytxhta().f[6]++;
  cov_2mhdytxhta().s[76]++;
  // Simple check if the process is alive
  res.status(200).json({
    status: 'alive',
    uptime: process.uptime()
  });
});
/* istanbul ignore next */
cov_2mhdytxhta().s[77]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,