{"version":3,"names":["cov_284bkby8y0","actualCoverage","mongoose","s","require","notificationSchema","Schema","user","type","Types","ObjectId","ref","required","booking","destination","title","String","trim","maxlength","message","enum","values","priority","default","isRead","Boolean","readAt","Date","actionUrl","actionText","expiresAt","timestamps","toJSON","virtuals","toObject","index","createdAt","expireAfterSeconds","virtual","get","f","now","created","diffTime","Math","abs","diffMinutes","floor","diffHours","diffDays","b","toLocaleDateString","statics","createNotification","notificationData","notification","save","markAsRead","userId","notificationIds","updateData","length","updateMany","_id","$in","getUnreadCount","countDocuments","cleanupExpired","deleteMany","$lt","Notification","model","module","exports"],"sources":["notification.model.js"],"sourcesContent":["const mongoose = require('mongoose');\n\nconst notificationSchema = new mongoose.Schema(\n  {\n    // User who will receive the notification\n    user: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'User',\n      required: [true, 'Notification must belong to a user']\n    },\n\n    // Related entities (optional)\n    booking: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Booking',\n      required: false\n    },\n\n    destination: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Destination',\n      required: false\n    },\n\n    // Notification content\n    title: {\n      type: String,\n      required: [true, 'Notification title is required'],\n      trim: true,\n      maxlength: [100, 'Title cannot exceed 100 characters']\n    },\n\n    message: {\n      type: String,\n      required: [true, 'Notification message is required'],\n      trim: true,\n      maxlength: [500, 'Message cannot exceed 500 characters']\n    },\n\n    // Notification type\n    type: {\n      type: String,\n      required: [true, 'Notification type is required'],\n      enum: {\n        values: [\n          'booking_confirmed',\n          'booking_cancelled',\n          'booking_reminder',\n          'payment_success',\n          'payment_failed',\n          'review_request',\n          'destination_update',\n          'promotion',\n          'system'\n        ],\n        message: 'Invalid notification type'\n      }\n    },\n\n    // Notification priority\n    priority: {\n      type: String,\n      enum: {\n        values: ['low', 'medium', 'high', 'urgent'],\n        message: 'Priority must be low, medium, high, or urgent'\n      },\n      default: 'medium'\n    },\n\n    // Read status\n    isRead: {\n      type: Boolean,\n      default: false\n    },\n\n    // Read timestamp\n    readAt: {\n      type: Date,\n      required: false\n    },\n\n    // Action URL (optional)\n    actionUrl: {\n      type: String,\n      required: false,\n      maxlength: [200, 'Action URL cannot exceed 200 characters']\n    },\n\n    // Action text (optional)\n    actionText: {\n      type: String,\n      required: false,\n      maxlength: [50, 'Action text cannot exceed 50 characters']\n    },\n\n    // Expiration date (optional)\n    expiresAt: {\n      type: Date,\n      required: false\n    }\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  }\n);\n\n// Index for better query performance\nnotificationSchema.index({ user: 1, createdAt: -1 });\nnotificationSchema.index({ user: 1, isRead: 1 });\nnotificationSchema.index({ type: 1 });\nnotificationSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 }); // TTL index\n\n// Virtual field for notification age\nnotificationSchema.virtual('age').get(function() {\n  const now = new Date();\n  const created = new Date(this.createdAt);\n  const diffTime = Math.abs(now - created);\n  const diffMinutes = Math.floor(diffTime / (1000 * 60));\n  const diffHours = Math.floor(diffTime / (1000 * 60 * 60));\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n\n  if (diffMinutes < 1) {\n    return 'Just now';\n  }\n  if (diffMinutes < 60) {\n    return `${diffMinutes}m ago`;\n  }\n  if (diffHours < 24) {\n    return `${diffHours}h ago`;\n  }\n  if (diffDays < 7) {\n    return `${diffDays}d ago`;\n  }\n  return created.toLocaleDateString();\n});\n\n// Static method to create notification\nnotificationSchema.statics.createNotification = async function(notificationData) {\n  const notification = new this(notificationData);\n  await notification.save();\n  return notification;\n};\n\n// Static method to mark notifications as read\nnotificationSchema.statics.markAsRead = async function(userId, notificationIds) {\n  const updateData = {\n    isRead: true,\n    readAt: new Date()\n  };\n\n  if (notificationIds && notificationIds.length > 0) {\n    return await this.updateMany(\n      { _id: { $in: notificationIds }, user: userId },\n      updateData\n    );\n  } else {\n    return await this.updateMany(\n      { user: userId, isRead: false },\n      updateData\n    );\n  }\n};\n\n// Static method to get unread count\nnotificationSchema.statics.getUnreadCount = async function(userId) {\n  return await this.countDocuments({ user: userId, isRead: false });\n};\n\n// Static method to cleanup expired notifications\nnotificationSchema.statics.cleanupExpired = async function() {\n  return await this.deleteMany({\n    expiresAt: { $lt: new Date() }\n  });\n};\n\nconst Notification = mongoose.model('Notification', notificationSchema);\n\nmodule.exports = Notification;"],"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","ignoreList":[]}