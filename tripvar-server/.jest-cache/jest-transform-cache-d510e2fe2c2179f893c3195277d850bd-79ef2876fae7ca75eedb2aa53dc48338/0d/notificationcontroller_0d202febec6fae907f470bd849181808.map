{"version":3,"names":["Notification","require","ValidationError","NotFoundError","successResponse","info","error","getUserNotifications","req","res","next","userId","user","id","page","limit","type","isRead","priority","query","undefined","skip","parseInt","notifications","find","populate","sort","createdAt","total","countDocuments","unreadCount","getUnreadCount","json","pagination","current","pages","Math","ceil","err","message","markNotificationsAsRead","notificationIds","body","result","markAsRead","modifiedCount","deleteNotifications","length","deleteMany","_id","$in","deletedCount","getNotificationById","notificationId","params","notification","findOne","readAt","Date","save","getNotificationStats","stats","aggregate","$match","$group","$sum","unread","$cond","$eq","byType","$push","byPriority","notificationStats","stat","forEach","item","createNotification","title","actionUrl","actionText","expiresAt","status","getAllNotifications","createSystemNotification","options","module","exports"],"sources":["notification.controller.js"],"sourcesContent":["const Notification = require('../public/models/notification.model');\nconst { ValidationError, NotFoundError } = require('../utils/errors');\nconst { successResponse } = require('../utils/response');\nconst { info, error } = require('../utils/logger');\n\n// Get user's notifications\nconst getUserNotifications = async(req, res, next) => {\n  try {\n    const userId = req.user.id;\n    const { page = 1, limit = 20, type, isRead, priority } = req.query;\n\n    // Build query\n    const query = { user: userId };\n    if (type) {\n      query.type = type;\n    }\n    if (isRead !== undefined) {\n      query.isRead = isRead === 'true';\n    }\n    if (priority) {\n      query.priority = priority;\n    }\n\n    // Calculate pagination\n    const skip = (parseInt(page, 10) - 1) * parseInt(limit, 10);\n\n    // Get notifications with pagination\n    const notifications = await Notification.find(query)\n      .populate('booking', 'bookingReference checkInDate checkOutDate')\n      .populate('destination', 'title location imageUrl')\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(parseInt(limit, 10));\n\n    // Get total count\n    const total = await Notification.countDocuments(query);\n\n    // Get unread count\n    const unreadCount = await Notification.getUnreadCount(userId);\n\n    res.json(\n      successResponse(\n        {\n          notifications,\n          unreadCount,\n          pagination: {\n            current: parseInt(page, 10),\n            pages: Math.ceil(total / parseInt(limit, 10)),\n            total\n          }\n        },\n        'Notifications retrieved successfully'\n      )\n    );\n\n  } catch (err) {\n    error('Error fetching notifications', { error: err.message, userId: req.user?.id });\n    next(err);\n  }\n};\n\n// Mark notifications as read\nconst markNotificationsAsRead = async(req, res, next) => {\n  try {\n    const userId = req.user.id;\n    const { notificationIds } = req.body;\n\n    // If no specific IDs provided, mark all as read\n    const result = await Notification.markAsRead(userId, notificationIds);\n\n    info('Notifications marked as read', {\n      userId,\n      notificationIds,\n      modifiedCount: result.modifiedCount\n    });\n\n    res.json(\n      successResponse(\n        {\n          modifiedCount: result.modifiedCount\n        },\n        'Notifications marked as read successfully'\n      )\n    );\n\n  } catch (err) {\n    error('Error marking notifications as read', { error: err.message, userId: req.user?.id });\n    next(err);\n  }\n};\n\n// Delete notifications\nconst deleteNotifications = async(req, res, next) => {\n  try {\n    const userId = req.user.id;\n    const { notificationIds } = req.body;\n\n    if (!notificationIds || notificationIds.length === 0) {\n      throw new ValidationError('Notification IDs are required');\n    }\n\n    const result = await Notification.deleteMany({\n      _id: { $in: notificationIds },\n      user: userId\n    });\n\n    info('Notifications deleted', {\n      userId,\n      notificationIds,\n      deletedCount: result.deletedCount\n    });\n\n    res.json(\n      successResponse(\n        {\n          deletedCount: result.deletedCount\n        },\n        'Notifications deleted successfully'\n      )\n    );\n\n  } catch (err) {\n    error('Error deleting notifications', { error: err.message, userId: req.user?.id });\n    next(err);\n  }\n};\n\n// Get notification by ID\nconst getNotificationById = async(req, res, next) => {\n  try {\n    const { notificationId } = req.params;\n    const userId = req.user.id;\n\n    const notification = await Notification.findOne({\n      _id: notificationId,\n      user: userId\n    })\n      .populate('booking', 'bookingReference checkInDate checkOutDate totalAmount')\n      .populate('destination', 'title location imageUrl');\n\n    if (!notification) {\n      throw new NotFoundError('Notification not found');\n    }\n\n    // Mark as read if not already read\n    if (!notification.isRead) {\n      notification.isRead = true;\n      notification.readAt = new Date();\n      await notification.save();\n    }\n\n    res.json(\n      successResponse(\n        { notification },\n        'Notification retrieved successfully'\n      )\n    );\n\n  } catch (err) {\n    error('Error fetching notification', { error: err.message, notificationId: req.params.notificationId });\n    next(err);\n  }\n};\n\n// Get notification statistics\nconst getNotificationStats = async(req, res, next) => {\n  try {\n    const userId = req.user.id;\n\n    const stats = await Notification.aggregate([\n      { $match: { user: userId } },\n      {\n        $group: {\n          _id: null,\n          total: { $sum: 1 },\n          unread: {\n            $sum: { $cond: [{ $eq: ['$isRead', false] }, 1, 0] }\n          },\n          byType: {\n            $push: {\n              type: '$type',\n              isRead: '$isRead'\n            }\n          },\n          byPriority: {\n            $push: {\n              priority: '$priority',\n              isRead: '$isRead'\n            }\n          }\n        }\n      }\n    ]);\n\n    let notificationStats = {\n      total: 0,\n      unread: 0,\n      byType: {},\n      byPriority: {}\n    };\n\n    if (stats.length > 0) {\n      const stat = stats[0];\n      notificationStats.total = stat.total;\n      notificationStats.unread = stat.unread;\n\n      // Calculate by type\n      stat.byType.forEach(item => {\n        if (!notificationStats.byType[item.type]) {\n          notificationStats.byType[item.type] = { total: 0, unread: 0 };\n        }\n        notificationStats.byType[item.type].total++;\n        if (!item.isRead) {\n          notificationStats.byType[item.type].unread++;\n        }\n      });\n\n      // Calculate by priority\n      stat.byPriority.forEach(item => {\n        if (!notificationStats.byPriority[item.priority]) {\n          notificationStats.byPriority[item.priority] = { total: 0, unread: 0 };\n        }\n        notificationStats.byPriority[item.priority].total++;\n        if (!item.isRead) {\n          notificationStats.byPriority[item.priority].unread++;\n        }\n      });\n    }\n\n    res.json(\n      successResponse(\n        { notificationStats },\n        'Notification statistics retrieved successfully'\n      )\n    );\n\n  } catch (err) {\n    error('Error fetching notification stats', { error: err.message, userId: req.user?.id });\n    next(err);\n  }\n};\n\n// Create notification (admin only)\nconst createNotification = async(req, res, next) => {\n  try {\n    const {\n      userId,\n      title,\n      message,\n      type,\n      priority = 'medium',\n      actionUrl,\n      actionText,\n      expiresAt\n    } = req.body;\n\n    // Validate required fields\n    if (!userId || !title || !message || !type) {\n      throw new ValidationError('Missing required notification information');\n    }\n\n    const notification = await Notification.createNotification({\n      user: userId,\n      title,\n      message,\n      type,\n      priority,\n      actionUrl,\n      actionText,\n      expiresAt: expiresAt ? new Date(expiresAt) : undefined\n    });\n\n    info('Notification created', {\n      notificationId: notification._id,\n      userId,\n      type,\n      priority\n    });\n\n    res.status(201).json(\n      successResponse(\n        { notification },\n        'Notification created successfully'\n      )\n    );\n\n  } catch (err) {\n    error('Error creating notification', { error: err.message });\n    next(err);\n  }\n};\n\n// Get all notifications (admin only)\nconst getAllNotifications = async(req, res, next) => {\n  try {\n    const { page = 1, limit = 20, userId, type, isRead, priority } = req.query;\n\n    // Build query\n    const query = {};\n    if (userId) {\n      query.user = userId;\n    }\n    if (type) {\n      query.type = type;\n    }\n    if (isRead !== undefined) {\n      query.isRead = isRead === 'true';\n    }\n    if (priority) {\n      query.priority = priority;\n    }\n\n    // Calculate pagination\n    const skip = (parseInt(page, 10) - 1) * parseInt(limit, 10);\n\n    // Get notifications with pagination\n    const notifications = await Notification.find(query)\n      .populate('user', 'name email')\n      .populate('booking', 'bookingReference')\n      .populate('destination', 'title location')\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(parseInt(limit, 10));\n\n    // Get total count\n    const total = await Notification.countDocuments(query);\n\n    res.json(\n      successResponse(\n        {\n          notifications,\n          pagination: {\n            current: parseInt(page, 10),\n            pages: Math.ceil(total / parseInt(limit, 10)),\n            total\n          }\n        },\n        'All notifications retrieved successfully'\n      )\n    );\n\n  } catch (err) {\n    error('Error fetching all notifications', { error: err.message });\n    next(err);\n  }\n};\n\n// Helper function to create system notifications\nconst createSystemNotification = async(userId, type, title, message, options = {}) => {\n  try {\n    const notification = await Notification.createNotification({\n      user: userId,\n      title,\n      message,\n      type,\n      priority: options.priority || 'medium',\n      actionUrl: options.actionUrl,\n      actionText: options.actionText,\n      expiresAt: options.expiresAt ? new Date(options.expiresAt) : undefined\n    });\n\n    info('System notification created', {\n      notificationId: notification._id,\n      userId,\n      type\n    });\n\n    return notification;\n  } catch (err) {\n    error('Error creating system notification', { error: err.message, userId, type });\n    throw err;\n  }\n};\n\nmodule.exports = {\n  getUserNotifications,\n  markNotificationsAsRead,\n  deleteNotifications,\n  getNotificationById,\n  getNotificationStats,\n  createNotification,\n  getAllNotifications,\n  createSystemNotification\n};"],"mappings":"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","ignoreList":[]}