f2266642a8f9f9427b210afb1c02a25a
const Booking = require('../models/booking.model');
const Destination = require('../models/destination.model');
const {
  ValidationError,
  NotFoundError,
  ConflictError
} = require('../utils/errors');
const {
  info,
  error
} = require('../utils/logger');
const NotificationService = require('../services/notification.service');

// Create a new booking
const createBooking = async (req, res, next) => {
  try {
    const {
      destinationId,
      checkInDate,
      checkOutDate,
      numberOfGuests,
      paymentMethod,
      specialRequests,
      contactEmail,
      contactPhone
    } = req.body;
    const userId = req.user.id;

    // Validate required fields
    if (!destinationId || !checkInDate || !checkOutDate || !numberOfGuests) {
      throw new ValidationError('Missing required booking information');
    }

    // Parse dates
    const checkIn = new Date(checkInDate);
    const checkOut = new Date(checkOutDate);

    // Validate dates
    if (checkIn <= new Date()) {
      throw new ValidationError('Check-in date must be in the future');
    }
    if (checkOut <= checkIn) {
      throw new ValidationError('Check-out date must be after check-in date');
    }

    // Get destination details
    const destination = await Destination.findById(destinationId);
    if (!destination) {
      throw new NotFoundError('Destination not found');
    }

    // Check availability
    const isAvailable = await Booking.checkAvailability(destinationId, checkIn, checkOut);
    if (!isAvailable) {
      throw new ConflictError('Destination is not available for the selected dates');
    }

    // Calculate pricing
    const totalNights = Math.ceil((checkOut - checkIn) / (1000 * 3600 * 24));
    const totalAmount = totalNights * destination.price * numberOfGuests;

    // Create booking
    const booking = new Booking({
      user: userId,
      destination: destinationId,
      checkInDate: checkIn,
      checkOutDate: checkOut,
      numberOfGuests,
      pricePerNight: destination.price,
      totalNights,
      totalAmount,
      paymentMethod,
      specialRequests,
      contactEmail: contactEmail || req.user.email,
      contactPhone
    });
    await booking.save();

    // Populate the booking with destination and user details
    await booking.populate([{
      path: 'destination',
      select: 'title location imageUrl'
    }, {
      path: 'user',
      select: 'name email'
    }]);
    info('New booking created', {
      bookingId: booking._id,
      userId,
      destinationId,
      totalAmount
    });

    // Create booking confirmation notification
    try {
      await NotificationService.createBookingConfirmationNotification(userId, booking);
    } catch (notificationError) {
      // Log error but don't fail the booking creation
      error('Failed to create booking confirmation notification', {
        error: notificationError.message,
        bookingId: booking._id,
        userId
      });
    }
    res.status(201).json({
      success: true,
      message: 'Booking created successfully',
      data: {
        booking: booking
      }
    });
  } catch (err) {
    error('Error creating booking', {
      error: err.message,
      userId: req.user?.id
    });
    next(err);
  }
};

// Get user's bookings
const getUserBookings = async (req, res, next) => {
  try {
    const userId = req.user.id;
    const {
      status,
      page = 1,
      limit = 10
    } = req.query;

    // Build query
    const query = {
      user: userId
    };
    if (status) {
      query.status = status;
    }

    // Calculate pagination
    const skip = (parseInt(page, 10) - 1) * parseInt(limit, 10);

    // Get bookings with pagination
    const bookings = await Booking.find(query).populate('destination', 'title location imageUrl rating').sort({
      createdAt: -1
    }).skip(skip).limit(parseInt(limit, 10));

    // Get total count for pagination
    const total = await Booking.countDocuments(query);
    res.json({
      success: true,
      data: {
        bookings,
        pagination: {
          current: parseInt(page, 10),
          pages: Math.ceil(total / parseInt(limit, 10)),
          total
        }
      }
    });
  } catch (err) {
    error('Error fetching user bookings', {
      error: err.message,
      userId: req.user?.id
    });
    next(err);
  }
};

// Get specific booking
const getBookingById = async (req, res, next) => {
  try {
    const {
      id
    } = req.params;
    const userId = req.user.id;
    const booking = await Booking.findById(id).populate('destination', 'title location imageUrl rating description').populate('user', 'name email');
    if (!booking) {
      throw new NotFoundError('Booking not found');
    }

    // Check if user owns this booking or is admin
    if (booking.user._id.toString() !== userId && req.user.role !== 'admin') {
      throw new ValidationError('Access denied');
    }
    res.json({
      success: true,
      data: {
        booking
      }
    });
  } catch (err) {
    error('Error fetching booking', {
      error: err.message,
      bookingId: req.params.id
    });
    next(err);
  }
};

// Cancel booking
const cancelBooking = async (req, res, next) => {
  try {
    const {
      id
    } = req.params;
    const {
      reason
    } = req.body;
    const userId = req.user.id;
    const booking = await Booking.findById(id).populate('destination');
    if (!booking) {
      throw new NotFoundError('Booking not found');
    }

    // Check if user owns this booking
    if (booking.user.toString() !== userId) {
      throw new ValidationError('Access denied');
    }

    // Check if booking can be cancelled
    if (booking.status === 'cancelled') {
      throw new ConflictError('Booking is already cancelled');
    }
    if (booking.status === 'completed') {
      throw new ConflictError('Cannot cancel completed booking');
    }

    // Calculate refund amount
    const refundAmount = booking.calculateRefund();

    // Update booking
    booking.status = 'cancelled';
    booking.cancelledAt = new Date();
    booking.cancellationReason = reason;
    booking.refundAmount = refundAmount;
    if (refundAmount > 0) {
      booking.paymentStatus = 'refunded';
      booking.refundedAt = new Date();
    }
    await booking.save();
    info('Booking cancelled', {
      bookingId: id,
      userId,
      refundAmount
    });

    // Create booking cancellation notification
    try {
      await NotificationService.createBookingCancellationNotification(userId, booking, refundAmount);
    } catch (notificationError) {
      // Log error but don't fail the cancellation
      error('Failed to create booking cancellation notification', {
        error: notificationError.message,
        bookingId: id,
        userId
      });
    }
    res.json({
      success: true,
      message: 'Booking cancelled successfully',
      data: {
        booking,
        refundAmount
      }
    });
  } catch (err) {
    error('Error cancelling booking', {
      error: err.message,
      bookingId: req.params.id
    });
    next(err);
  }
};

// Get all bookings (admin only)
const getAllBookings = async (req, res, next) => {
  try {
    const {
      status,
      page = 1,
      limit = 20,
      destinationId
    } = req.query;

    // Build query
    const query = {};
    if (status) {
      query.status = status;
    }
    if (destinationId) {
      query.destination = destinationId;
    }

    // Calculate pagination
    const skip = (parseInt(page, 10) - 1) * parseInt(limit, 10);

    // Get bookings with pagination
    const bookings = await Booking.find(query).populate('destination', 'title location').populate('user', 'name email').sort({
      createdAt: -1
    }).skip(skip).limit(parseInt(limit, 10));

    // Get total count
    const total = await Booking.countDocuments(query);
    res.json({
      success: true,
      data: {
        bookings,
        pagination: {
          current: parseInt(page, 10),
          pages: Math.ceil(total / parseInt(limit, 10)),
          total
        }
      }
    });
  } catch (err) {
    error('Error fetching all bookings', {
      error: err.message
    });
    next(err);
  }
};

// Update booking status (admin only)
const updateBookingStatus = async (req, res, next) => {
  try {
    const {
      id
    } = req.params;
    const {
      status
    } = req.body;
    const validStatuses = ['confirmed', 'cancelled', 'completed', 'no-show'];
    if (!validStatuses.includes(status)) {
      throw new ValidationError('Invalid booking status');
    }
    const booking = await Booking.findById(id);
    if (!booking) {
      throw new NotFoundError('Booking not found');
    }
    booking.status = status;
    await booking.save();
    info('Booking status updated', {
      bookingId: id,
      newStatus: status,
      adminId: req.user.id
    });
    res.json({
      success: true,
      message: 'Booking status updated successfully',
      data: {
        booking
      }
    });
  } catch (err) {
    error('Error updating booking status', {
      error: err.message,
      bookingId: req.params.id
    });
    next(err);
  }
};

// Check availability for a destination
const checkAvailability = async (req, res, next) => {
  try {
    const {
      destinationId,
      checkInDate,
      checkOutDate
    } = req.query;
    if (!destinationId || !checkInDate || !checkOutDate) {
      throw new ValidationError('Missing required parameters');
    }
    const checkIn = new Date(checkInDate);
    const checkOut = new Date(checkOutDate);
    const isAvailable = await Booking.checkAvailability(destinationId, checkIn, checkOut);
    res.json({
      success: true,
      data: {
        available: isAvailable,
        checkInDate: checkIn,
        checkOutDate: checkOut
      }
    });
  } catch (err) {
    error('Error checking availability', {
      error: err.message
    });
    next(err);
  }
};
module.exports = {
  createBooking,
  getUserBookings,
  getBookingById,
  cancelBooking,
  getAllBookings,
  updateBookingStatus,
  checkAvailability
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29raW5nIiwicmVxdWlyZSIsIkRlc3RpbmF0aW9uIiwiVmFsaWRhdGlvbkVycm9yIiwiTm90Rm91bmRFcnJvciIsIkNvbmZsaWN0RXJyb3IiLCJpbmZvIiwiZXJyb3IiLCJOb3RpZmljYXRpb25TZXJ2aWNlIiwiY3JlYXRlQm9va2luZyIsInJlcSIsInJlcyIsIm5leHQiLCJkZXN0aW5hdGlvbklkIiwiY2hlY2tJbkRhdGUiLCJjaGVja091dERhdGUiLCJudW1iZXJPZkd1ZXN0cyIsInBheW1lbnRNZXRob2QiLCJzcGVjaWFsUmVxdWVzdHMiLCJjb250YWN0RW1haWwiLCJjb250YWN0UGhvbmUiLCJib2R5IiwidXNlcklkIiwidXNlciIsImlkIiwiY2hlY2tJbiIsIkRhdGUiLCJjaGVja091dCIsImRlc3RpbmF0aW9uIiwiZmluZEJ5SWQiLCJpc0F2YWlsYWJsZSIsImNoZWNrQXZhaWxhYmlsaXR5IiwidG90YWxOaWdodHMiLCJNYXRoIiwiY2VpbCIsInRvdGFsQW1vdW50IiwicHJpY2UiLCJib29raW5nIiwicHJpY2VQZXJOaWdodCIsImVtYWlsIiwic2F2ZSIsInBvcHVsYXRlIiwicGF0aCIsInNlbGVjdCIsImJvb2tpbmdJZCIsIl9pZCIsImNyZWF0ZUJvb2tpbmdDb25maXJtYXRpb25Ob3RpZmljYXRpb24iLCJub3RpZmljYXRpb25FcnJvciIsIm1lc3NhZ2UiLCJzdGF0dXMiLCJqc29uIiwic3VjY2VzcyIsImRhdGEiLCJlcnIiLCJnZXRVc2VyQm9va2luZ3MiLCJwYWdlIiwibGltaXQiLCJxdWVyeSIsInNraXAiLCJwYXJzZUludCIsImJvb2tpbmdzIiwiZmluZCIsInNvcnQiLCJjcmVhdGVkQXQiLCJ0b3RhbCIsImNvdW50RG9jdW1lbnRzIiwicGFnaW5hdGlvbiIsImN1cnJlbnQiLCJwYWdlcyIsImdldEJvb2tpbmdCeUlkIiwicGFyYW1zIiwidG9TdHJpbmciLCJyb2xlIiwiY2FuY2VsQm9va2luZyIsInJlYXNvbiIsInJlZnVuZEFtb3VudCIsImNhbGN1bGF0ZVJlZnVuZCIsImNhbmNlbGxlZEF0IiwiY2FuY2VsbGF0aW9uUmVhc29uIiwicGF5bWVudFN0YXR1cyIsInJlZnVuZGVkQXQiLCJjcmVhdGVCb29raW5nQ2FuY2VsbGF0aW9uTm90aWZpY2F0aW9uIiwiZ2V0QWxsQm9va2luZ3MiLCJ1cGRhdGVCb29raW5nU3RhdHVzIiwidmFsaWRTdGF0dXNlcyIsImluY2x1ZGVzIiwibmV3U3RhdHVzIiwiYWRtaW5JZCIsImF2YWlsYWJsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJib29raW5nLmNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQm9va2luZyA9IHJlcXVpcmUoJy4uL21vZGVscy9ib29raW5nLm1vZGVsJyk7XG5jb25zdCBEZXN0aW5hdGlvbiA9IHJlcXVpcmUoJy4uL21vZGVscy9kZXN0aW5hdGlvbi5tb2RlbCcpO1xuY29uc3QgeyBWYWxpZGF0aW9uRXJyb3IsIE5vdEZvdW5kRXJyb3IsIENvbmZsaWN0RXJyb3IgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2Vycm9ycycpO1xuY29uc3QgeyBpbmZvLCBlcnJvciB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvbG9nZ2VyJyk7XG5jb25zdCBOb3RpZmljYXRpb25TZXJ2aWNlID0gcmVxdWlyZSgnLi4vc2VydmljZXMvbm90aWZpY2F0aW9uLnNlcnZpY2UnKTtcblxuLy8gQ3JlYXRlIGEgbmV3IGJvb2tpbmdcbmNvbnN0IGNyZWF0ZUJvb2tpbmcgPSBhc3luYyhyZXEsIHJlcywgbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHtcbiAgICAgIGRlc3RpbmF0aW9uSWQsXG4gICAgICBjaGVja0luRGF0ZSxcbiAgICAgIGNoZWNrT3V0RGF0ZSxcbiAgICAgIG51bWJlck9mR3Vlc3RzLFxuICAgICAgcGF5bWVudE1ldGhvZCxcbiAgICAgIHNwZWNpYWxSZXF1ZXN0cyxcbiAgICAgIGNvbnRhY3RFbWFpbCxcbiAgICAgIGNvbnRhY3RQaG9uZVxuICAgIH0gPSByZXEuYm9keTtcblxuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyLmlkO1xuXG4gICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXG4gICAgaWYgKCFkZXN0aW5hdGlvbklkIHx8ICFjaGVja0luRGF0ZSB8fCAhY2hlY2tPdXREYXRlIHx8ICFudW1iZXJPZkd1ZXN0cykge1xuICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignTWlzc2luZyByZXF1aXJlZCBib29raW5nIGluZm9ybWF0aW9uJyk7XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgZGF0ZXNcbiAgICBjb25zdCBjaGVja0luID0gbmV3IERhdGUoY2hlY2tJbkRhdGUpO1xuICAgIGNvbnN0IGNoZWNrT3V0ID0gbmV3IERhdGUoY2hlY2tPdXREYXRlKTtcblxuICAgIC8vIFZhbGlkYXRlIGRhdGVzXG4gICAgaWYgKGNoZWNrSW4gPD0gbmV3IERhdGUoKSkge1xuICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignQ2hlY2staW4gZGF0ZSBtdXN0IGJlIGluIHRoZSBmdXR1cmUnKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tPdXQgPD0gY2hlY2tJbikge1xuICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignQ2hlY2stb3V0IGRhdGUgbXVzdCBiZSBhZnRlciBjaGVjay1pbiBkYXRlJyk7XG4gICAgfVxuXG4gICAgLy8gR2V0IGRlc3RpbmF0aW9uIGRldGFpbHNcbiAgICBjb25zdCBkZXN0aW5hdGlvbiA9IGF3YWl0IERlc3RpbmF0aW9uLmZpbmRCeUlkKGRlc3RpbmF0aW9uSWQpO1xuICAgIGlmICghZGVzdGluYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBOb3RGb3VuZEVycm9yKCdEZXN0aW5hdGlvbiBub3QgZm91bmQnKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBhdmFpbGFiaWxpdHlcbiAgICBjb25zdCBpc0F2YWlsYWJsZSA9IGF3YWl0IEJvb2tpbmcuY2hlY2tBdmFpbGFiaWxpdHkoZGVzdGluYXRpb25JZCwgY2hlY2tJbiwgY2hlY2tPdXQpO1xuICAgIGlmICghaXNBdmFpbGFibGUpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdEVycm9yKCdEZXN0aW5hdGlvbiBpcyBub3QgYXZhaWxhYmxlIGZvciB0aGUgc2VsZWN0ZWQgZGF0ZXMnKTtcbiAgICB9XG5cbiAgICAvLyBDYWxjdWxhdGUgcHJpY2luZ1xuICAgIGNvbnN0IHRvdGFsTmlnaHRzID0gTWF0aC5jZWlsKChjaGVja091dCAtIGNoZWNrSW4pIC8gKDEwMDAgKiAzNjAwICogMjQpKTtcbiAgICBjb25zdCB0b3RhbEFtb3VudCA9IHRvdGFsTmlnaHRzICogZGVzdGluYXRpb24ucHJpY2UgKiBudW1iZXJPZkd1ZXN0cztcblxuICAgIC8vIENyZWF0ZSBib29raW5nXG4gICAgY29uc3QgYm9va2luZyA9IG5ldyBCb29raW5nKHtcbiAgICAgIHVzZXI6IHVzZXJJZCxcbiAgICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbklkLFxuICAgICAgY2hlY2tJbkRhdGU6IGNoZWNrSW4sXG4gICAgICBjaGVja091dERhdGU6IGNoZWNrT3V0LFxuICAgICAgbnVtYmVyT2ZHdWVzdHMsXG4gICAgICBwcmljZVBlck5pZ2h0OiBkZXN0aW5hdGlvbi5wcmljZSxcbiAgICAgIHRvdGFsTmlnaHRzLFxuICAgICAgdG90YWxBbW91bnQsXG4gICAgICBwYXltZW50TWV0aG9kLFxuICAgICAgc3BlY2lhbFJlcXVlc3RzLFxuICAgICAgY29udGFjdEVtYWlsOiBjb250YWN0RW1haWwgfHwgcmVxLnVzZXIuZW1haWwsXG4gICAgICBjb250YWN0UGhvbmVcbiAgICB9KTtcblxuICAgIGF3YWl0IGJvb2tpbmcuc2F2ZSgpO1xuXG4gICAgLy8gUG9wdWxhdGUgdGhlIGJvb2tpbmcgd2l0aCBkZXN0aW5hdGlvbiBhbmQgdXNlciBkZXRhaWxzXG4gICAgYXdhaXQgYm9va2luZy5wb3B1bGF0ZShbXG4gICAgICB7IHBhdGg6ICdkZXN0aW5hdGlvbicsIHNlbGVjdDogJ3RpdGxlIGxvY2F0aW9uIGltYWdlVXJsJyB9LFxuICAgICAgeyBwYXRoOiAndXNlcicsIHNlbGVjdDogJ25hbWUgZW1haWwnIH1cbiAgICBdKTtcblxuICAgIGluZm8oJ05ldyBib29raW5nIGNyZWF0ZWQnLCB7XG4gICAgICBib29raW5nSWQ6IGJvb2tpbmcuX2lkLFxuICAgICAgdXNlcklkLFxuICAgICAgZGVzdGluYXRpb25JZCxcbiAgICAgIHRvdGFsQW1vdW50XG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgYm9va2luZyBjb25maXJtYXRpb24gbm90aWZpY2F0aW9uXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IE5vdGlmaWNhdGlvblNlcnZpY2UuY3JlYXRlQm9va2luZ0NvbmZpcm1hdGlvbk5vdGlmaWNhdGlvbih1c2VySWQsIGJvb2tpbmcpO1xuICAgIH0gY2F0Y2ggKG5vdGlmaWNhdGlvbkVycm9yKSB7XG4gICAgICAvLyBMb2cgZXJyb3IgYnV0IGRvbid0IGZhaWwgdGhlIGJvb2tpbmcgY3JlYXRpb25cbiAgICAgIGVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIGJvb2tpbmcgY29uZmlybWF0aW9uIG5vdGlmaWNhdGlvbicsIHtcbiAgICAgICAgZXJyb3I6IG5vdGlmaWNhdGlvbkVycm9yLm1lc3NhZ2UsXG4gICAgICAgIGJvb2tpbmdJZDogYm9va2luZy5faWQsXG4gICAgICAgIHVzZXJJZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVzLnN0YXR1cygyMDEpLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6ICdCb29raW5nIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgYm9va2luZzogYm9va2luZ1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yKCdFcnJvciBjcmVhdGluZyBib29raW5nJywgeyBlcnJvcjogZXJyLm1lc3NhZ2UsIHVzZXJJZDogcmVxLnVzZXI/LmlkIH0pO1xuICAgIG5leHQoZXJyKTtcbiAgfVxufTtcblxuLy8gR2V0IHVzZXIncyBib29raW5nc1xuY29uc3QgZ2V0VXNlckJvb2tpbmdzID0gYXN5bmMocmVxLCByZXMsIG5leHQpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlci5pZDtcbiAgICBjb25zdCB7IHN0YXR1cywgcGFnZSA9IDEsIGxpbWl0ID0gMTAgfSA9IHJlcS5xdWVyeTtcblxuICAgIC8vIEJ1aWxkIHF1ZXJ5XG4gICAgY29uc3QgcXVlcnkgPSB7IHVzZXI6IHVzZXJJZCB9O1xuICAgIGlmIChzdGF0dXMpIHtcbiAgICAgIHF1ZXJ5LnN0YXR1cyA9IHN0YXR1cztcbiAgICB9XG5cbiAgICAvLyBDYWxjdWxhdGUgcGFnaW5hdGlvblxuICAgIGNvbnN0IHNraXAgPSAocGFyc2VJbnQocGFnZSwgMTApIC0gMSkgKiBwYXJzZUludChsaW1pdCwgMTApO1xuXG4gICAgLy8gR2V0IGJvb2tpbmdzIHdpdGggcGFnaW5hdGlvblxuICAgIGNvbnN0IGJvb2tpbmdzID0gYXdhaXQgQm9va2luZy5maW5kKHF1ZXJ5KVxuICAgICAgLnBvcHVsYXRlKCdkZXN0aW5hdGlvbicsICd0aXRsZSBsb2NhdGlvbiBpbWFnZVVybCByYXRpbmcnKVxuICAgICAgLnNvcnQoeyBjcmVhdGVkQXQ6IC0xIH0pXG4gICAgICAuc2tpcChza2lwKVxuICAgICAgLmxpbWl0KHBhcnNlSW50KGxpbWl0LCAxMCkpO1xuXG4gICAgLy8gR2V0IHRvdGFsIGNvdW50IGZvciBwYWdpbmF0aW9uXG4gICAgY29uc3QgdG90YWwgPSBhd2FpdCBCb29raW5nLmNvdW50RG9jdW1lbnRzKHF1ZXJ5KTtcblxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGJvb2tpbmdzLFxuICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgY3VycmVudDogcGFyc2VJbnQocGFnZSwgMTApLFxuICAgICAgICAgIHBhZ2VzOiBNYXRoLmNlaWwodG90YWwgLyBwYXJzZUludChsaW1pdCwgMTApKSxcbiAgICAgICAgICB0b3RhbFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHVzZXIgYm9va2luZ3MnLCB7IGVycm9yOiBlcnIubWVzc2FnZSwgdXNlcklkOiByZXEudXNlcj8uaWQgfSk7XG4gICAgbmV4dChlcnIpO1xuICB9XG59O1xuXG4vLyBHZXQgc3BlY2lmaWMgYm9va2luZ1xuY29uc3QgZ2V0Qm9va2luZ0J5SWQgPSBhc3luYyhyZXEsIHJlcywgbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXIuaWQ7XG5cbiAgICBjb25zdCBib29raW5nID0gYXdhaXQgQm9va2luZy5maW5kQnlJZChpZClcbiAgICAgIC5wb3B1bGF0ZSgnZGVzdGluYXRpb24nLCAndGl0bGUgbG9jYXRpb24gaW1hZ2VVcmwgcmF0aW5nIGRlc2NyaXB0aW9uJylcbiAgICAgIC5wb3B1bGF0ZSgndXNlcicsICduYW1lIGVtYWlsJyk7XG5cbiAgICBpZiAoIWJvb2tpbmcpIHtcbiAgICAgIHRocm93IG5ldyBOb3RGb3VuZEVycm9yKCdCb29raW5nIG5vdCBmb3VuZCcpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHVzZXIgb3ducyB0aGlzIGJvb2tpbmcgb3IgaXMgYWRtaW5cbiAgICBpZiAoYm9va2luZy51c2VyLl9pZC50b1N0cmluZygpICE9PSB1c2VySWQgJiYgcmVxLnVzZXIucm9sZSAhPT0gJ2FkbWluJykge1xuICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignQWNjZXNzIGRlbmllZCcpO1xuICAgIH1cblxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGJvb2tpbmdcbiAgICAgIH1cbiAgICB9KTtcblxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvcignRXJyb3IgZmV0Y2hpbmcgYm9va2luZycsIHsgZXJyb3I6IGVyci5tZXNzYWdlLCBib29raW5nSWQ6IHJlcS5wYXJhbXMuaWQgfSk7XG4gICAgbmV4dChlcnIpO1xuICB9XG59O1xuXG4vLyBDYW5jZWwgYm9va2luZ1xuY29uc3QgY2FuY2VsQm9va2luZyA9IGFzeW5jKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcbiAgICBjb25zdCB7IHJlYXNvbiB9ID0gcmVxLmJvZHk7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXIuaWQ7XG5cbiAgICBjb25zdCBib29raW5nID0gYXdhaXQgQm9va2luZy5maW5kQnlJZChpZCkucG9wdWxhdGUoJ2Rlc3RpbmF0aW9uJyk7XG5cbiAgICBpZiAoIWJvb2tpbmcpIHtcbiAgICAgIHRocm93IG5ldyBOb3RGb3VuZEVycm9yKCdCb29raW5nIG5vdCBmb3VuZCcpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHVzZXIgb3ducyB0aGlzIGJvb2tpbmdcbiAgICBpZiAoYm9va2luZy51c2VyLnRvU3RyaW5nKCkgIT09IHVzZXJJZCkge1xuICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignQWNjZXNzIGRlbmllZCcpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIGJvb2tpbmcgY2FuIGJlIGNhbmNlbGxlZFxuICAgIGlmIChib29raW5nLnN0YXR1cyA9PT0gJ2NhbmNlbGxlZCcpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdEVycm9yKCdCb29raW5nIGlzIGFscmVhZHkgY2FuY2VsbGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKGJvb2tpbmcuc3RhdHVzID09PSAnY29tcGxldGVkJykge1xuICAgICAgdGhyb3cgbmV3IENvbmZsaWN0RXJyb3IoJ0Nhbm5vdCBjYW5jZWwgY29tcGxldGVkIGJvb2tpbmcnKTtcbiAgICB9XG5cbiAgICAvLyBDYWxjdWxhdGUgcmVmdW5kIGFtb3VudFxuICAgIGNvbnN0IHJlZnVuZEFtb3VudCA9IGJvb2tpbmcuY2FsY3VsYXRlUmVmdW5kKCk7XG5cbiAgICAvLyBVcGRhdGUgYm9va2luZ1xuICAgIGJvb2tpbmcuc3RhdHVzID0gJ2NhbmNlbGxlZCc7XG4gICAgYm9va2luZy5jYW5jZWxsZWRBdCA9IG5ldyBEYXRlKCk7XG4gICAgYm9va2luZy5jYW5jZWxsYXRpb25SZWFzb24gPSByZWFzb247XG4gICAgYm9va2luZy5yZWZ1bmRBbW91bnQgPSByZWZ1bmRBbW91bnQ7XG5cbiAgICBpZiAocmVmdW5kQW1vdW50ID4gMCkge1xuICAgICAgYm9va2luZy5wYXltZW50U3RhdHVzID0gJ3JlZnVuZGVkJztcbiAgICAgIGJvb2tpbmcucmVmdW5kZWRBdCA9IG5ldyBEYXRlKCk7XG4gICAgfVxuXG4gICAgYXdhaXQgYm9va2luZy5zYXZlKCk7XG5cbiAgICBpbmZvKCdCb29raW5nIGNhbmNlbGxlZCcsIHtcbiAgICAgIGJvb2tpbmdJZDogaWQsXG4gICAgICB1c2VySWQsXG4gICAgICByZWZ1bmRBbW91bnRcbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSBib29raW5nIGNhbmNlbGxhdGlvbiBub3RpZmljYXRpb25cbiAgICB0cnkge1xuICAgICAgYXdhaXQgTm90aWZpY2F0aW9uU2VydmljZS5jcmVhdGVCb29raW5nQ2FuY2VsbGF0aW9uTm90aWZpY2F0aW9uKHVzZXJJZCwgYm9va2luZywgcmVmdW5kQW1vdW50KTtcbiAgICB9IGNhdGNoIChub3RpZmljYXRpb25FcnJvcikge1xuICAgICAgLy8gTG9nIGVycm9yIGJ1dCBkb24ndCBmYWlsIHRoZSBjYW5jZWxsYXRpb25cbiAgICAgIGVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIGJvb2tpbmcgY2FuY2VsbGF0aW9uIG5vdGlmaWNhdGlvbicsIHtcbiAgICAgICAgZXJyb3I6IG5vdGlmaWNhdGlvbkVycm9yLm1lc3NhZ2UsXG4gICAgICAgIGJvb2tpbmdJZDogaWQsXG4gICAgICAgIHVzZXJJZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6ICdCb29raW5nIGNhbmNlbGxlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgZGF0YToge1xuICAgICAgICBib29raW5nLFxuICAgICAgICByZWZ1bmRBbW91bnRcbiAgICAgIH1cbiAgICB9KTtcblxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvcignRXJyb3IgY2FuY2VsbGluZyBib29raW5nJywgeyBlcnJvcjogZXJyLm1lc3NhZ2UsIGJvb2tpbmdJZDogcmVxLnBhcmFtcy5pZCB9KTtcbiAgICBuZXh0KGVycik7XG4gIH1cbn07XG5cbi8vIEdldCBhbGwgYm9va2luZ3MgKGFkbWluIG9ubHkpXG5jb25zdCBnZXRBbGxCb29raW5ncyA9IGFzeW5jKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBzdGF0dXMsIHBhZ2UgPSAxLCBsaW1pdCA9IDIwLCBkZXN0aW5hdGlvbklkIH0gPSByZXEucXVlcnk7XG5cbiAgICAvLyBCdWlsZCBxdWVyeVxuICAgIGNvbnN0IHF1ZXJ5ID0ge307XG4gICAgaWYgKHN0YXR1cykge1xuICAgICAgcXVlcnkuc3RhdHVzID0gc3RhdHVzO1xuICAgIH1cbiAgICBpZiAoZGVzdGluYXRpb25JZCkge1xuICAgICAgcXVlcnkuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbklkO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0ZSBwYWdpbmF0aW9uXG4gICAgY29uc3Qgc2tpcCA9IChwYXJzZUludChwYWdlLCAxMCkgLSAxKSAqIHBhcnNlSW50KGxpbWl0LCAxMCk7XG5cbiAgICAvLyBHZXQgYm9va2luZ3Mgd2l0aCBwYWdpbmF0aW9uXG4gICAgY29uc3QgYm9va2luZ3MgPSBhd2FpdCBCb29raW5nLmZpbmQocXVlcnkpXG4gICAgICAucG9wdWxhdGUoJ2Rlc3RpbmF0aW9uJywgJ3RpdGxlIGxvY2F0aW9uJylcbiAgICAgIC5wb3B1bGF0ZSgndXNlcicsICduYW1lIGVtYWlsJylcbiAgICAgIC5zb3J0KHsgY3JlYXRlZEF0OiAtMSB9KVxuICAgICAgLnNraXAoc2tpcClcbiAgICAgIC5saW1pdChwYXJzZUludChsaW1pdCwgMTApKTtcblxuICAgIC8vIEdldCB0b3RhbCBjb3VudFxuICAgIGNvbnN0IHRvdGFsID0gYXdhaXQgQm9va2luZy5jb3VudERvY3VtZW50cyhxdWVyeSk7XG5cbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YToge1xuICAgICAgICBib29raW5ncyxcbiAgICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICAgIGN1cnJlbnQ6IHBhcnNlSW50KHBhZ2UsIDEwKSxcbiAgICAgICAgICBwYWdlczogTWF0aC5jZWlsKHRvdGFsIC8gcGFyc2VJbnQobGltaXQsIDEwKSksXG4gICAgICAgICAgdG90YWxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yKCdFcnJvciBmZXRjaGluZyBhbGwgYm9va2luZ3MnLCB7IGVycm9yOiBlcnIubWVzc2FnZSB9KTtcbiAgICBuZXh0KGVycik7XG4gIH1cbn07XG5cbi8vIFVwZGF0ZSBib29raW5nIHN0YXR1cyAoYWRtaW4gb25seSlcbmNvbnN0IHVwZGF0ZUJvb2tpbmdTdGF0dXMgPSBhc3luYyhyZXEsIHJlcywgbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgY29uc3QgeyBzdGF0dXMgfSA9IHJlcS5ib2R5O1xuXG4gICAgY29uc3QgdmFsaWRTdGF0dXNlcyA9IFsnY29uZmlybWVkJywgJ2NhbmNlbGxlZCcsICdjb21wbGV0ZWQnLCAnbm8tc2hvdyddO1xuICAgIGlmICghdmFsaWRTdGF0dXNlcy5pbmNsdWRlcyhzdGF0dXMpKSB7XG4gICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdJbnZhbGlkIGJvb2tpbmcgc3RhdHVzJyk7XG4gICAgfVxuXG4gICAgY29uc3QgYm9va2luZyA9IGF3YWl0IEJvb2tpbmcuZmluZEJ5SWQoaWQpO1xuICAgIGlmICghYm9va2luZykge1xuICAgICAgdGhyb3cgbmV3IE5vdEZvdW5kRXJyb3IoJ0Jvb2tpbmcgbm90IGZvdW5kJyk7XG4gICAgfVxuXG4gICAgYm9va2luZy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgYXdhaXQgYm9va2luZy5zYXZlKCk7XG5cbiAgICBpbmZvKCdCb29raW5nIHN0YXR1cyB1cGRhdGVkJywge1xuICAgICAgYm9va2luZ0lkOiBpZCxcbiAgICAgIG5ld1N0YXR1czogc3RhdHVzLFxuICAgICAgYWRtaW5JZDogcmVxLnVzZXIuaWRcbiAgICB9KTtcblxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBtZXNzYWdlOiAnQm9va2luZyBzdGF0dXMgdXBkYXRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgZGF0YToge1xuICAgICAgICBib29raW5nXG4gICAgICB9XG4gICAgfSk7XG5cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIGJvb2tpbmcgc3RhdHVzJywgeyBlcnJvcjogZXJyLm1lc3NhZ2UsIGJvb2tpbmdJZDogcmVxLnBhcmFtcy5pZCB9KTtcbiAgICBuZXh0KGVycik7XG4gIH1cbn07XG5cbi8vIENoZWNrIGF2YWlsYWJpbGl0eSBmb3IgYSBkZXN0aW5hdGlvblxuY29uc3QgY2hlY2tBdmFpbGFiaWxpdHkgPSBhc3luYyhyZXEsIHJlcywgbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgZGVzdGluYXRpb25JZCwgY2hlY2tJbkRhdGUsIGNoZWNrT3V0RGF0ZSB9ID0gcmVxLnF1ZXJ5O1xuXG4gICAgaWYgKCFkZXN0aW5hdGlvbklkIHx8ICFjaGVja0luRGF0ZSB8fCAhY2hlY2tPdXREYXRlKSB7XG4gICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcnMnKTtcbiAgICB9XG5cbiAgICBjb25zdCBjaGVja0luID0gbmV3IERhdGUoY2hlY2tJbkRhdGUpO1xuICAgIGNvbnN0IGNoZWNrT3V0ID0gbmV3IERhdGUoY2hlY2tPdXREYXRlKTtcblxuICAgIGNvbnN0IGlzQXZhaWxhYmxlID0gYXdhaXQgQm9va2luZy5jaGVja0F2YWlsYWJpbGl0eShkZXN0aW5hdGlvbklkLCBjaGVja0luLCBjaGVja091dCk7XG5cbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YToge1xuICAgICAgICBhdmFpbGFibGU6IGlzQXZhaWxhYmxlLFxuICAgICAgICBjaGVja0luRGF0ZTogY2hlY2tJbixcbiAgICAgICAgY2hlY2tPdXREYXRlOiBjaGVja091dFxuICAgICAgfVxuICAgIH0pO1xuXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yKCdFcnJvciBjaGVja2luZyBhdmFpbGFiaWxpdHknLCB7IGVycm9yOiBlcnIubWVzc2FnZSB9KTtcbiAgICBuZXh0KGVycik7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVCb29raW5nLFxuICBnZXRVc2VyQm9va2luZ3MsXG4gIGdldEJvb2tpbmdCeUlkLFxuICBjYW5jZWxCb29raW5nLFxuICBnZXRBbGxCb29raW5ncyxcbiAgdXBkYXRlQm9va2luZ1N0YXR1cyxcbiAgY2hlY2tBdmFpbGFiaWxpdHlcbn07Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztBQUNsRCxNQUFNQyxXQUFXLEdBQUdELE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQztBQUMxRCxNQUFNO0VBQUVFLGVBQWU7RUFBRUMsYUFBYTtFQUFFQztBQUFjLENBQUMsR0FBR0osT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQ3BGLE1BQU07RUFBRUssSUFB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