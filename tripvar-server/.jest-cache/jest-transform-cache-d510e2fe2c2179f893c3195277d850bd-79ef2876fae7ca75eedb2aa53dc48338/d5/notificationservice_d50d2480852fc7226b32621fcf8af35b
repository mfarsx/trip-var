57e7d4a131597163f31bd89b796bac34
/* istanbul ignore next */
function cov_2lakdhu9ep() {
  var path = "/Users/mfarsx/dev/tripvar/tripvar-server/src/services/notification.service.js";
  var hash = "574ec559aa6ad984cd66b57a7d82732464ead813";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/mfarsx/dev/tripvar/tripvar-server/src/services/notification.service.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 21
        },
        end: {
          line: 1,
          column: 67
        }
      },
      "1": {
        start: {
          line: 2,
          column: 37
        },
        end: {
          line: 2,
          column: 86
        }
      },
      "2": {
        start: {
          line: 3,
          column: 24
        },
        end: {
          line: 3,
          column: 50
        }
      },
      "3": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "4": {
        start: {
          line: 14,
          column: 27
        },
        end: {
          line: 26,
          column: 7
        }
      },
      "5": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "6": {
        start: {
          line: 34,
          column: 6
        },
        end: {
          line: 34,
          column: 26
        }
      },
      "7": {
        start: {
          line: 36,
          column: 6
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "8": {
        start: {
          line: 41,
          column: 6
        },
        end: {
          line: 41,
          column: 16
        }
      },
      "9": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "10": {
        start: {
          line: 54,
          column: 27
        },
        end: {
          line: 66,
          column: 7
        }
      },
      "11": {
        start: {
          line: 68,
          column: 6
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "12": {
        start: {
          line: 75,
          column: 6
        },
        end: {
          line: 75,
          column: 26
        }
      },
      "13": {
        start: {
          line: 77,
          column: 6
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "14": {
        start: {
          line: 82,
          column: 6
        },
        end: {
          line: 82,
          column: 16
        }
      },
      "15": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 128,
          column: 5
        }
      },
      "16": {
        start: {
          line: 95,
          column: 28
        },
        end: {
          line: 97,
          column: 57
        }
      },
      "17": {
        start: {
          line: 99,
          column: 27
        },
        end: {
          line: 111,
          column: 7
        }
      },
      "18": {
        start: {
          line: 113,
          column: 6
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "19": {
        start: {
          line: 120,
          column: 6
        },
        end: {
          line: 120,
          column: 26
        }
      },
      "20": {
        start: {
          line: 122,
          column: 6
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "21": {
        start: {
          line: 127,
          column: 6
        },
        end: {
          line: 127,
          column: 16
        }
      },
      "22": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 168,
          column: 5
        }
      },
      "23": {
        start: {
          line: 139,
          column: 27
        },
        end: {
          line: 152,
          column: 7
        }
      },
      "24": {
        start: {
          line: 154,
          column: 6
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "25": {
        start: {
          line: 160,
          column: 6
        },
        end: {
          line: 160,
          column: 26
        }
      },
      "26": {
        start: {
          line: 162,
          column: 6
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "27": {
        start: {
          line: 167,
          column: 6
        },
        end: {
          line: 167,
          column: 16
        }
      },
      "28": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 210,
          column: 5
        }
      },
      "29": {
        start: {
          line: 180,
          column: 28
        },
        end: {
          line: 195,
          column: 7
        }
      },
      "30": {
        start: {
          line: 182,
          column: 10
        },
        end: {
          line: 193,
          column: 12
        }
      },
      "31": {
        start: {
          line: 197,
          column: 6
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "32": {
        start: {
          line: 203,
          column: 6
        },
        end: {
          line: 203,
          column: 27
        }
      },
      "33": {
        start: {
          line: 205,
          column: 6
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "34": {
        start: {
          line: 209,
          column: 6
        },
        end: {
          line: 209,
          column: 16
        }
      },
      "35": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 250,
          column: 5
        }
      },
      "36": {
        start: {
          line: 221,
          column: 28
        },
        end: {
          line: 236,
          column: 7
        }
      },
      "37": {
        start: {
          line: 223,
          column: 10
        },
        end: {
          line: 234,
          column: 12
        }
      },
      "38": {
        start: {
          line: 238,
          column: 6
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "39": {
        start: {
          line: 243,
          column: 6
        },
        end: {
          line: 243,
          column: 27
        }
      },
      "40": {
        start: {
          line: 245,
          column: 6
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "41": {
        start: {
          line: 249,
          column: 6
        },
        end: {
          line: 249,
          column: 16
        }
      },
      "42": {
        start: {
          line: 262,
          column: 4
        },
        end: {
          line: 292,
          column: 5
        }
      },
      "43": {
        start: {
          line: 263,
          column: 28
        },
        end: {
          line: 278,
          column: 7
        }
      },
      "44": {
        start: {
          line: 265,
          column: 10
        },
        end: {
          line: 276,
          column: 12
        }
      },
      "45": {
        start: {
          line: 280,
          column: 6
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "46": {
        start: {
          line: 285,
          column: 6
        },
        end: {
          line: 285,
          column: 27
        }
      },
      "47": {
        start: {
          line: 287,
          column: 6
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "48": {
        start: {
          line: 291,
          column: 6
        },
        end: {
          line: 291,
          column: 16
        }
      },
      "49": {
        start: {
          line: 300,
          column: 4
        },
        end: {
          line: 313,
          column: 5
        }
      },
      "50": {
        start: {
          line: 301,
          column: 21
        },
        end: {
          line: 301,
          column: 56
        }
      },
      "51": {
        start: {
          line: 303,
          column: 6
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "52": {
        start: {
          line: 307,
          column: 6
        },
        end: {
          line: 307,
          column: 33
        }
      },
      "53": {
        start: {
          line: 309,
          column: 6
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "54": {
        start: {
          line: 312,
          column: 6
        },
        end: {
          line: 312,
          column: 16
        }
      },
      "55": {
        start: {
          line: 322,
          column: 4
        },
        end: {
          line: 390,
          column: 5
        }
      },
      "56": {
        start: {
          line: 323,
          column: 20
        },
        end: {
          line: 346,
          column: 8
        }
      },
      "57": {
        start: {
          line: 348,
          column: 30
        },
        end: {
          line: 353,
          column: 7
        }
      },
      "58": {
        start: {
          line: 355,
          column: 6
        },
        end: {
          line: 381,
          column: 7
        }
      },
      "59": {
        start: {
          line: 356,
          column: 21
        },
        end: {
          line: 356,
          column: 29
        }
      },
      "60": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 357,
          column: 45
        }
      },
      "61": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 358,
          column: 47
        }
      },
      "62": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 369,
          column: 11
        }
      },
      "63": {
        start: {
          line: 362,
          column: 10
        },
        end: {
          line: 364,
          column: 11
        }
      },
      "64": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 74
        }
      },
      "65": {
        start: {
          line: 365,
          column: 10
        },
        end: {
          line: 365,
          column: 54
        }
      },
      "66": {
        start: {
          line: 366,
          column: 10
        },
        end: {
          line: 368,
          column: 11
        }
      },
      "67": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 57
        }
      },
      "68": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 380,
          column: 11
        }
      },
      "69": {
        start: {
          line: 373,
          column: 10
        },
        end: {
          line: 375,
          column: 11
        }
      },
      "70": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 82
        }
      },
      "71": {
        start: {
          line: 376,
          column: 10
        },
        end: {
          line: 376,
          column: 62
        }
      },
      "72": {
        start: {
          line: 377,
          column: 10
        },
        end: {
          line: 379,
          column: 11
        }
      },
      "73": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 65
        }
      },
      "74": {
        start: {
          line: 383,
          column: 6
        },
        end: {
          line: 383,
          column: 31
        }
      },
      "75": {
        start: {
          line: 385,
          column: 6
        },
        end: {
          line: 388,
          column: 9
        }
      },
      "76": {
        start: {
          line: 389,
          column: 6
        },
        end: {
          line: 389,
          column: 16
        }
      },
      "77": {
        start: {
          line: 394,
          column: 0
        },
        end: {
          line: 394,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 12,
            column: 3
          }
        },
        loc: {
          start: {
            line: 12,
            column: 70
          },
          end: {
            line: 43,
            column: 3
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 52,
            column: 2
          },
          end: {
            line: 52,
            column: 3
          }
        },
        loc: {
          start: {
            line: 52,
            column: 84
          },
          end: {
            line: 84,
            column: 3
          }
        },
        line: 52
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 93,
            column: 2
          },
          end: {
            line: 93,
            column: 3
          }
        },
        loc: {
          start: {
            line: 93,
            column: 84
          },
          end: {
            line: 129,
            column: 3
          }
        },
        line: 93
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 137,
            column: 2
          },
          end: {
            line: 137,
            column: 3
          }
        },
        loc: {
          start: {
            line: 137,
            column: 64
          },
          end: {
            line: 169,
            column: 3
          }
        },
        line: 137
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 178,
            column: 2
          },
          end: {
            line: 178,
            column: 3
          }
        },
        loc: {
          start: {
            line: 178,
            column: 85
          },
          end: {
            line: 211,
            column: 3
          }
        },
        line: 178
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 181,
            column: 20
          },
          end: {
            line: 181,
            column: 21
          }
        },
        loc: {
          start: {
            line: 181,
            column: 37
          },
          end: {
            line: 194,
            column: 9
          }
        },
        line: 181
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 219,
            column: 2
          },
          end: {
            line: 219,
            column: 3
          }
        },
        loc: {
          start: {
            line: 219,
            column: 63
          },
          end: {
            line: 251,
            column: 3
          }
        },
        line: 219
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 222,
            column: 20
          },
          end: {
            line: 222,
            column: 21
          }
        },
        loc: {
          start: {
            line: 222,
            column: 37
          },
          end: {
            line: 235,
            column: 9
          }
        },
        line: 222
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 261,
            column: 2
          },
          end: {
            line: 261,
            column: 3
          }
        },
        loc: {
          start: {
            line: 261,
            column: 79
          },
          end: {
            line: 293,
            column: 3
          }
        },
        line: 261
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 264,
            column: 20
          },
          end: {
            line: 264,
            column: 21
          }
        },
        loc: {
          start: {
            line: 264,
            column: 37
          },
          end: {
            line: 277,
            column: 9
          }
        },
        line: 264
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 299,
            column: 2
          },
          end: {
            line: 299,
            column: 3
          }
        },
        loc: {
          start: {
            line: 299,
            column: 45
          },
          end: {
            line: 314,
            column: 3
          }
        },
        line: 299
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 321,
            column: 2
          },
          end: {
            line: 321,
            column: 3
          }
        },
        loc: {
          start: {
            line: 321,
            column: 48
          },
          end: {
            line: 391,
            column: 3
          }
        },
        line: 321
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 361,
            column: 28
          },
          end: {
            line: 361,
            column: 29
          }
        },
        loc: {
          start: {
            line: 361,
            column: 36
          },
          end: {
            line: 369,
            column: 9
          }
        },
        line: 361
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 372,
            column: 32
          },
          end: {
            line: 372,
            column: 33
          }
        },
        loc: {
          start: {
            line: 372,
            column: 40
          },
          end: {
            line: 380,
            column: 9
          }
        },
        line: 372
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 57,
            column: 54
          },
          end: {
            line: 57,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 57,
            column: 77
          },
          end: {
            line: 57,
            column: 80
          }
        }, {
          start: {
            line: 57,
            column: 83
          },
          end: {
            line: 57,
            column: 85
          }
        }],
        line: 57
      },
      "1": {
        loc: {
          start: {
            line: 58,
            column: 100
          },
          end: {
            line: 58,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 58,
            column: 123
          },
          end: {
            line: 58,
            column: 126
          }
        }, {
          start: {
            line: 58,
            column: 129
          },
          end: {
            line: 58,
            column: 131
          }
        }],
        line: 58
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 44
          },
          end: {
            line: 60,
            column: 52
          }
        }, {
          start: {
            line: 60,
            column: 55
          },
          end: {
            line: 60,
            column: 63
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 95,
            column: 28
          },
          end: {
            line: 97,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 10
          },
          end: {
            line: 96,
            column: 84
          }
        }, {
          start: {
            line: 97,
            column: 10
          },
          end: {
            line: 97,
            column: 57
          }
        }],
        line: 95
      },
      "4": {
        loc: {
          start: {
            line: 232,
            column: 25
          },
          end: {
            line: 232,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 232,
            column: 47
          },
          end: {
            line: 232,
            column: 76
          }
        }, {
          start: {
            line: 232,
            column: 79
          },
          end: {
            line: 232,
            column: 88
          }
        }],
        line: 232
      },
      "5": {
        loc: {
          start: {
            line: 261,
            column: 65
          },
          end: {
            line: 261,
            column: 77
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 261,
            column: 75
          },
          end: {
            line: 261,
            column: 77
          }
        }],
        line: 261
      },
      "6": {
        loc: {
          start: {
            line: 271,
            column: 24
          },
          end: {
            line: 271,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 271,
            column: 24
          },
          end: {
            line: 271,
            column: 40
          }
        }, {
          start: {
            line: 271,
            column: 44
          },
          end: {
            line: 271,
            column: 52
          }
        }],
        line: 271
      },
      "7": {
        loc: {
          start: {
            line: 274,
            column: 25
          },
          end: {
            line: 274,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 274,
            column: 45
          },
          end: {
            line: 274,
            column: 72
          }
        }, {
          start: {
            line: 274,
            column: 75
          },
          end: {
            line: 274,
            column: 84
          }
        }],
        line: 274
      },
      "8": {
        loc: {
          start: {
            line: 355,
            column: 6
          },
          end: {
            line: 381,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 6
          },
          end: {
            line: 381,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "9": {
        loc: {
          start: {
            line: 362,
            column: 10
          },
          end: {
            line: 364,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 10
          },
          end: {
            line: 364,
            column: 11
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "10": {
        loc: {
          start: {
            line: 366,
            column: 10
          },
          end: {
            line: 368,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 10
          },
          end: {
            line: 368,
            column: 11
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "11": {
        loc: {
          start: {
            line: 373,
            column: 10
          },
          end: {
            line: 375,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 10
          },
          end: {
            line: 375,
            column: 11
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      },
      "12": {
        loc: {
          start: {
            line: 377,
            column: 10
          },
          end: {
            line: 379,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 10
          },
          end: {
            line: 379,
            column: 11
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "574ec559aa6ad984cd66b57a7d82732464ead813"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2lakdhu9ep = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2lakdhu9ep();
const Notification =
/* istanbul ignore next */
(cov_2lakdhu9ep().s[0]++, require('../public/models/notification.model'));
const {
  createSystemNotification
} =
/* istanbul ignore next */
(cov_2lakdhu9ep().s[1]++, require('../controllers/notification.controller'));
const {
  info,
  error
} =
/* istanbul ignore next */
(cov_2lakdhu9ep().s[2]++, require('../utils/logger'));
class NotificationService {
  /**
   * Create booking confirmation notification
   * @param {string} userId - User ID
   * @param {Object} booking - Booking object
   * @returns {Promise<Object>} Created notification
   */
  static async createBookingConfirmationNotification(userId, booking) {
    /* istanbul ignore next */
    cov_2lakdhu9ep().f[0]++;
    cov_2lakdhu9ep().s[3]++;
    try {
      const notification =
      /* istanbul ignore next */
      (cov_2lakdhu9ep().s[4]++, await createSystemNotification(userId, 'booking_confirmed', 'Booking Confirmed! 🎉', `Your booking for ${booking.destination.title} has been confirmed. Check-in: ${booking.checkInDate.toLocaleDateString()}`, {
        priority: 'high',
        actionUrl: `/bookings/${booking._id}`,
        actionText: 'View Booking',
        booking: booking._id,
        destination: booking.destination._id
      }));
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[5]++;
      info('Booking confirmation notification created', {
        notificationId: notification._id,
        userId,
        bookingId: booking._id
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[6]++;
      return notification;
    } catch (err) {
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[7]++;
      error('Error creating booking confirmation notification', {
        error: err.message,
        userId,
        bookingId: booking._id
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[8]++;
      throw err;
    }
  }

  /**
   * Create booking reminder notification
   * @param {string} userId - User ID
   * @param {Object} booking - Booking object
   * @param {number} daysUntilCheckIn - Days until check-in
   * @returns {Promise<Object>} Created notification
   */
  static async createBookingReminderNotification(userId, booking, daysUntilCheckIn) {
    /* istanbul ignore next */
    cov_2lakdhu9ep().f[1]++;
    cov_2lakdhu9ep().s[9]++;
    try {
      const notification =
      /* istanbul ignore next */
      (cov_2lakdhu9ep().s[10]++, await createSystemNotification(userId, 'booking_reminder', `Check-in Reminder - ${daysUntilCheckIn} day${daysUntilCheckIn > 1 ?
      /* istanbul ignore next */
      (cov_2lakdhu9ep().b[0][0]++, 's') :
      /* istanbul ignore next */
      (cov_2lakdhu9ep().b[0][1]++, '')} to go!`, `Don't forget! Your stay at ${booking.destination.title} starts in ${daysUntilCheckIn} day${daysUntilCheckIn > 1 ?
      /* istanbul ignore next */
      (cov_2lakdhu9ep().b[1][0]++, 's') :
      /* istanbul ignore next */
      (cov_2lakdhu9ep().b[1][1]++, '')}.`, {
        priority: daysUntilCheckIn <= 1 ?
        /* istanbul ignore next */
        (cov_2lakdhu9ep().b[2][0]++, 'urgent') :
        /* istanbul ignore next */
        (cov_2lakdhu9ep().b[2][1]++, 'medium'),
        actionUrl: `/bookings/${booking._id}`,
        actionText: 'View Details',
        booking: booking._id,
        destination: booking.destination._id
      }));
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[11]++;
      info('Booking reminder notification created', {
        notificationId: notification._id,
        userId,
        bookingId: booking._id,
        daysUntilCheckIn
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[12]++;
      return notification;
    } catch (err) {
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[13]++;
      error('Error creating booking reminder notification', {
        error: err.message,
        userId,
        bookingId: booking._id
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[14]++;
      throw err;
    }
  }

  /**
   * Create booking cancellation notification
   * @param {string} userId - User ID
   * @param {Object} booking - Booking object
   * @param {number} refundAmount - Refund amount
   * @returns {Promise<Object>} Created notification
   */
  static async createBookingCancellationNotification(userId, booking, refundAmount) {
    /* istanbul ignore next */
    cov_2lakdhu9ep().f[2]++;
    cov_2lakdhu9ep().s[15]++;
    try {
      const refundMessage =
      /* istanbul ignore next */
      (cov_2lakdhu9ep().s[16]++, refundAmount > 0 ?
      /* istanbul ignore next */
      (cov_2lakdhu9ep().b[3][0]++, `A refund of $${refundAmount} will be processed within 5-7 business days.`) :
      /* istanbul ignore next */
      (cov_2lakdhu9ep().b[3][1]++, 'No refund is available for this cancellation.'));
      const notification =
      /* istanbul ignore next */
      (cov_2lakdhu9ep().s[17]++, await createSystemNotification(userId, 'booking_cancelled', 'Booking Cancelled', `Your booking for ${booking.destination.title} has been cancelled. ${refundMessage}`, {
        priority: 'medium',
        actionUrl: `/bookings/${booking._id}`,
        actionText: 'View Details',
        booking: booking._id,
        destination: booking.destination._id
      }));
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[18]++;
      info('Booking cancellation notification created', {
        notificationId: notification._id,
        userId,
        bookingId: booking._id,
        refundAmount
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[19]++;
      return notification;
    } catch (err) {
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[20]++;
      error('Error creating booking cancellation notification', {
        error: err.message,
        userId,
        bookingId: booking._id
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[21]++;
      throw err;
    }
  }

  /**
   * Create review request notification
   * @param {string} userId - User ID
   * @param {Object} booking - Booking object
   * @returns {Promise<Object>} Created notification
   */
  static async createReviewRequestNotification(userId, booking) {
    /* istanbul ignore next */
    cov_2lakdhu9ep().f[3]++;
    cov_2lakdhu9ep().s[22]++;
    try {
      const notification =
      /* istanbul ignore next */
      (cov_2lakdhu9ep().s[23]++, await createSystemNotification(userId, 'review_request', 'How was your stay?', `We hope you enjoyed your stay at ${booking.destination.title}! Please share your experience with other travelers.`, {
        priority: 'low',
        actionUrl: `/destinations/${booking.destination._id}/review`,
        actionText: 'Write Review',
        booking: booking._id,
        destination: booking.destination._id,
        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days
      }));
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[24]++;
      info('Review request notification created', {
        notificationId: notification._id,
        userId,
        bookingId: booking._id
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[25]++;
      return notification;
    } catch (err) {
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[26]++;
      error('Error creating review request notification', {
        error: err.message,
        userId,
        bookingId: booking._id
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[27]++;
      throw err;
    }
  }

  /**
   * Create destination update notification
   * @param {Array} userIds - Array of user IDs to notify
   * @param {Object} destination - Destination object
   * @param {string} updateType - Type of update
   * @returns {Promise<Array>} Created notifications
   */
  static async createDestinationUpdateNotification(userIds, destination, updateType) {
    /* istanbul ignore next */
    cov_2lakdhu9ep().f[4]++;
    cov_2lakdhu9ep().s[28]++;
    try {
      const notifications =
      /* istanbul ignore next */
      (cov_2lakdhu9ep().s[29]++, await Promise.all(userIds.map(async userId => {
        /* istanbul ignore next */
        cov_2lakdhu9ep().f[5]++;
        cov_2lakdhu9ep().s[30]++;
        return await createSystemNotification(userId, 'destination_update', `${destination.title} - ${updateType}`, `There's been an update to ${destination.title}. Check out what's new!`, {
          priority: 'low',
          actionUrl: `/destinations/${destination._id}`,
          actionText: 'View Destination',
          destination: destination._id
        });
      })));
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[31]++;
      info('Destination update notifications created', {
        notificationCount: notifications.length,
        destinationId: destination._id,
        updateType
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[32]++;
      return notifications;
    } catch (err) {
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[33]++;
      error('Error creating destination update notifications', {
        error: err.message,
        destinationId: destination._id
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[34]++;
      throw err;
    }
  }

  /**
   * Create promotion notification
   * @param {Array} userIds - Array of user IDs to notify
   * @param {Object} promotion - Promotion object
   * @returns {Promise<Array>} Created notifications
   */
  static async createPromotionNotification(userIds, promotion) {
    /* istanbul ignore next */
    cov_2lakdhu9ep().f[6]++;
    cov_2lakdhu9ep().s[35]++;
    try {
      const notifications =
      /* istanbul ignore next */
      (cov_2lakdhu9ep().s[36]++, await Promise.all(userIds.map(async userId => {
        /* istanbul ignore next */
        cov_2lakdhu9ep().f[7]++;
        cov_2lakdhu9ep().s[37]++;
        return await createSystemNotification(userId, 'promotion', promotion.title, promotion.message, {
          priority: 'medium',
          actionUrl: promotion.actionUrl,
          actionText: promotion.actionText,
          expiresAt: promotion.expiresAt ?
          /* istanbul ignore next */
          (cov_2lakdhu9ep().b[4][0]++, new Date(promotion.expiresAt)) :
          /* istanbul ignore next */
          (cov_2lakdhu9ep().b[4][1]++, undefined)
        });
      })));
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[38]++;
      info('Promotion notifications created', {
        notificationCount: notifications.length,
        promotionId: promotion._id
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[39]++;
      return notifications;
    } catch (err) {
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[40]++;
      error('Error creating promotion notifications', {
        error: err.message,
        promotionId: promotion._id
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[41]++;
      throw err;
    }
  }

  /**
   * Create system notification
   * @param {Array} userIds - Array of user IDs to notify
   * @param {string} title - Notification title
   * @param {string} message - Notification message
   * @param {Object} options - Additional options
   * @returns {Promise<Array>} Created notifications
   */
  static async createSystemNotification(userIds, title, message, options =
  /* istanbul ignore next */
  (cov_2lakdhu9ep().b[5][0]++, {})) {
    /* istanbul ignore next */
    cov_2lakdhu9ep().f[8]++;
    cov_2lakdhu9ep().s[42]++;
    try {
      const notifications =
      /* istanbul ignore next */
      (cov_2lakdhu9ep().s[43]++, await Promise.all(userIds.map(async userId => {
        /* istanbul ignore next */
        cov_2lakdhu9ep().f[9]++;
        cov_2lakdhu9ep().s[44]++;
        return await createSystemNotification(userId, 'system', title, message, {
          priority:
          /* istanbul ignore next */
          (cov_2lakdhu9ep().b[6][0]++, options.priority) ||
          /* istanbul ignore next */
          (cov_2lakdhu9ep().b[6][1]++, 'medium'),
          actionUrl: options.actionUrl,
          actionText: options.actionText,
          expiresAt: options.expiresAt ?
          /* istanbul ignore next */
          (cov_2lakdhu9ep().b[7][0]++, new Date(options.expiresAt)) :
          /* istanbul ignore next */
          (cov_2lakdhu9ep().b[7][1]++, undefined)
        });
      })));
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[45]++;
      info('System notifications created', {
        notificationCount: notifications.length,
        title
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[46]++;
      return notifications;
    } catch (err) {
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[47]++;
      error('Error creating system notifications', {
        error: err.message,
        title
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[48]++;
      throw err;
    }
  }

  /**
   * Clean up expired notifications
   * @returns {Promise<number>} Number of notifications cleaned up
   */
  static async cleanupExpiredNotifications() {
    /* istanbul ignore next */
    cov_2lakdhu9ep().f[10]++;
    cov_2lakdhu9ep().s[49]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2lakdhu9ep().s[50]++, await Notification.cleanupExpired());
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[51]++;
      info('Expired notifications cleaned up', {
        deletedCount: result.deletedCount
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[52]++;
      return result.deletedCount;
    } catch (err) {
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[53]++;
      error('Error cleaning up expired notifications', {
        error: err.message
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[54]++;
      throw err;
    }
  }

  /**
   * Get notification statistics for a user
   * @param {string} userId - User ID
   * @returns {Promise<Object>} Notification statistics
   */
  static async getUserNotificationStats(userId) {
    /* istanbul ignore next */
    cov_2lakdhu9ep().f[11]++;
    cov_2lakdhu9ep().s[55]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_2lakdhu9ep().s[56]++, await Notification.aggregate([{
        $match: {
          user: userId
        }
      }, {
        $group: {
          _id: null,
          total: {
            $sum: 1
          },
          unread: {
            $sum: {
              $cond: [{
                $eq: ['$isRead', false]
              }, 1, 0]
            }
          },
          byType: {
            $push: {
              type: '$type',
              isRead: '$isRead'
            }
          },
          byPriority: {
            $push: {
              priority: '$priority',
              isRead: '$isRead'
            }
          }
        }
      }]));
      let notificationStats =
      /* istanbul ignore next */
      (cov_2lakdhu9ep().s[57]++, {
        total: 0,
        unread: 0,
        byType: {},
        byPriority: {}
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[58]++;
      if (stats.length > 0) {
        /* istanbul ignore next */
        cov_2lakdhu9ep().b[8][0]++;
        const stat =
        /* istanbul ignore next */
        (cov_2lakdhu9ep().s[59]++, stats[0]);
        /* istanbul ignore next */
        cov_2lakdhu9ep().s[60]++;
        notificationStats.total = stat.total;
        /* istanbul ignore next */
        cov_2lakdhu9ep().s[61]++;
        notificationStats.unread = stat.unread;

        // Calculate by type
        /* istanbul ignore next */
        cov_2lakdhu9ep().s[62]++;
        stat.byType.forEach(item => {
          /* istanbul ignore next */
          cov_2lakdhu9ep().f[12]++;
          cov_2lakdhu9ep().s[63]++;
          if (!notificationStats.byType[item.type]) {
            /* istanbul ignore next */
            cov_2lakdhu9ep().b[9][0]++;
            cov_2lakdhu9ep().s[64]++;
            notificationStats.byType[item.type] = {
              total: 0,
              unread: 0
            };
          } else
          /* istanbul ignore next */
          {
            cov_2lakdhu9ep().b[9][1]++;
          }
          cov_2lakdhu9ep().s[65]++;
          notificationStats.byType[item.type].total++;
          /* istanbul ignore next */
          cov_2lakdhu9ep().s[66]++;
          if (!item.isRead) {
            /* istanbul ignore next */
            cov_2lakdhu9ep().b[10][0]++;
            cov_2lakdhu9ep().s[67]++;
            notificationStats.byType[item.type].unread++;
          } else
          /* istanbul ignore next */
          {
            cov_2lakdhu9ep().b[10][1]++;
          }
        });

        // Calculate by priority
        /* istanbul ignore next */
        cov_2lakdhu9ep().s[68]++;
        stat.byPriority.forEach(item => {
          /* istanbul ignore next */
          cov_2lakdhu9ep().f[13]++;
          cov_2lakdhu9ep().s[69]++;
          if (!notificationStats.byPriority[item.priority]) {
            /* istanbul ignore next */
            cov_2lakdhu9ep().b[11][0]++;
            cov_2lakdhu9ep().s[70]++;
            notificationStats.byPriority[item.priority] = {
              total: 0,
              unread: 0
            };
          } else
          /* istanbul ignore next */
          {
            cov_2lakdhu9ep().b[11][1]++;
          }
          cov_2lakdhu9ep().s[71]++;
          notificationStats.byPriority[item.priority].total++;
          /* istanbul ignore next */
          cov_2lakdhu9ep().s[72]++;
          if (!item.isRead) {
            /* istanbul ignore next */
            cov_2lakdhu9ep().b[12][0]++;
            cov_2lakdhu9ep().s[73]++;
            notificationStats.byPriority[item.priority].unread++;
          } else
          /* istanbul ignore next */
          {
            cov_2lakdhu9ep().b[12][1]++;
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_2lakdhu9ep().b[8][1]++;
      }
      cov_2lakdhu9ep().s[74]++;
      return notificationStats;
    } catch (err) {
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[75]++;
      error('Error getting user notification stats', {
        error: err.message,
        userId
      });
      /* istanbul ignore next */
      cov_2lakdhu9ep().s[76]++;
      throw err;
    }
  }
}
/* istanbul ignore next */
cov_2lakdhu9ep().s[77]++;
module.exports = NotificationService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,