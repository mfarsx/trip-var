dded3e1644d0d233b3ac6ba84010b474
/* istanbul ignore next */
function cov_gjmscygas() {
  var path = "/Users/mfarsx/dev/tripvar/tripvar-server/src/repositories/user.repository.js";
  var hash = "3b5c2f0779e6452e86bbb5e7502bd426dccc1586";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/mfarsx/dev/tripvar/tripvar-server/src/repositories/user.repository.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 23
        },
        end: {
          line: 1,
          column: 51
        }
      },
      "1": {
        start: {
          line: 2,
          column: 13
        },
        end: {
          line: 2,
          column: 44
        }
      },
      "2": {
        start: {
          line: 3,
          column: 43
        },
        end: {
          line: 3,
          column: 69
        }
      },
      "3": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 16
        }
      },
      "4": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 65
        }
      },
      "5": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 29,
          column: 6
        }
      },
      "6": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 61
        }
      },
      "7": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 75
        }
      },
      "8": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 62,
          column: 7
        }
      },
      "9": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 74,
          column: 7
        }
      },
      "10": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 86,
          column: 7
        }
      },
      "11": {
        start: {
          line: 96,
          column: 17
        },
        end: {
          line: 96,
          column: 44
        }
      },
      "12": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 100,
          column: 5
        }
      },
      "13": {
        start: {
          line: 99,
          column: 6
        },
        end: {
          line: 99,
          column: 48
        }
      },
      "14": {
        start: {
          line: 102,
          column: 23
        },
        end: {
          line: 102,
          column: 61
        }
      },
      "15": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "16": {
        start: {
          line: 105,
          column: 6
        },
        end: {
          line: 105,
          column: 55
        }
      },
      "17": {
        start: {
          line: 107,
          column: 6
        },
        end: {
          line: 107,
          column: 52
        }
      },
      "18": {
        start: {
          line: 111,
          column: 24
        },
        end: {
          line: 111,
          column: 51
        }
      },
      "19": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 116,
          column: 6
        }
      },
      "20": {
        start: {
          line: 125,
          column: 17
        },
        end: {
          line: 128,
          column: 6
        }
      },
      "21": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 132,
          column: 5
        }
      },
      "22": {
        start: {
          line: 131,
          column: 6
        },
        end: {
          line: 131,
          column: 48
        }
      },
      "23": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 134,
          column: 26
        }
      },
      "24": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 143,
          column: 54
        }
      },
      "25": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 152,
          column: 53
        }
      },
      "26": {
        start: {
          line: 160,
          column: 21
        },
        end: {
          line: 176,
          column: 5
        }
      },
      "27": {
        start: {
          line: 178,
          column: 19
        },
        end: {
          line: 178,
          column: 49
        }
      },
      "28": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 184,
          column: 6
        }
      },
      "29": {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 194,
          column: 40
        }
      },
      "30": {
        start: {
          line: 204,
          column: 25
        },
        end: {
          line: 204,
          column: 42
        }
      },
      "31": {
        start: {
          line: 206,
          column: 4
        },
        end: {
          line: 208,
          column: 5
        }
      },
      "32": {
        start: {
          line: 207,
          column: 6
        },
        end: {
          line: 207,
          column: 91
        }
      },
      "33": {
        start: {
          line: 210,
          column: 4
        },
        end: {
          line: 210,
          column: 45
        }
      },
      "34": {
        start: {
          line: 220,
          column: 27
        },
        end: {
          line: 225,
          column: 5
        }
      },
      "35": {
        start: {
          line: 227,
          column: 4
        },
        end: {
          line: 227,
          column: 46
        }
      },
      "36": {
        start: {
          line: 238,
          column: 21
        },
        end: {
          line: 243,
          column: 5
        }
      },
      "37": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 245,
          column: 40
        }
      },
      "38": {
        start: {
          line: 254,
          column: 21
        },
        end: {
          line: 274,
          column: 5
        }
      },
      "39": {
        start: {
          line: 276,
          column: 4
        },
        end: {
          line: 276,
          column: 36
        }
      },
      "40": {
        start: {
          line: 280,
          column: 0
        },
        end: {
          line: 280,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 2
          },
          end: {
            line: 6,
            column: 3
          }
        },
        loc: {
          start: {
            line: 6,
            column: 16
          },
          end: {
            line: 8,
            column: 3
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 2
          },
          end: {
            line: 16,
            column: 3
          }
        },
        loc: {
          start: {
            line: 16,
            column: 41
          },
          end: {
            line: 18,
            column: 3
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        },
        loc: {
          start: {
            line: 25,
            column: 39
          },
          end: {
            line: 30,
            column: 3
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        },
        loc: {
          start: {
            line: 38,
            column: 48
          },
          end: {
            line: 40,
            column: 3
          }
        },
        line: 38
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 48,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        },
        loc: {
          start: {
            line: 48,
            column: 62
          },
          end: {
            line: 50,
            column: 3
          }
        },
        line: 48
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 58,
            column: 2
          },
          end: {
            line: 58,
            column: 3
          }
        },
        loc: {
          start: {
            line: 58,
            column: 44
          },
          end: {
            line: 63,
            column: 3
          }
        },
        line: 58
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 71,
            column: 2
          },
          end: {
            line: 71,
            column: 3
          }
        },
        loc: {
          start: {
            line: 71,
            column: 43
          },
          end: {
            line: 75,
            column: 3
          }
        },
        line: 71
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 83,
            column: 2
          },
          end: {
            line: 83,
            column: 3
          }
        },
        loc: {
          start: {
            line: 83,
            column: 46
          },
          end: {
            line: 87,
            column: 3
          }
        },
        line: 83
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 95,
            column: 2
          },
          end: {
            line: 95,
            column: 3
          }
        },
        loc: {
          start: {
            line: 95,
            column: 46
          },
          end: {
            line: 117,
            column: 3
          }
        },
        line: 95
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 124,
            column: 2
          },
          end: {
            line: 124,
            column: 3
          }
        },
        loc: {
          start: {
            line: 124,
            column: 29
          },
          end: {
            line: 135,
            column: 3
          }
        },
        line: 124
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 142,
            column: 2
          },
          end: {
            line: 142,
            column: 3
          }
        },
        loc: {
          start: {
            line: 142,
            column: 27
          },
          end: {
            line: 144,
            column: 3
          }
        },
        line: 142
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 151,
            column: 2
          },
          end: {
            line: 151,
            column: 3
          }
        },
        loc: {
          start: {
            line: 151,
            column: 24
          },
          end: {
            line: 153,
            column: 3
          }
        },
        line: 151
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 159,
            column: 2
          },
          end: {
            line: 159,
            column: 3
          }
        },
        loc: {
          start: {
            line: 159,
            column: 24
          },
          end: {
            line: 185,
            column: 3
          }
        },
        line: 159
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 193,
            column: 2
          },
          end: {
            line: 193,
            column: 3
          }
        },
        loc: {
          start: {
            line: 193,
            column: 39
          },
          end: {
            line: 195,
            column: 3
          }
        },
        line: 193
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 203,
            column: 2
          },
          end: {
            line: 203,
            column: 3
          }
        },
        loc: {
          start: {
            line: 203,
            column: 33
          },
          end: {
            line: 211,
            column: 3
          }
        },
        line: 203
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 219,
            column: 2
          },
          end: {
            line: 219,
            column: 3
          }
        },
        loc: {
          start: {
            line: 219,
            column: 41
          },
          end: {
            line: 228,
            column: 3
          }
        },
        line: 219
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 237,
            column: 2
          },
          end: {
            line: 237,
            column: 3
          }
        },
        loc: {
          start: {
            line: 237,
            column: 58
          },
          end: {
            line: 246,
            column: 3
          }
        },
        line: 237
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 253,
            column: 2
          },
          end: {
            line: 253,
            column: 3
          }
        },
        loc: {
          start: {
            line: 253,
            column: 43
          },
          end: {
            line: 277,
            column: 3
          }
        },
        line: 253
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 27
          },
          end: {
            line: 16,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 16,
            column: 37
          },
          end: {
            line: 16,
            column: 39
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 19
          },
          end: {
            line: 38,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 38,
            column: 30
          },
          end: {
            line: 38,
            column: 32
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 34
          },
          end: {
            line: 38,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 38,
            column: 44
          },
          end: {
            line: 38,
            column: 46
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 33
          },
          end: {
            line: 48,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 48,
            column: 44
          },
          end: {
            line: 48,
            column: 46
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 48,
            column: 48
          },
          end: {
            line: 48,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 48,
            column: 58
          },
          end: {
            line: 48,
            column: 60
          }
        }],
        line: 48
      },
      "5": {
        loc: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "6": {
        loc: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        }, {
          start: {
            line: 106,
            column: 11
          },
          end: {
            line: 108,
            column: 5
          }
        }],
        line: 104
      },
      "7": {
        loc: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "8": {
        loc: {
          start: {
            line: 179,
            column: 11
          },
          end: {
            line: 184,
            column: 5
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 11
          },
          end: {
            line: 179,
            column: 20
          }
        }, {
          start: {
            line: 179,
            column: 24
          },
          end: {
            line: 184,
            column: 5
          }
        }],
        line: 179
      },
      "9": {
        loc: {
          start: {
            line: 193,
            column: 25
          },
          end: {
            line: 193,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 193,
            column: 35
          },
          end: {
            line: 193,
            column: 37
          }
        }],
        line: 193
      },
      "10": {
        loc: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "11": {
        loc: {
          start: {
            line: 219,
            column: 27
          },
          end: {
            line: 219,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 219,
            column: 37
          },
          end: {
            line: 219,
            column: 39
          }
        }],
        line: 219
      },
      "12": {
        loc: {
          start: {
            line: 237,
            column: 44
          },
          end: {
            line: 237,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 237,
            column: 54
          },
          end: {
            line: 237,
            column: 56
          }
        }],
        line: 237
      },
      "13": {
        loc: {
          start: {
            line: 253,
            column: 31
          },
          end: {
            line: 253,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 253,
            column: 39
          },
          end: {
            line: 253,
            column: 41
          }
        }],
        line: 253
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0],
      "12": [0],
      "13": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3b5c2f0779e6452e86bbb5e7502bd426dccc1586"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_gjmscygas = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_gjmscygas();
const BaseRepository =
/* istanbul ignore next */
(cov_gjmscygas().s[0]++, require('./base.repository'));
const User =
/* istanbul ignore next */
(cov_gjmscygas().s[1]++, require('../models/user.model'));
const {
  NotFoundError,
  ValidationError
} =
/* istanbul ignore next */
(cov_gjmscygas().s[2]++, require('../utils/errors'));
class UserRepository extends BaseRepository {
  constructor() {
    /* istanbul ignore next */
    cov_gjmscygas().f[0]++;
    cov_gjmscygas().s[3]++;
    super(User);
  }

  /**
   * Find user by email
   * @param {string} email - User email
   * @param {Object} options - Query options
   * @returns {Promise<Object|null>} Found user
   */
  async findByEmail(email, options =
  /* istanbul ignore next */
  (cov_gjmscygas().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_gjmscygas().f[1]++;
    cov_gjmscygas().s[4]++;
    return this.findOne({
      email: email.toLowerCase()
    }, options);
  }

  /**
   * Find user by email with password
   * @param {string} email - User email
   * @returns {Promise<Object|null>} Found user with password
   */
  async findByEmailWithPassword(email) {
    /* istanbul ignore next */
    cov_gjmscygas().f[2]++;
    cov_gjmscygas().s[5]++;
    return this.findOne({
      email: email.toLowerCase()
    }, {
      select: '+password'
    });
  }

  /**
   * Find active users
   * @param {Object} criteria - Search criteria
   * @param {Object} options - Query options
   * @returns {Promise<Array>} Active users
   */
  async findActive(criteria =
  /* istanbul ignore next */
  (cov_gjmscygas().b[1][0]++, {}), options =
  /* istanbul ignore next */
  (cov_gjmscygas().b[2][0]++, {})) {
    /* istanbul ignore next */
    cov_gjmscygas().f[3]++;
    cov_gjmscygas().s[6]++;
    return this.find({
      ...criteria,
      active: true
    }, options);
  }

  /**
   * Find active users with pagination
   * @param {Object} criteria - Search criteria
   * @param {Object} options - Query options
   * @returns {Promise<Object>} Paginated active users
   */
  async findActiveWithPagination(criteria =
  /* istanbul ignore next */
  (cov_gjmscygas().b[3][0]++, {}), options =
  /* istanbul ignore next */
  (cov_gjmscygas().b[4][0]++, {})) {
    /* istanbul ignore next */
    cov_gjmscygas().f[4]++;
    cov_gjmscygas().s[7]++;
    return this.findWithPagination({
      ...criteria,
      active: true
    }, options);
  }

  /**
   * Update user password
   * @param {string} userId - User ID
   * @param {string} newPassword - New password
   * @returns {Promise<Object>} Updated user
   */
  async updatePassword(userId, newPassword) {
    /* istanbul ignore next */
    cov_gjmscygas().f[5]++;
    cov_gjmscygas().s[8]++;
    return this.updateById(userId, {
      password: newPassword,
      passwordChangedAt: new Date()
    });
  }

  /**
   * Add favorite destination
   * @param {string} userId - User ID
   * @param {string} destinationId - Destination ID
   * @returns {Promise<Object>} Updated user
   */
  async addFavorite(userId, destinationId) {
    /* istanbul ignore next */
    cov_gjmscygas().f[6]++;
    cov_gjmscygas().s[9]++;
    return this.updateById(userId, {
      $addToSet: {
        favorites: destinationId
      }
    });
  }

  /**
   * Remove favorite destination
   * @param {string} userId - User ID
   * @param {string} destinationId - Destination ID
   * @returns {Promise<Object>} Updated user
   */
  async removeFavorite(userId, destinationId) {
    /* istanbul ignore next */
    cov_gjmscygas().f[7]++;
    cov_gjmscygas().s[10]++;
    return this.updateById(userId, {
      $pull: {
        favorites: destinationId
      }
    });
  }

  /**
   * Toggle favorite destination
   * @param {string} userId - User ID
   * @param {string} destinationId - Destination ID
   * @returns {Promise<Object>} Updated user and favorite status
   */
  async toggleFavorite(userId, destinationId) {
    /* istanbul ignore next */
    cov_gjmscygas().f[8]++;
    const user =
    /* istanbul ignore next */
    (cov_gjmscygas().s[11]++, await this.findById(userId));
    /* istanbul ignore next */
    cov_gjmscygas().s[12]++;
    if (!user) {
      /* istanbul ignore next */
      cov_gjmscygas().b[5][0]++;
      cov_gjmscygas().s[13]++;
      throw new NotFoundError('User not found');
    } else
    /* istanbul ignore next */
    {
      cov_gjmscygas().b[5][1]++;
    }
    const isFavorite =
    /* istanbul ignore next */
    (cov_gjmscygas().s[14]++, user.favorites.includes(destinationId));
    /* istanbul ignore next */
    cov_gjmscygas().s[15]++;
    if (isFavorite) {
      /* istanbul ignore next */
      cov_gjmscygas().b[6][0]++;
      cov_gjmscygas().s[16]++;
      await this.removeFavorite(userId, destinationId);
    } else {
      /* istanbul ignore next */
      cov_gjmscygas().b[6][1]++;
      cov_gjmscygas().s[17]++;
      await this.addFavorite(userId, destinationId);
    }

    // Get updated user
    const updatedUser =
    /* istanbul ignore next */
    (cov_gjmscygas().s[18]++, await this.findById(userId));
    /* istanbul ignore next */
    cov_gjmscygas().s[19]++;
    return {
      user: updatedUser,
      isFavorite: !isFavorite
    };
  }

  /**
   * Get user favorites with populated destination data
   * @param {string} userId - User ID
   * @returns {Promise<Array>} User favorites
   */
  async getFavorites(userId) {
    /* istanbul ignore next */
    cov_gjmscygas().f[9]++;
    const user =
    /* istanbul ignore next */
    (cov_gjmscygas().s[20]++, await this.findById(userId, {
      populate: 'favorites',
      select: 'favorites'
    }));
    /* istanbul ignore next */
    cov_gjmscygas().s[21]++;
    if (!user) {
      /* istanbul ignore next */
      cov_gjmscygas().b[7][0]++;
      cov_gjmscygas().s[22]++;
      throw new NotFoundError('User not found');
    } else
    /* istanbul ignore next */
    {
      cov_gjmscygas().b[7][1]++;
    }
    cov_gjmscygas().s[23]++;
    return user.favorites;
  }

  /**
   * Soft delete user (set active to false)
   * @param {string} userId - User ID
   * @returns {Promise<Object>} Updated user
   */
  async softDelete(userId) {
    /* istanbul ignore next */
    cov_gjmscygas().f[10]++;
    cov_gjmscygas().s[24]++;
    return this.updateById(userId, {
      active: false
    });
  }

  /**
   * Restore soft deleted user
   * @param {string} userId - User ID
   * @returns {Promise<Object>} Updated user
   */
  async restore(userId) {
    /* istanbul ignore next */
    cov_gjmscygas().f[11]++;
    cov_gjmscygas().s[25]++;
    return this.updateById(userId, {
      active: true
    });
  }

  /**
   * Get user statistics
   * @returns {Promise<Object>} User statistics
   */
  async getStatistics() {
    /* istanbul ignore next */
    cov_gjmscygas().f[12]++;
    const pipeline =
    /* istanbul ignore next */
    (cov_gjmscygas().s[26]++, [{
      $group: {
        _id: null,
        totalUsers: {
          $sum: 1
        },
        activeUsers: {
          $sum: {
            $cond: [{
              $eq: ['$active', true]
            }, 1, 0]
          }
        },
        inactiveUsers: {
          $sum: {
            $cond: [{
              $eq: ['$active', false]
            }, 1, 0]
          }
        },
        usersWithFavorites: {
          $sum: {
            $cond: [{
              $gt: [{
                $size: '$favorites'
              }, 0]
            }, 1, 0]
          }
        }
      }
    }]);
    const result =
    /* istanbul ignore next */
    (cov_gjmscygas().s[27]++, await this.aggregate(pipeline));
    /* istanbul ignore next */
    cov_gjmscygas().s[28]++;
    return /* istanbul ignore next */(cov_gjmscygas().b[8][0]++, result[0]) ||
    /* istanbul ignore next */
    (cov_gjmscygas().b[8][1]++, {
      totalUsers: 0,
      activeUsers: 0,
      inactiveUsers: 0,
      usersWithFavorites: 0
    });
  }

  /**
   * Get users by role
   * @param {string} role - User role
   * @param {Object} options - Query options
   * @returns {Promise<Array>} Users with specified role
   */
  async findByRole(role, options =
  /* istanbul ignore next */
  (cov_gjmscygas().b[9][0]++, {})) {
    /* istanbul ignore next */
    cov_gjmscygas().f[13]++;
    cov_gjmscygas().s[29]++;
    return this.find({
      role
    }, options);
  }

  /**
   * Update user role
   * @param {string} userId - User ID
   * @param {string} role - New role
   * @returns {Promise<Object>} Updated user
   */
  async updateRole(userId, role) {
    /* istanbul ignore next */
    cov_gjmscygas().f[14]++;
    const allowedRoles =
    /* istanbul ignore next */
    (cov_gjmscygas().s[30]++, ['user', 'admin']);
    /* istanbul ignore next */
    cov_gjmscygas().s[31]++;
    if (!allowedRoles.includes(role)) {
      /* istanbul ignore next */
      cov_gjmscygas().b[10][0]++;
      cov_gjmscygas().s[32]++;
      throw new ValidationError(`Invalid role. Allowed roles: ${allowedRoles.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_gjmscygas().b[10][1]++;
    }
    cov_gjmscygas().s[33]++;
    return this.updateById(userId, {
      role
    });
  }

  /**
   * Search users by name or email
   * @param {string} searchTerm - Search term
   * @param {Object} options - Query options
   * @returns {Promise<Array>} Matching users
   */
  async search(searchTerm, options =
  /* istanbul ignore next */
  (cov_gjmscygas().b[11][0]++, {})) {
    /* istanbul ignore next */
    cov_gjmscygas().f[15]++;
    const searchCriteria =
    /* istanbul ignore next */
    (cov_gjmscygas().s[34]++, {
      $or: [{
        name: {
          $regex: searchTerm,
          $options: 'i'
        }
      }, {
        email: {
          $regex: searchTerm,
          $options: 'i'
        }
      }]
    });
    /* istanbul ignore next */
    cov_gjmscygas().s[35]++;
    return this.find(searchCriteria, options);
  }

  /**
   * Get users created in date range
   * @param {Date} startDate - Start date
   * @param {Date} endDate - End date
   * @param {Object} options - Query options
   * @returns {Promise<Array>} Users created in range
   */
  async findByDateRange(startDate, endDate, options =
  /* istanbul ignore next */
  (cov_gjmscygas().b[12][0]++, {})) {
    /* istanbul ignore next */
    cov_gjmscygas().f[16]++;
    const criteria =
    /* istanbul ignore next */
    (cov_gjmscygas().s[36]++, {
      createdAt: {
        $gte: startDate,
        $lte: endDate
      }
    });
    /* istanbul ignore next */
    cov_gjmscygas().s[37]++;
    return this.find(criteria, options);
  }

  /**
   * Get users with most favorites
   * @param {number} limit - Number of users to return
   * @returns {Promise<Array>} Users with most favorites
   */
  async getTopUsersByFavorites(limit =
  /* istanbul ignore next */
  (cov_gjmscygas().b[13][0]++, 10)) {
    /* istanbul ignore next */
    cov_gjmscygas().f[17]++;
    const pipeline =
    /* istanbul ignore next */
    (cov_gjmscygas().s[38]++, [{
      $addFields: {
        favoritesCount: {
          $size: '$favorites'
        }
      }
    }, {
      $sort: {
        favoritesCount: -1
      }
    }, {
      $limit: limit
    }, {
      $project: {
        name: 1,
        email: 1,
        favoritesCount: 1,
        createdAt: 1
      }
    }]);
    /* istanbul ignore next */
    cov_gjmscygas().s[39]++;
    return this.aggregate(pipeline);
  }
}
/* istanbul ignore next */
cov_gjmscygas().s[40]++;
module.exports = new UserRepository();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfZ2ptc2N5Z2FzIiwiYWN0dWFsQ292ZXJhZ2UiLCJCYXNlUmVwb3NpdG9yeSIsInMiLCJyZXF1aXJlIiwiVXNlciIsIk5vdEZvdW5kRXJyb3IiLCJWYWxpZGF0aW9uRXJyb3IiLCJVc2VyUmVwb3NpdG9yeSIsImNvbnN0cnVjdG9yIiwiZiIsImZpbmRCeUVtYWlsIiwiZW1haWwiLCJvcHRpb25zIiwiYiIsImZpbmRPbmUiLCJ0b0xvd2VyQ2FzZSIsImZpbmRCeUVtYWlsV2l0aFBhc3N3b3JkIiwic2VsZWN0IiwiZmluZEFjdGl2ZSIsImNyaXRlcmlhIiwiZmluZCIsImFjdGl2ZSIsImZpbmRBY3RpdmVXaXRoUGFnaW5hdGlvbiIsImZpbmRXaXRoUGFnaW5hdGlvbiIsInVwZGF0ZVBhc3N3b3JkIiwidXNlcklkIiwibmV3UGFzc3dvcmQiLCJ1cGRhdGVCeUlkIiwicGFzc3dvcmQiLCJwYXNzd29yZENoYW5nZWRBdCIsIkRhdGUiLCJhZGRGYXZvcml0ZSIsImRlc3RpbmF0aW9uSWQiLCIkYWRkVG9TZXQiLCJmYXZvcml0ZXMiLCJyZW1vdmVGYXZvcml0ZSIsIiRwdWxsIiwidG9nZ2xlRmF2b3JpdGUiLCJ1c2VyIiwiZmluZEJ5SWQiLCJpc0Zhdm9yaXRlIiwiaW5jbHVkZXMiLCJ1cGRhdGVkVXNlciIsImdldEZhdm9yaXRlcyIsInBvcHVsYXRlIiwic29mdERlbGV0ZSIsInJlc3RvcmUiLCJnZXRTdGF0aXN0aWNzIiwicGlwZWxpbmUiLCIkZ3JvdXAiLCJfaWQiLCJ0b3RhbFVzZXJzIiwiJHN1bSIsImFjdGl2ZVVzZXJzIiwiJGNvbmQiLCIkZXEiLCJpbmFjdGl2ZVVzZXJzIiwidXNlcnNXaXRoRmF2b3JpdGVzIiwiJGd0IiwiJHNpemUiLCJyZXN1bHQiLCJhZ2dyZWdhdGUiLCJmaW5kQnlSb2xlIiwicm9sZSIsInVwZGF0ZVJvbGUiLCJhbGxvd2VkUm9sZXMiLCJqb2luIiwic2VhcmNoIiwic2VhcmNoVGVybSIsInNlYXJjaENyaXRlcmlhIiwiJG9yIiwibmFtZSIsIiRyZWdleCIsIiRvcHRpb25zIiwiZmluZEJ5RGF0ZVJhbmdlIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsImNyZWF0ZWRBdCIsIiRndGUiLCIkbHRlIiwiZ2V0VG9wVXNlcnNCeUZhdm9yaXRlcyIsImxpbWl0IiwiJGFkZEZpZWxkcyIsImZhdm9yaXRlc0NvdW50IiwiJHNvcnQiLCIkbGltaXQiLCIkcHJvamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ1c2VyLnJlcG9zaXRvcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQmFzZVJlcG9zaXRvcnkgPSByZXF1aXJlKCcuL2Jhc2UucmVwb3NpdG9yeScpO1xuY29uc3QgVXNlciA9IHJlcXVpcmUoJy4uL21vZGVscy91c2VyLm1vZGVsJyk7XG5jb25zdCB7IE5vdEZvdW5kRXJyb3IsIFZhbGlkYXRpb25FcnJvciB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvZXJyb3JzJyk7XG5cbmNsYXNzIFVzZXJSZXBvc2l0b3J5IGV4dGVuZHMgQmFzZVJlcG9zaXRvcnkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihVc2VyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIHVzZXIgYnkgZW1haWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVtYWlsIC0gVXNlciBlbWFpbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFF1ZXJ5IG9wdGlvbnNcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0fG51bGw+fSBGb3VuZCB1c2VyXG4gICAqL1xuICBhc3luYyBmaW5kQnlFbWFpbChlbWFpbCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZmluZE9uZSh7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgdXNlciBieSBlbWFpbCB3aXRoIHBhc3N3b3JkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbWFpbCAtIFVzZXIgZW1haWxcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0fG51bGw+fSBGb3VuZCB1c2VyIHdpdGggcGFzc3dvcmRcbiAgICovXG4gIGFzeW5jIGZpbmRCeUVtYWlsV2l0aFBhc3N3b3JkKGVtYWlsKSB7XG4gICAgcmV0dXJuIHRoaXMuZmluZE9uZShcbiAgICAgIHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCkgfSxcbiAgICAgIHsgc2VsZWN0OiAnK3Bhc3N3b3JkJyB9XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGFjdGl2ZSB1c2Vyc1xuICAgKiBAcGFyYW0ge09iamVjdH0gY3JpdGVyaWEgLSBTZWFyY2ggY3JpdGVyaWFcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBRdWVyeSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gQWN0aXZlIHVzZXJzXG4gICAqL1xuICBhc3luYyBmaW5kQWN0aXZlKGNyaXRlcmlhID0ge30sIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmZpbmQoeyAuLi5jcml0ZXJpYSwgYWN0aXZlOiB0cnVlIH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYWN0aXZlIHVzZXJzIHdpdGggcGFnaW5hdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gY3JpdGVyaWEgLSBTZWFyY2ggY3JpdGVyaWFcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBRdWVyeSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFBhZ2luYXRlZCBhY3RpdmUgdXNlcnNcbiAgICovXG4gIGFzeW5jIGZpbmRBY3RpdmVXaXRoUGFnaW5hdGlvbihjcml0ZXJpYSA9IHt9LCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5maW5kV2l0aFBhZ2luYXRpb24oeyAuLi5jcml0ZXJpYSwgYWN0aXZlOiB0cnVlIH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB1c2VyIHBhc3N3b3JkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWQgLSBVc2VyIElEXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdQYXNzd29yZCAtIE5ldyBwYXNzd29yZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBVcGRhdGVkIHVzZXJcbiAgICovXG4gIGFzeW5jIHVwZGF0ZVBhc3N3b3JkKHVzZXJJZCwgbmV3UGFzc3dvcmQpIHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVCeUlkKHVzZXJJZCwge1xuICAgICAgcGFzc3dvcmQ6IG5ld1Bhc3N3b3JkLFxuICAgICAgcGFzc3dvcmRDaGFuZ2VkQXQ6IG5ldyBEYXRlKClcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgZmF2b3JpdGUgZGVzdGluYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZCAtIFVzZXIgSURcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRlc3RpbmF0aW9uSWQgLSBEZXN0aW5hdGlvbiBJRFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBVcGRhdGVkIHVzZXJcbiAgICovXG4gIGFzeW5jIGFkZEZhdm9yaXRlKHVzZXJJZCwgZGVzdGluYXRpb25JZCkge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZUJ5SWQodXNlcklkLCB7XG4gICAgICAkYWRkVG9TZXQ6IHsgZmF2b3JpdGVzOiBkZXN0aW5hdGlvbklkIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgZmF2b3JpdGUgZGVzdGluYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZCAtIFVzZXIgSURcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRlc3RpbmF0aW9uSWQgLSBEZXN0aW5hdGlvbiBJRFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBVcGRhdGVkIHVzZXJcbiAgICovXG4gIGFzeW5jIHJlbW92ZUZhdm9yaXRlKHVzZXJJZCwgZGVzdGluYXRpb25JZCkge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZUJ5SWQodXNlcklkLCB7XG4gICAgICAkcHVsbDogeyBmYXZvcml0ZXM6IGRlc3RpbmF0aW9uSWQgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZSBmYXZvcml0ZSBkZXN0aW5hdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcklkIC0gVXNlciBJRFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGVzdGluYXRpb25JZCAtIERlc3RpbmF0aW9uIElEXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFVwZGF0ZWQgdXNlciBhbmQgZmF2b3JpdGUgc3RhdHVzXG4gICAqL1xuICBhc3luYyB0b2dnbGVGYXZvcml0ZSh1c2VySWQsIGRlc3RpbmF0aW9uSWQpIHtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5maW5kQnlJZCh1c2VySWQpO1xuXG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgTm90Rm91bmRFcnJvcignVXNlciBub3QgZm91bmQnKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zhdm9yaXRlID0gdXNlci5mYXZvcml0ZXMuaW5jbHVkZXMoZGVzdGluYXRpb25JZCk7XG5cbiAgICBpZiAoaXNGYXZvcml0ZSkge1xuICAgICAgYXdhaXQgdGhpcy5yZW1vdmVGYXZvcml0ZSh1c2VySWQsIGRlc3RpbmF0aW9uSWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLmFkZEZhdm9yaXRlKHVzZXJJZCwgZGVzdGluYXRpb25JZCk7XG4gICAgfVxuXG4gICAgLy8gR2V0IHVwZGF0ZWQgdXNlclxuICAgIGNvbnN0IHVwZGF0ZWRVc2VyID0gYXdhaXQgdGhpcy5maW5kQnlJZCh1c2VySWQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXI6IHVwZGF0ZWRVc2VyLFxuICAgICAgaXNGYXZvcml0ZTogIWlzRmF2b3JpdGVcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB1c2VyIGZhdm9yaXRlcyB3aXRoIHBvcHVsYXRlZCBkZXN0aW5hdGlvbiBkYXRhXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWQgLSBVc2VyIElEXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gVXNlciBmYXZvcml0ZXNcbiAgICovXG4gIGFzeW5jIGdldEZhdm9yaXRlcyh1c2VySWQpIHtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5maW5kQnlJZCh1c2VySWQsIHtcbiAgICAgIHBvcHVsYXRlOiAnZmF2b3JpdGVzJyxcbiAgICAgIHNlbGVjdDogJ2Zhdm9yaXRlcydcbiAgICB9KTtcblxuICAgIGlmICghdXNlcikge1xuICAgICAgdGhyb3cgbmV3IE5vdEZvdW5kRXJyb3IoJ1VzZXIgbm90IGZvdW5kJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVzZXIuZmF2b3JpdGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNvZnQgZGVsZXRlIHVzZXIgKHNldCBhY3RpdmUgdG8gZmFsc2UpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWQgLSBVc2VyIElEXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFVwZGF0ZWQgdXNlclxuICAgKi9cbiAgYXN5bmMgc29mdERlbGV0ZSh1c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVCeUlkKHVzZXJJZCwgeyBhY3RpdmU6IGZhbHNlIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RvcmUgc29mdCBkZWxldGVkIHVzZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZCAtIFVzZXIgSURcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gVXBkYXRlZCB1c2VyXG4gICAqL1xuICBhc3luYyByZXN0b3JlKHVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZUJ5SWQodXNlcklkLCB7IGFjdGl2ZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdXNlciBzdGF0aXN0aWNzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFVzZXIgc3RhdGlzdGljc1xuICAgKi9cbiAgYXN5bmMgZ2V0U3RhdGlzdGljcygpIHtcbiAgICBjb25zdCBwaXBlbGluZSA9IFtcbiAgICAgIHtcbiAgICAgICAgJGdyb3VwOiB7XG4gICAgICAgICAgX2lkOiBudWxsLFxuICAgICAgICAgIHRvdGFsVXNlcnM6IHsgJHN1bTogMSB9LFxuICAgICAgICAgIGFjdGl2ZVVzZXJzOiB7XG4gICAgICAgICAgICAkc3VtOiB7ICRjb25kOiBbeyAkZXE6IFsnJGFjdGl2ZScsIHRydWVdIH0sIDEsIDBdIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGluYWN0aXZlVXNlcnM6IHtcbiAgICAgICAgICAgICRzdW06IHsgJGNvbmQ6IFt7ICRlcTogWyckYWN0aXZlJywgZmFsc2VdIH0sIDEsIDBdIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHVzZXJzV2l0aEZhdm9yaXRlczoge1xuICAgICAgICAgICAgJHN1bTogeyAkY29uZDogW3sgJGd0OiBbeyAkc2l6ZTogJyRmYXZvcml0ZXMnIH0sIDBdIH0sIDEsIDBdIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5hZ2dyZWdhdGUocGlwZWxpbmUpO1xuICAgIHJldHVybiByZXN1bHRbMF0gfHwge1xuICAgICAgdG90YWxVc2VyczogMCxcbiAgICAgIGFjdGl2ZVVzZXJzOiAwLFxuICAgICAgaW5hY3RpdmVVc2VyczogMCxcbiAgICAgIHVzZXJzV2l0aEZhdm9yaXRlczogMFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IHVzZXJzIGJ5IHJvbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvbGUgLSBVc2VyIHJvbGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBRdWVyeSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gVXNlcnMgd2l0aCBzcGVjaWZpZWQgcm9sZVxuICAgKi9cbiAgYXN5bmMgZmluZEJ5Um9sZShyb2xlLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5maW5kKHsgcm9sZSB9LCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdXNlciByb2xlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWQgLSBVc2VyIElEXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb2xlIC0gTmV3IHJvbGVcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gVXBkYXRlZCB1c2VyXG4gICAqL1xuICBhc3luYyB1cGRhdGVSb2xlKHVzZXJJZCwgcm9sZSkge1xuICAgIGNvbnN0IGFsbG93ZWRSb2xlcyA9IFsndXNlcicsICdhZG1pbiddO1xuXG4gICAgaWYgKCFhbGxvd2VkUm9sZXMuaW5jbHVkZXMocm9sZSkpIHtcbiAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYEludmFsaWQgcm9sZS4gQWxsb3dlZCByb2xlczogJHthbGxvd2VkUm9sZXMuam9pbignLCAnKX1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy51cGRhdGVCeUlkKHVzZXJJZCwgeyByb2xlIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlYXJjaCB1c2VycyBieSBuYW1lIG9yIGVtYWlsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWFyY2hUZXJtIC0gU2VhcmNoIHRlcm1cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBRdWVyeSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gTWF0Y2hpbmcgdXNlcnNcbiAgICovXG4gIGFzeW5jIHNlYXJjaChzZWFyY2hUZXJtLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBzZWFyY2hDcml0ZXJpYSA9IHtcbiAgICAgICRvcjogW1xuICAgICAgICB7IG5hbWU6IHsgJHJlZ2V4OiBzZWFyY2hUZXJtLCAkb3B0aW9uczogJ2knIH0gfSxcbiAgICAgICAgeyBlbWFpbDogeyAkcmVnZXg6IHNlYXJjaFRlcm0sICRvcHRpb25zOiAnaScgfSB9XG4gICAgICBdXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLmZpbmQoc2VhcmNoQ3JpdGVyaWEsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB1c2VycyBjcmVhdGVkIGluIGRhdGUgcmFuZ2VcbiAgICogQHBhcmFtIHtEYXRlfSBzdGFydERhdGUgLSBTdGFydCBkYXRlXG4gICAqIEBwYXJhbSB7RGF0ZX0gZW5kRGF0ZSAtIEVuZCBkYXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUXVlcnkgb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxBcnJheT59IFVzZXJzIGNyZWF0ZWQgaW4gcmFuZ2VcbiAgICovXG4gIGFzeW5jIGZpbmRCeURhdGVSYW5nZShzdGFydERhdGUsIGVuZERhdGUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGNyaXRlcmlhID0ge1xuICAgICAgY3JlYXRlZEF0OiB7XG4gICAgICAgICRndGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgJGx0ZTogZW5kRGF0ZVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5maW5kKGNyaXRlcmlhLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdXNlcnMgd2l0aCBtb3N0IGZhdm9yaXRlc1xuICAgKiBAcGFyYW0ge251bWJlcn0gbGltaXQgLSBOdW1iZXIgb2YgdXNlcnMgdG8gcmV0dXJuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gVXNlcnMgd2l0aCBtb3N0IGZhdm9yaXRlc1xuICAgKi9cbiAgYXN5bmMgZ2V0VG9wVXNlcnNCeUZhdm9yaXRlcyhsaW1pdCA9IDEwKSB7XG4gICAgY29uc3QgcGlwZWxpbmUgPSBbXG4gICAgICB7XG4gICAgICAgICRhZGRGaWVsZHM6IHtcbiAgICAgICAgICBmYXZvcml0ZXNDb3VudDogeyAkc2l6ZTogJyRmYXZvcml0ZXMnIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJHNvcnQ6IHsgZmF2b3JpdGVzQ291bnQ6IC0xIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICRsaW1pdDogbGltaXRcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICRwcm9qZWN0OiB7XG4gICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICBlbWFpbDogMSxcbiAgICAgICAgICBmYXZvcml0ZXNDb3VudDogMSxcbiAgICAgICAgICBjcmVhdGVkQXQ6IDFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF07XG5cbiAgICByZXR1cm4gdGhpcy5hZ2dyZWdhdGUocGlwZWxpbmUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFVzZXJSZXBvc2l0b3J5KCk7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGFBQUE7QUFmWixNQUFNRSxjQUFjO0FBQUE7QUFBQSxDQUFBRixhQUFBLEdBQUFHLENBQUEs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