{"version":3,"names":["express","require","authController","protect","securityConfig","validate","sanitize","registerSchema","loginSchema","updateProfileSchema","updatePasswordSchema","toggleFavoriteSchema","paginationSchema","router","Router","post","authLimiter","register","login","use","logout","get","getAllUsers","route","getProfile","patch","updateProfile","delete","deleteAccount","updatePassword","getFavorites","toggleFavorite","module","exports"],"sources":["auth.routes.js"],"sourcesContent":["const express = require('express');\nconst authController = require('../controllers/auth.controller');\nconst { protect } = require('../middleware/auth');\nconst { securityConfig } = require('../config/security');\nconst { validate, sanitize } = require('../middleware/validation');\nconst {\n  registerSchema,\n  loginSchema,\n  updateProfileSchema,\n  updatePasswordSchema,\n  toggleFavoriteSchema,\n  paginationSchema\n} = require('../validation/auth.validation');\n\nconst router = express.Router();\n\n// Public routes with strict rate limiting and validation\nrouter.post('/register',\n  securityConfig.authLimiter,\n  sanitize(),\n  validate(registerSchema),\n  authController.register\n);\n\nrouter.post('/login',\n  securityConfig.authLimiter,\n  sanitize(),\n  validate(loginSchema),\n  authController.login\n);\n\n// Protected routes (everything after this middleware requires authentication)\nrouter.use(protect);\n\n// Logout route\nrouter.post('/logout', authController.logout);\n\n// Get all users\nrouter.get('/users',\n  sanitize(),\n  validate(paginationSchema),\n  authController.getAllUsers\n);\n\n// Profile routes\nrouter\n  .route('/profile')\n  .get(authController.getProfile)\n  .patch(\n    sanitize(),\n    validate(updateProfileSchema),\n    authController.updateProfile\n  )\n  .delete(authController.deleteAccount);\n\n// Password update\nrouter.patch('/update-password',\n  sanitize(),\n  validate(updatePasswordSchema),\n  authController.updatePassword\n);\n\n// Favorites routes\nrouter.get('/favorites', authController.getFavorites);\nrouter.post('/favorites/:destinationId',\n  sanitize(),\n  validate(toggleFavoriteSchema),\n  authController.toggleFavorite\n);\n\nmodule.exports = router;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,cAAc,GAAGD,OAAO,CAAC,gCAAgC,CAAC;AAChE,MAAM;EAAEE;AAAQ,CAAC,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AACjD,MAAM;EAAEG;AAAe,CAAC,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AACxD,MAAM;EAAEI,QAAQ;EAAEC;AAAS,CAAC,GAAGL,OAAO,CAAC,0BAA0B,CAAC;AAClE,MAAM;EACJM,cAAc;EACdC,WAAW;EACXC,mBAAmB;EACnBC,oBAAoB;EACpBC,oBAAoB;EACpBC;AACF,CAAC,GAAGX,OAAO,CAAC,+BAA+B,CAAC;AAE5C,MAAMY,MAAM,GAAGb,OAAO,CAACc,MAAM,CAAC,CAAC;;AAE/B;AACAD,MAAM,CAACE,IAAI,CAAC,WAAW,EACrBX,cAAc,CAACY,WAAW,EAC1BV,QAAQ,CAAC,CAAC,EACVD,QAAQ,CAACE,cAAc,CAAC,EACxBL,cAAc,CAACe,QACjB,CAAC;AAEDJ,MAAM,CAACE,IAAI,CAAC,QAAQ,EAClBX,cAAc,CAACY,WAAW,EAC1BV,QAAQ,CAAC,CAAC,EACVD,QAAQ,CAACG,WAAW,CAAC,EACrBN,cAAc,CAACgB,KACjB,CAAC;;AAED;AACAL,MAAM,CAACM,GAAG,CAAChB,OAAO,CAAC;;AAEnB;AACAU,MAAM,CAACE,IAAI,CAAC,SAAS,EAAEb,cAAc,CAACkB,MAAM,CAAC;;AAE7C;AACAP,MAAM,CAACQ,GAAG,CAAC,QAAQ,EACjBf,QAAQ,CAAC,CAAC,EACVD,QAAQ,CAACO,gBAAgB,CAAC,EAC1BV,cAAc,CAACoB,WACjB,CAAC;;AAED;AACAT,MAAM,CACHU,KAAK,CAAC,UAAU,CAAC,CACjBF,GAAG,CAACnB,cAAc,CAACsB,UAAU,CAAC,CAC9BC,KAAK,CACJnB,QAAQ,CAAC,CAAC,EACVD,QAAQ,CAACI,mBAAmB,CAAC,EAC7BP,cAAc,CAACwB,aACjB,CAAC,CACAC,MAAM,CAACzB,cAAc,CAAC0B,aAAa,CAAC;;AAEvC;AACAf,MAAM,CAACY,KAAK,CAAC,kBAAkB,EAC7BnB,QAAQ,CAAC,CAAC,EACVD,QAAQ,CAACK,oBAAoB,CAAC,EAC9BR,cAAc,CAAC2B,cACjB,CAAC;;AAED;AACAhB,MAAM,CAACQ,GAAG,CAAC,YAAY,EAAEnB,cAAc,CAAC4B,YAAY,CAAC;AACrDjB,MAAM,CAACE,IAAI,CAAC,2BAA2B,EACrCT,QAAQ,CAAC,CAAC,EACVD,QAAQ,CAACM,oBAAoB,CAAC,EAC9BT,cAAc,CAAC6B,cACjB,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGpB,MAAM","ignoreList":[]}