{"version":3,"names":["cov_zz1nv4b0t","actualCoverage","express","s","require","ValidationError","authRoutes","destinationRoutes","bookingRoutes","reviewRoutes","paymentRoutes","notificationRoutes","redisCache","redisUtils","router","Router","use","get","req","res","next","f","error","Promise","reject","Error","ttl","data","message","timestamp","Date","toISOString","random","Math","expensiveCalculation","Array","from","length","_","i","reduce","a","b","json","cacheKey","getCache","computation","result","setCache","fromCache","status","sessionData","session","visitCount","lastVisit","sessionId","cookies","post","pattern","body","getRedisClient","client","keys","del","module","exports"],"sources":["index.js"],"sourcesContent":["const express = require('express');\nconst { ValidationError } = require('../utils/errors');\nconst authRoutes = require('./auth.routes');\nconst destinationRoutes = require('./destination.routes');\nconst bookingRoutes = require('./booking.routes');\nconst reviewRoutes = require('./review.routes');\nconst paymentRoutes = require('./payment.routes');\nconst notificationRoutes = require('./notification.routes');\nconst { redisCache, redisUtils } = require('../middleware/redisCache');\nconst router = express.Router();\n\n// Mount auth routes\nrouter.use('/auth', authRoutes);\nrouter.use('/destinations', destinationRoutes);\nrouter.use('/bookings', bookingRoutes);\nrouter.use('/reviews', reviewRoutes);\nrouter.use('/payments', paymentRoutes);\nrouter.use('/notifications', notificationRoutes);\n\n// Example error endpoint\nrouter.get('/error-example', (req, res, next) => {\n  try {\n    // Simulating a validation error\n    throw new ValidationError('This is an example validation error');\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Example async error\nrouter.get('/async-error', async(req, res, next) => {\n  try {\n    // Simulating an async operation that fails\n    await Promise.reject(new Error('Async operation failed'));\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Redis cache example routes\nrouter.get('/cache-example', redisCache({ ttl: 300 }), (req, res) => {\n  // Simulate expensive operation\n  const data = {\n    message: 'This is cached data!',\n    timestamp: new Date().toISOString(),\n    random: Math.random(),\n    expensiveCalculation: Array.from({ length: 1000 }, (_, i) => i * Math.random()).reduce((a, b) => a + b, 0)\n  };\n\n  res.json(data);\n});\n\n// Manual cache operations example\nrouter.get('/cache-manual', async(req, res) => {\n  try {\n    const cacheKey = 'manual-cache-example';\n\n    // Try to get from cache first\n    let data = await redisUtils.getCache(cacheKey);\n\n    if (!data) {\n      // Simulate expensive operation\n      data = {\n        message: 'This data was computed and cached manually',\n        timestamp: new Date().toISOString(),\n        computation: 'expensive',\n        result: Math.random() * 1000\n      };\n\n      // Cache for 5 minutes\n      await redisUtils.setCache(cacheKey, data, 300);\n    } else {\n      data.fromCache = true;\n    }\n\n    res.json(data);\n  } catch (error) {\n    res.status(500).json({ error: 'Cache operation failed', message: error.message });\n  }\n});\n\n// Session example\nrouter.get('/session-example', (req, res) => {\n  const sessionData = req.session || {};\n  const visitCount = (sessionData.visitCount || 0) + 1;\n\n  // Update session\n  req.session = { ...sessionData, visitCount, lastVisit: new Date().toISOString() };\n\n  res.json({\n    message: 'Session data example',\n    visitCount,\n    sessionId: req.cookies?.sessionId,\n    sessionData: req.session\n  });\n});\n\n// Clear cache endpoint (for testing)\nrouter.post('/clear-cache', async(req, res) => {\n  try {\n    const { pattern = 'cache:*' } = req.body;\n    const { getRedisClient } = require('../config/redis');\n    const client = getRedisClient();\n    const keys = await client.keys(pattern);\n\n    if (keys.length > 0) {\n      await client.del(...keys);\n      res.json({ message: `Cleared ${keys.length} cache entries`, pattern, keys });\n    } else {\n      res.json({ message: 'No cache entries found', pattern });\n    }\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to clear cache', message: error.message });\n  }\n});\n\nmodule.exports = router;\n"],"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","ignoreList":[]}