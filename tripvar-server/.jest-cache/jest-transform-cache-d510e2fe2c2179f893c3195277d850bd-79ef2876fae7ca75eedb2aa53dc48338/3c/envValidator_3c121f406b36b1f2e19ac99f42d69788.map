{"version":3,"names":["cov_asqpqtlhx","actualCoverage","EnvironmentValidator","constructor","f","s","validations","Map","errors","addValidation","key","options","b","required","type","minLength","maxLength","min","max","pattern","allowedValues","customValidator","description","set","validate","rules","value","process","env","undefined","push","validateType","length","numValue","Number","test","includes","join","isNaN","toLowerCase","URL","emailPattern","getErrors","getSummary","total","size","passed","failed","generateDocumentation","doc","source","envValidator","validateEnvironment","isValid","summary","console","error","forEach","err","exit","log","module","exports"],"sources":["envValidator.js"],"sourcesContent":["// Removed logger dependency to avoid circular dependency\n\n/**\n * Environment variable validation utility\n */\nclass EnvironmentValidator {\n  constructor() {\n    this.validations = new Map();\n    this.errors = [];\n  }\n\n  /**\n   * Add validation rule for an environment variable\n   * @param {string} key - Environment variable key\n   * @param {Object} options - Validation options\n   */\n  addValidation(key, options = {}) {\n    const {\n      required = false,\n      type = 'string',\n      minLength = null,\n      maxLength = null,\n      min = null,\n      max = null,\n      pattern = null,\n      allowedValues = null,\n      customValidator = null,\n      description = ''\n    } = options;\n\n    this.validations.set(key, {\n      required,\n      type,\n      minLength,\n      maxLength,\n      min,\n      max,\n      pattern,\n      allowedValues,\n      customValidator,\n      description\n    });\n  }\n\n  /**\n   * Validate all environment variables\n   * @returns {boolean} Validation result\n   */\n  validate() {\n    this.errors = [];\n\n    for (const [key, rules] of this.validations) {\n      const value = process.env[key];\n\n      // Check if required\n      if (rules.required && (value === undefined || value === null || value === '')) {\n        this.errors.push(`Required environment variable '${key}' is missing`);\n        continue;\n      }\n\n      // Skip validation if value is not provided and not required\n      if (!value && !rules.required) {\n        continue;\n      }\n\n      // Type validation\n      if (!this.validateType(value, rules.type, key)) {\n        continue;\n      }\n\n      // Length validation\n      if (rules.minLength !== null && value.length < rules.minLength) {\n        this.errors.push(`Environment variable '${key}' must be at least ${rules.minLength} characters long`);\n      }\n\n      if (rules.maxLength !== null && value.length > rules.maxLength) {\n        this.errors.push(`Environment variable '${key}' must be no more than ${rules.maxLength} characters long`);\n      }\n\n      // Numeric validation\n      if (rules.type === 'number') {\n        const numValue = Number(value);\n        if (rules.min !== null && numValue < rules.min) {\n          this.errors.push(`Environment variable '${key}' must be at least ${rules.min}`);\n        }\n        if (rules.max !== null && numValue > rules.max) {\n          this.errors.push(`Environment variable '${key}' must be no more than ${rules.max}`);\n        }\n      }\n\n      // Pattern validation\n      if (rules.pattern && !rules.pattern.test(value)) {\n        this.errors.push(`Environment variable '${key}' does not match required pattern`);\n      }\n\n      // Allowed values validation\n      if (rules.allowedValues && !rules.allowedValues.includes(value)) {\n        this.errors.push(`Environment variable '${key}' must be one of: ${rules.allowedValues.join(', ')}`);\n      }\n\n      // Custom validation\n      if (rules.customValidator && !rules.customValidator(value)) {\n        this.errors.push(`Environment variable '${key}' failed custom validation`);\n      }\n    }\n\n    return this.errors.length === 0;\n  }\n\n  /**\n   * Validate data type\n   * @param {*} value - Value to validate\n   * @param {string} type - Expected type\n   * @param {string} key - Environment variable key\n   * @returns {boolean} Type validation result\n   */\n  validateType(value, type, key) {\n    switch (type) {\n    case 'string':\n      return typeof value === 'string';\n    case 'number':\n      if (isNaN(Number(value))) {\n        this.errors.push(`Environment variable '${key}' must be a valid number`);\n        return false;\n      }\n      return true;\n    case 'boolean':\n      if (!['true', 'false', '1', '0'].includes(value.toLowerCase())) {\n        this.errors.push(`Environment variable '${key}' must be a boolean (true/false)`);\n        return false;\n      }\n      return true;\n    case 'url':\n      try {\n        new URL(value);\n        return true;\n      } catch {\n        this.errors.push(`Environment variable '${key}' must be a valid URL`);\n        return false;\n      }\n    case 'email':\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailPattern.test(value)) {\n        this.errors.push(`Environment variable '${key}' must be a valid email address`);\n        return false;\n      }\n      return true;\n    default:\n      return true;\n    }\n  }\n\n  /**\n   * Get validation errors\n   * @returns {Array} Array of error messages\n   */\n  getErrors() {\n    return this.errors;\n  }\n\n  /**\n   * Get validation summary\n   * @returns {Object} Validation summary\n   */\n  getSummary() {\n    return {\n      total: this.validations.size,\n      passed: this.validations.size - this.errors.length,\n      failed: this.errors.length,\n      errors: this.errors\n    };\n  }\n\n  /**\n   * Generate environment documentation\n   * @returns {string} Markdown documentation\n   */\n  generateDocumentation() {\n    let doc = '# Environment Variables\\n\\n';\n    doc += 'This document describes all environment variables used by the Tripvar server.\\n\\n';\n\n    for (const [key, rules] of this.validations) {\n      doc += `## ${key}\\n\\n`;\n      doc += `**Description:** ${rules.description || 'No description provided'}\\n\\n`;\n      doc += `**Required:** ${rules.required ? 'Yes' : 'No'}\\n\\n`;\n      doc += `**Type:** ${rules.type}\\n\\n`;\n\n      if (rules.allowedValues) {\n        doc += `**Allowed Values:** ${rules.allowedValues.join(', ')}\\n\\n`;\n      }\n\n      if (rules.minLength !== null || rules.maxLength !== null) {\n        doc += '**Length:** ';\n        if (rules.minLength !== null && rules.maxLength !== null) {\n          doc += `${rules.minLength}-${rules.maxLength} characters\\n\\n`;\n        } else if (rules.minLength !== null) {\n          doc += `minimum ${rules.minLength} characters\\n\\n`;\n        } else {\n          doc += `maximum ${rules.maxLength} characters\\n\\n`;\n        }\n      }\n\n      if (rules.pattern) {\n        doc += `**Pattern:** \\`${rules.pattern.source}\\`\\n\\n`;\n      }\n\n      doc += '---\\n\\n';\n    }\n\n    return doc;\n  }\n}\n\n// Create validator instance with all required validations\nconst envValidator = new EnvironmentValidator();\n\n// Server configuration\nenvValidator.addValidation('NODE_ENV', {\n  required: true,\n  type: 'string',\n  allowedValues: ['development', 'production', 'test'],\n  description: 'Application environment'\n});\n\nenvValidator.addValidation('PORT', {\n  required: true,\n  type: 'number',\n  min: 1,\n  max: 65535,\n  description: 'Server port number'\n});\n\nenvValidator.addValidation('HOST', {\n  required: false,\n  type: 'string',\n  description: 'Server host address'\n});\n\n// Database configuration\nenvValidator.addValidation('MONGODB_URI', {\n  required: true,\n  type: 'url',\n  pattern: /^mongodb(\\+srv)?:\\/\\//,\n  description: 'MongoDB connection URI'\n});\n\nenvValidator.addValidation('DB_MAX_POOL_SIZE', {\n  required: false,\n  type: 'number',\n  min: 1,\n  max: 100,\n  description: 'Maximum database connection pool size'\n});\n\n// Redis configuration\nenvValidator.addValidation('REDIS_URL', {\n  required: false,\n  type: 'url',\n  pattern: /^redis:\\/\\//,\n  description: 'Redis connection URL'\n});\n\n// JWT configuration\nenvValidator.addValidation('JWT_SECRET', {\n  required: true,\n  type: 'string',\n  minLength: 32,\n  description: 'JWT secret key for token signing'\n});\n\nenvValidator.addValidation('JWT_EXPIRES_IN', {\n  required: false,\n  type: 'string',\n  pattern: /^\\d+[smhd]$/,\n  description: 'JWT token expiration time'\n});\n\n// Security configuration\nenvValidator.addValidation('ALLOWED_ORIGINS', {\n  required: false,\n  type: 'string',\n  description: 'Comma-separated list of allowed CORS origins'\n});\n\nenvValidator.addValidation('CORS_CREDENTIALS', {\n  required: false,\n  type: 'boolean',\n  description: 'Enable CORS credentials'\n});\n\nenvValidator.addValidation('BCRYPT_ROUNDS', {\n  required: false,\n  type: 'number',\n  min: 10,\n  max: 15,\n  description: 'Number of bcrypt rounds for password hashing'\n});\n\n// Logging configuration\nenvValidator.addValidation('LOG_LEVEL', {\n  required: false,\n  type: 'string',\n  allowedValues: ['error', 'warn', 'info', 'debug'],\n  description: 'Logging level'\n});\n\n// SSL configuration\nenvValidator.addValidation('SSL_ENABLED', {\n  required: false,\n  type: 'boolean',\n  description: 'Enable SSL/TLS'\n});\n\n// Email configuration\nenvValidator.addValidation('SMTP_HOST', {\n  required: false,\n  type: 'string',\n  description: 'SMTP server hostname'\n});\n\nenvValidator.addValidation('SMTP_PORT', {\n  required: false,\n  type: 'number',\n  min: 1,\n  max: 65535,\n  description: 'SMTP server port'\n});\n\nenvValidator.addValidation('FROM_EMAIL', {\n  required: false,\n  type: 'email',\n  description: 'Default sender email address'\n});\n\n// External APIs\nenvValidator.addValidation('GOOGLE_MAPS_API_KEY', {\n  required: false,\n  type: 'string',\n  description: 'Google Maps API key'\n});\n\nenvValidator.addValidation('STRIPE_SECRET_KEY', {\n  required: false,\n  type: 'string',\n  pattern: /^sk_(test_|live_)/,\n  description: 'Stripe secret key'\n});\n\n// File upload configuration\nenvValidator.addValidation('MAX_FILE_SIZE', {\n  required: false,\n  type: 'number',\n  min: 1024,\n  max: 104857600, // 100MB\n  description: 'Maximum file upload size in bytes'\n});\n\n// Monitoring\nenvValidator.addValidation('SENTRY_DSN', {\n  required: false,\n  type: 'url',\n  description: 'Sentry DSN for error tracking'\n});\n\n/**\n * Validate environment variables and exit if validation fails\n */\nfunction validateEnvironment() {\n  const isValid = envValidator.validate();\n\n  if (!isValid) {\n    const summary = envValidator.getSummary();\n\n    // Use console.error instead of logger to avoid circular dependency\n    console.error('Environment validation failed', {\n      total: summary.total,\n      passed: summary.passed,\n      failed: summary.failed,\n      errors: summary.errors\n    });\n\n    console.error('\\n❌ Environment validation failed:');\n    summary.errors.forEach(err => console.error(`  - ${err}`));\n    console.error('\\nPlease check your environment variables and try again.\\n');\n\n    process.exit(1);\n  }\n\n  console.log('✅ Environment validation passed');\n}\n\nmodule.exports = {\n  EnvironmentValidator,\n  envValidator,\n  validateEnvironment\n};"],"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","ignoreList":[]}