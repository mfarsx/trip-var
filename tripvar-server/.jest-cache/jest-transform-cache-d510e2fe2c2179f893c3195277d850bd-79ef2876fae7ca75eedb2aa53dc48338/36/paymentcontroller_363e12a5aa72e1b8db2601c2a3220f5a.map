{"version":3,"names":["cov_18smrsmg8w","actualCoverage","Booking","s","require","ValidationError","NotFoundError","ConflictError","successResponse","info","error","simulatePaymentProcessing","paymentData","f","Promise","resolve","setTimeout","success","Math","random","b","paymentIntentId","Date","now","toString","substr","transactionId","amount","currency","status","errorCode","simulateRefundProcessing","refundData","refundId","processPayment","req","res","next","bookingId","params","paymentMethod","paymentDetails","body","userId","user","id","booking","findById","populate","paymentStatus","paymentResult","totalAmount","save","json","err","message","getPaymentStatus","select","_id","destination","createdAt","processRefund","reason","role","refundAmount","calculateRefund","refundResult","refundedAt","cancellationReason","getPaymentHistory","page","limit","query","skip","parseInt","bookings","find","sort","total","countDocuments","stats","aggregate","$match","$group","totalSpent","$sum","totalRefunded","$ifNull","paidBookings","$cond","$eq","refundedBookings","paymentStats","length","pagination","current","pages","ceil","module","exports"],"sources":["payment.controller.js"],"sourcesContent":["const Booking = require('../public/models/booking.model');\nconst { ValidationError, NotFoundError, ConflictError } = require('../utils/errors');\nconst { successResponse } = require('../utils/response');\nconst { info, error } = require('../utils/logger');\n\n// Simulate payment processing (replace with real payment provider integration)\nconst simulatePaymentProcessing = async(paymentData) => {\n  // Simulate processing delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Simulate 95% success rate\n  const success = Math.random() > 0.05;\n\n  if (success) {\n    return {\n      success: true,\n      paymentIntentId: `pi_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      transactionId: `txn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      amount: paymentData.amount,\n      currency: 'USD',\n      status: 'succeeded'\n    };\n  } else {\n    return {\n      success: false,\n      error: 'Payment processing failed',\n      errorCode: 'PAYMENT_FAILED'\n    };\n  }\n};\n\n// Simulate refund processing (replace with real payment provider integration)\nconst simulateRefundProcessing = async(refundData) => {\n  // Simulate processing delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Simulate 98% success rate for refunds\n  const success = Math.random() > 0.02;\n\n  if (success) {\n    return {\n      success: true,\n      refundId: `re_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      amount: refundData.amount,\n      currency: 'USD',\n      status: 'succeeded'\n    };\n  } else {\n    return {\n      success: false,\n      error: 'Refund processing failed',\n      errorCode: 'REFUND_FAILED'\n    };\n  }\n};\n\n// Process payment for a booking\nconst processPayment = async(req, res, next) => {\n  try {\n    const { bookingId } = req.params;\n    const { paymentMethod, paymentDetails } = req.body;\n    const userId = req.user.id;\n\n    // Find the booking\n    const booking = await Booking.findById(bookingId).populate('destination');\n\n    if (!booking) {\n      throw new NotFoundError('Booking not found');\n    }\n\n    // Check if user owns this booking\n    if (booking.user.toString() !== userId) {\n      throw new ValidationError('Access denied');\n    }\n\n    // Check if booking is already paid\n    if (booking.paymentStatus === 'paid') {\n      throw new ConflictError('Booking is already paid');\n    }\n\n    // Check if booking is cancelled\n    if (booking.status === 'cancelled') {\n      throw new ConflictError('Cannot process payment for cancelled booking');\n    }\n\n    // Simulate payment processing\n    // In a real application, you would integrate with payment providers like Stripe, PayPal, etc.\n    const paymentResult = await simulatePaymentProcessing({\n      amount: booking.totalAmount,\n      paymentMethod,\n      paymentDetails,\n      bookingId\n    });\n\n    if (paymentResult.success) {\n      // Update booking with payment information\n      booking.paymentStatus = 'paid';\n      booking.paymentIntentId = paymentResult.paymentIntentId;\n      booking.paymentMethod = paymentMethod;\n\n      await booking.save();\n\n      info('Payment processed successfully', {\n        bookingId,\n        userId,\n        amount: booking.totalAmount,\n        paymentMethod\n      });\n\n      res.json(\n        successResponse(\n          {\n            booking,\n            paymentResult\n          },\n          'Payment processed successfully'\n        )\n      );\n    } else {\n      // Payment failed\n      booking.paymentStatus = 'failed';\n      await booking.save();\n\n      throw new ValidationError(paymentResult.error || 'Payment processing failed');\n    }\n\n  } catch (err) {\n    error('Error processing payment', { error: err.message, bookingId: req.params.bookingId });\n    next(err);\n  }\n};\n\n// Get payment status for a booking\nconst getPaymentStatus = async(req, res, next) => {\n  try {\n    const { bookingId } = req.params;\n    const userId = req.user.id;\n\n    const booking = await Booking.findById(bookingId)\n      .select('paymentStatus paymentMethod totalAmount paymentIntentId createdAt')\n      .populate('destination', 'title');\n\n    if (!booking) {\n      throw new NotFoundError('Booking not found');\n    }\n\n    // Check if user owns this booking\n    if (booking.user.toString() !== userId) {\n      throw new ValidationError('Access denied');\n    }\n\n    res.json(\n      successResponse(\n        {\n          booking: {\n            id: booking._id,\n            destination: booking.destination,\n            paymentStatus: booking.paymentStatus,\n            paymentMethod: booking.paymentMethod,\n            totalAmount: booking.totalAmount,\n            paymentIntentId: booking.paymentIntentId,\n            createdAt: booking.createdAt\n          }\n        },\n        'Payment status retrieved successfully'\n      )\n    );\n\n  } catch (err) {\n    error('Error fetching payment status', { error: err.message, bookingId: req.params.bookingId });\n    next(err);\n  }\n};\n\n// Refund a booking\nconst processRefund = async(req, res, next) => {\n  try {\n    const { bookingId } = req.params;\n    const { reason } = req.body;\n    const userId = req.user.id;\n\n    const booking = await Booking.findById(bookingId);\n\n    if (!booking) {\n      throw new NotFoundError('Booking not found');\n    }\n\n    // Check if user owns this booking or is admin\n    if (booking.user.toString() !== userId && req.user.role !== 'admin') {\n      throw new ValidationError('Access denied');\n    }\n\n    // Check if booking is paid\n    if (booking.paymentStatus !== 'paid') {\n      throw new ConflictError('Cannot refund unpaid booking');\n    }\n\n    // Check if booking is already refunded\n    if (booking.paymentStatus === 'refunded') {\n      throw new ConflictError('Booking is already refunded');\n    }\n\n    // Calculate refund amount\n    const refundAmount = booking.calculateRefund();\n\n    if (refundAmount === 0) {\n      throw new ValidationError('No refund available for this booking');\n    }\n\n    // Simulate refund processing\n    const refundResult = await simulateRefundProcessing({\n      paymentIntentId: booking.paymentIntentId,\n      amount: refundAmount,\n      reason\n    });\n\n    if (refundResult.success) {\n      // Update booking with refund information\n      booking.paymentStatus = 'refunded';\n      booking.refundAmount = refundAmount;\n      booking.refundedAt = new Date();\n      booking.cancellationReason = reason;\n\n      await booking.save();\n\n      info('Refund processed successfully', {\n        bookingId,\n        userId,\n        refundAmount,\n        reason\n      });\n\n      res.json(\n        successResponse(\n          {\n            booking,\n            refundResult\n          },\n          'Refund processed successfully'\n        )\n      );\n    } else {\n      throw new ValidationError(refundResult.error || 'Refund processing failed');\n    }\n\n  } catch (err) {\n    error('Error processing refund', { error: err.message, bookingId: req.params.bookingId });\n    next(err);\n  }\n};\n\n// Get payment history for a user\nconst getPaymentHistory = async(req, res, next) => {\n  try {\n    const userId = req.user.id;\n    const { page = 1, limit = 10, status } = req.query;\n\n    // Build query\n    const query = { user: userId };\n    if (status) {\n      query.paymentStatus = status;\n    }\n\n    // Calculate pagination\n    const skip = (parseInt(page, 10) - 1) * parseInt(limit, 10);\n\n    // Get bookings with payment information\n    const bookings = await Booking.find(query)\n      .select('paymentStatus paymentMethod totalAmount paymentIntentId createdAt refundAmount refundedAt')\n      .populate('destination', 'title location imageUrl')\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(parseInt(limit, 10));\n\n    // Get total count\n    const total = await Booking.countDocuments(query);\n\n    // Calculate payment statistics\n    const stats = await Booking.aggregate([\n      { $match: { user: userId } },\n      {\n        $group: {\n          _id: null,\n          totalSpent: { $sum: '$totalAmount' },\n          totalRefunded: { $sum: { $ifNull: ['$refundAmount', 0] } },\n          paidBookings: {\n            $sum: { $cond: [{ $eq: ['$paymentStatus', 'paid'] }, 1, 0] }\n          },\n          refundedBookings: {\n            $sum: { $cond: [{ $eq: ['$paymentStatus', 'refunded'] }, 1, 0] }\n          }\n        }\n      }\n    ]);\n\n    const paymentStats = stats.length > 0 ? stats[0] : {\n      totalSpent: 0,\n      totalRefunded: 0,\n      paidBookings: 0,\n      refundedBookings: 0\n    };\n\n    res.json(\n      successResponse(\n        {\n          bookings,\n          paymentStats,\n          pagination: {\n            current: parseInt(page, 10),\n            pages: Math.ceil(total / parseInt(limit, 10)),\n            total\n          }\n        },\n        'Payment history retrieved successfully'\n      )\n    );\n\n  } catch (err) {\n    error('Error fetching payment history', { error: err.message, userId: req.user?.id });\n    next(err);\n  }\n};\n\nmodule.exports = {\n  processPayment,\n  getPaymentStatus,\n  processRefund,\n  getPaymentHistory\n};"],"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","ignoreList":[]}