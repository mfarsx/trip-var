{"version":3,"names":["cov_8ubi9qwn4","actualCoverage","successResponse","paginatedResponse","s","require","asyncHandler","ValidationError","BaseController","sendSuccess","res","data","b","message","statusCode","f","status","json","sendPaginated","page","limit","total","validateRequestBody","body","requiredFields","missingFields","filter","field","undefined","length","join","validateRequestParams","params","requiredParams","missingParams","param","sanitizeRequestBody","allowedFields","sanitized","Object","keys","forEach","key","includes","trim","getPaginationParams","query","Math","max","parseInt","min","skip","getSortParams","defaultSort","sortBy","sortOrder","providedField","getFilterParams","allowedFilters","filters","handleService","serviceMethod","args","req","next","result","error","handleServiceWithResponse","responseHandler","createCRUDOperations","service","resourceName","getAll","getAllowedFilters","getAllowedSortFields","sort","getById","id","create","sanitizedBody","getAllowedFields","update","delete","module","exports"],"sources":["base.controller.js"],"sourcesContent":["const { successResponse, paginatedResponse } = require('../utils/response');\nconst { asyncHandler } = require('../utils/asyncHandler');\nconst { ValidationError } = require('../utils/errors');\n\n/**\n * Base controller class with common functionality\n */\nclass BaseController {\n  /**\n   * Send success response\n   * @param {Object} res - Express response object\n   * @param {*} data - Response data\n   * @param {string} message - Success message\n   * @param {number} statusCode - HTTP status code\n   */\n  sendSuccess(res, data = null, message = 'Success', statusCode = 200) {\n    res.status(statusCode).json(successResponse(data, message));\n  }\n\n  /**\n   * Send paginated response\n   * @param {Object} res - Express response object\n   * @param {Array} data - Response data\n   * @param {number} page - Current page\n   * @param {number} limit - Items per page\n   * @param {number} total - Total items\n   * @param {string} message - Success message\n   */\n  sendPaginated(res, data, page, limit, total) {\n    res.status(200).json(paginatedResponse(data, page, limit, total));\n  }\n\n  /**\n   * Validate request body\n   * @param {Object} body - Request body\n   * @param {Array<string>} requiredFields - Required field names\n   * @throws {ValidationError} If validation fails\n   */\n  validateRequestBody(body, requiredFields) {\n    const missingFields = requiredFields.filter(field =>\n      body[field] === undefined || body[field] === null || body[field] === ''\n    );\n\n    if (missingFields.length > 0) {\n      throw new ValidationError(\n        `Missing required fields: ${missingFields.join(', ')}`,\n        { missingFields }\n      );\n    }\n  }\n\n  /**\n   * Validate request parameters\n   * @param {Object} params - Request parameters\n   * @param {Array<string>} requiredParams - Required parameter names\n   * @throws {ValidationError} If validation fails\n   */\n  validateRequestParams(params, requiredParams) {\n    const missingParams = requiredParams.filter(param =>\n      !params[param] || params[param] === ''\n    );\n\n    if (missingParams.length > 0) {\n      throw new ValidationError(\n        `Missing required parameters: ${missingParams.join(', ')}`,\n        { missingParams }\n      );\n    }\n  }\n\n  /**\n   * Sanitize request body\n   * @param {Object} body - Request body\n   * @param {Array<string>} allowedFields - Allowed field names\n   * @returns {Object} Sanitized body\n   */\n  sanitizeRequestBody(body, allowedFields) {\n    const sanitized = {};\n\n    Object.keys(body).forEach(key => {\n      if (allowedFields.includes(key)) {\n        // Basic sanitization\n        if (typeof body[key] === 'string') {\n          sanitized[key] = body[key].trim();\n        } else {\n          sanitized[key] = body[key];\n        }\n      }\n    });\n\n    return sanitized;\n  }\n\n  /**\n   * Get pagination parameters from query\n   * @param {Object} query - Request query object\n   * @returns {Object} Pagination parameters\n   */\n  getPaginationParams(query) {\n    const page = Math.max(1, parseInt(query.page, 10) || 1);\n    const limit = Math.min(100, Math.max(1, parseInt(query.limit, 10) || 10));\n    const skip = (page - 1) * limit;\n\n    return { page, limit, skip };\n  }\n\n  /**\n   * Get sorting parameters from query\n   * @param {Object} query - Request query object\n   * @param {Array<string>} allowedFields - Allowed sort fields\n   * @param {string} defaultSort - Default sort field\n   * @returns {Object} Sort parameters\n   */\n  getSortParams(query, allowedFields = [], defaultSort = 'createdAt') {\n    const sortBy = query.sortBy || defaultSort;\n    const sortOrder = query.sortOrder === 'asc' ? 1 : -1;\n\n    // Validate sort field\n    if (allowedFields.length > 0 && !allowedFields.includes(sortBy)) {\n      throw new ValidationError(\n        `Invalid sort field. Allowed fields: ${allowedFields.join(', ')}`,\n        { allowedFields, providedField: sortBy }\n      );\n    }\n\n    return { sortBy, sortOrder };\n  }\n\n  /**\n   * Get filter parameters from query\n   * @param {Object} query - Request query object\n   * @param {Array<string>} allowedFilters - Allowed filter fields\n   * @returns {Object} Filter parameters\n   */\n  getFilterParams(query, allowedFilters = []) {\n    const filters = {};\n\n    allowedFilters.forEach(field => {\n      if (query[field] !== undefined && query[field] !== '') {\n        filters[field] = query[field];\n      }\n    });\n\n    return filters;\n  }\n\n  /**\n   * Handle service method execution\n   * @param {Function} serviceMethod - Service method to execute\n   * @param {Array} args - Arguments to pass to service method\n   * @returns {Function} Express middleware function\n   */\n  handleService(serviceMethod, ...args) {\n    return asyncHandler(async(req, res, next) => {\n      try {\n        const result = await serviceMethod(...args);\n        this.sendSuccess(res, result);\n      } catch (error) {\n        next(error);\n      }\n    });\n  }\n\n  /**\n   * Handle service method with custom response\n   * @param {Function} serviceMethod - Service method to execute\n   * @param {Function} responseHandler - Custom response handler\n   * @param {Array} args - Arguments to pass to service method\n   * @returns {Function} Express middleware function\n   */\n  handleServiceWithResponse(serviceMethod, responseHandler, ...args) {\n    return asyncHandler(async(req, res, next) => {\n      try {\n        const result = await serviceMethod(...args);\n        responseHandler(res, result);\n      } catch (error) {\n        next(error);\n      }\n    });\n  }\n\n  /**\n   * Create CRUD operations for a service\n   * @param {Object} service - Service instance\n   * @param {string} resourceName - Name of the resource\n   * @returns {Object} CRUD operation methods\n   */\n  createCRUDOperations(service, resourceName) {\n    return {\n      // Get all resources\n      getAll: asyncHandler(async(req, res, next) => {\n        try {\n          const { page, limit, skip } = this.getPaginationParams(req.query);\n          const filters = this.getFilterParams(req.query, service.getAllowedFilters?.() || []);\n          const { sortBy, sortOrder } = this.getSortParams(req.query, service.getAllowedSortFields?.() || []);\n\n          const result = await service.getAll({\n            page,\n            limit,\n            skip,\n            filters,\n            sort: { [sortBy]: sortOrder }\n          });\n\n          this.sendPaginated(res, result.data, page, limit, result.total);\n        } catch (error) {\n          next(error);\n        }\n      }),\n\n      // Get resource by ID\n      getById: asyncHandler(async(req, res, next) => {\n        try {\n          this.validateRequestParams(req.params, ['id']);\n          const result = await service.getById(req.params.id);\n          this.sendSuccess(res, result);\n        } catch (error) {\n          next(error);\n        }\n      }),\n\n      // Create new resource\n      create: asyncHandler(async(req, res, next) => {\n        try {\n          const sanitizedBody = this.sanitizeRequestBody(req.body, service.getAllowedFields?.() || []);\n          const result = await service.create(sanitizedBody);\n          this.sendSuccess(res, result, `${resourceName} created successfully`, 201);\n        } catch (error) {\n          next(error);\n        }\n      }),\n\n      // Update resource\n      update: asyncHandler(async(req, res, next) => {\n        try {\n          this.validateRequestParams(req.params, ['id']);\n          const sanitizedBody = this.sanitizeRequestBody(req.body, service.getAllowedFields?.() || []);\n          const result = await service.update(req.params.id, sanitizedBody);\n          this.sendSuccess(res, result, `${resourceName} updated successfully`);\n        } catch (error) {\n          next(error);\n        }\n      }),\n\n      // Delete resource\n      delete: asyncHandler(async(req, res, next) => {\n        try {\n          this.validateRequestParams(req.params, ['id']);\n          await service.delete(req.params.id);\n          this.sendSuccess(res, null, `${resourceName} deleted successfully`, 204);\n        } catch (error) {\n          next(error);\n        }\n      })\n    };\n  }\n}\n\nmodule.exports = BaseController;"],"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","ignoreList":[]}