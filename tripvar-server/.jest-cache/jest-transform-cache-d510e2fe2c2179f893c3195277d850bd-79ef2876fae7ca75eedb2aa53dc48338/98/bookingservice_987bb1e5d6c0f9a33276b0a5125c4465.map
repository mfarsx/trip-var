{"version":3,"names":["cov_qleba8qff","actualCoverage","BaseService","s","require","BookingService","constructor","repository","f","createBooking","bookingData","overlapping","findOverlappingBookings","destination","checkIn","checkOut","length","b","Error","create","error","getBookingsByUser","userId","findByUser","getBookingsByDestination","destinationId","findByDestination","getBookingsByStatus","status","findByStatus","getActiveBookings","findActive","updateBookingStatus","bookingId","updateStatus","cancelBooking","booking","findById","user","toString","getBookingStatistics","getStatistics","getRevenueByDateRange","startDate","endDate","checkAvailability","excludeBookingId","available","conflictingBookings","getUserBookingHistory","page","limit","bookings","startIndex","endIndex","paginatedBookings","slice","pagination","total","pages","Math","ceil","module","exports"],"sources":["booking.service.js"],"sourcesContent":["const BaseService = require('./base.service');\n\nclass BookingService extends BaseService {\n  constructor(repository) {\n    super(repository);\n  }\n\n  // Create a new booking\n  async createBooking(bookingData) {\n    try {\n      // Check for overlapping bookings\n      const overlapping = await this.repository.findOverlappingBookings(\n        bookingData.destination,\n        bookingData.checkIn,\n        bookingData.checkOut\n      );\n\n      if (overlapping.length > 0) {\n        throw new Error('Destination is not available for the selected dates');\n      }\n\n      return await this.repository.create(bookingData);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get bookings by user\n  async getBookingsByUser(userId) {\n    try {\n      return await this.repository.findByUser(userId);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get bookings by destination\n  async getBookingsByDestination(destinationId) {\n    try {\n      return await this.repository.findByDestination(destinationId);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get bookings by status\n  async getBookingsByStatus(status) {\n    try {\n      return await this.repository.findByStatus(status);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get active bookings\n  async getActiveBookings() {\n    try {\n      return await this.repository.findActive();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Update booking status\n  async updateBookingStatus(bookingId, status) {\n    try {\n      return await this.repository.updateStatus(bookingId, status);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Cancel booking\n  async cancelBooking(bookingId, userId) {\n    try {\n      const booking = await this.repository.findById(bookingId);\n      \n      if (!booking) {\n        throw new Error('Booking not found');\n      }\n\n      if (booking.user.toString() !== userId) {\n        throw new Error('Unauthorized to cancel this booking');\n      }\n\n      if (booking.status === 'cancelled') {\n        throw new Error('Booking is already cancelled');\n      }\n\n      return await this.repository.updateStatus(bookingId, 'cancelled');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get booking statistics\n  async getBookingStatistics() {\n    try {\n      return await this.repository.getStatistics();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get revenue by date range\n  async getRevenueByDateRange(startDate, endDate) {\n    try {\n      return await this.repository.getRevenueByDateRange(startDate, endDate);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Check availability\n  async checkAvailability(destinationId, checkIn, checkOut, excludeBookingId = null) {\n    try {\n      const overlapping = await this.repository.findOverlappingBookings(\n        destinationId,\n        checkIn,\n        checkOut,\n        excludeBookingId\n      );\n\n      return {\n        available: overlapping.length === 0,\n        conflictingBookings: overlapping.length\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get user booking history\n  async getUserBookingHistory(userId, page = 1, limit = 10) {\n    try {\n      const bookings = await this.repository.findByUser(userId);\n      const startIndex = (page - 1) * limit;\n      const endIndex = startIndex + limit;\n      \n      const paginatedBookings = bookings.slice(startIndex, endIndex);\n      \n      return {\n        bookings: paginatedBookings,\n        pagination: {\n          page,\n          limit,\n          total: bookings.length,\n          pages: Math.ceil(bookings.length / limit)\n        }\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nmodule.exports = BookingService;"],"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","ignoreList":[]}