b10b4c8dce11c5a284e11cfd9c981841
const request = require('supertest');
const app = require('./app.test');
const {
  setupTestEnvironment,
  cleanupTestEnvironment,
  expectSuccessResponse
} = require('./setup');
describe('Health Check API', () => {
  beforeAll(async () => {
    await setupTestEnvironment();
  });
  afterAll(async () => {
    await cleanupTestEnvironment();
  });
  describe('GET /health', () => {
    it('should return health status successfully', async () => {
      const response = await request(app).get('/health').expect(200);
      expect(response.body).toHaveProperty('status');
      expect(response.body).toHaveProperty('timestamp');
      expect(response.body).toHaveProperty('uptime');
      expect(response.body).toHaveProperty('environment');
      expect(response.body.status).toBe('healthy');
    });
    it('should include system information', async () => {
      const response = await request(app).get('/health').expect(200);
      expect(response.body).toHaveProperty('system');
      expect(response.body.system).toHaveProperty('platform');
      expect(response.body.system).toHaveProperty('nodeVersion');
      expect(response.body.system).toHaveProperty('memory');
    });
    it('should include database status', async () => {
      const response = await request(app).get('/health').expect(200);
      expect(response.body).toHaveProperty('database');
      expect(response.body.database).toHaveProperty('status');
      expect(response.body.database).toHaveProperty('connection');
    });
    it('should include Redis status', async () => {
      const response = await request(app).get('/health').expect(200);
      expect(response.body).toHaveProperty('redis');
      expect(response.body.redis).toHaveProperty('status');
    });
    it('should include service status', async () => {
      const response = await request(app).get('/health').expect(200);
      expect(response.body).toHaveProperty('services');
      expect(response.body.services).toHaveProperty('api');
      expect(response.body.services).toHaveProperty('websocket');
    });
  });
  describe('GET /health/detailed', () => {
    it('should return detailed health information', async () => {
      const response = await request(app).get('/health/detailed').expect(200);
      expect(response.body).toHaveProperty('status');
      expect(response.body).toHaveProperty('timestamp');
      expect(response.body).toHaveProperty('uptime');
      expect(response.body).toHaveProperty('environment');
      expect(response.body).toHaveProperty('version');
      expect(response.body).toHaveProperty('build');
    });
    it('should include detailed system metrics', async () => {
      const response = await request(app).get('/health/detailed').expect(200);
      expect(response.body).toHaveProperty('metrics');
      expect(response.body.metrics).toHaveProperty('memory');
      expect(response.body.metrics).toHaveProperty('cpu');
      expect(response.body.metrics).toHaveProperty('disk');
    });
    it('should include database metrics', async () => {
      const response = await request(app).get('/health/detailed').expect(200);
      expect(response.body).toHaveProperty('database');
      expect(response.body.database).toHaveProperty('status');
      expect(response.body.database).toHaveProperty('connection');
      expect(response.body.database).toHaveProperty('metrics');
    });
    it('should include Redis metrics', async () => {
      const response = await request(app).get('/health/detailed').expect(200);
      expect(response.body).toHaveProperty('redis');
      expect(response.body.redis).toHaveProperty('status');
      expect(response.body.redis).toHaveProperty('metrics');
    });
  });
  describe('GET /health/ready', () => {
    it('should return ready status', async () => {
      const response = await request(app).get('/health/ready').expect(200);
      expect(response.body).toHaveProperty('status');
      expect(response.body).toHaveProperty('ready');
      expect(response.body.ready).toBe(true);
    });
    it('should include readiness checks', async () => {
      const response = await request(app).get('/health/ready').expect(200);
      expect(response.body).toHaveProperty('checks');
      expect(response.body.checks).toHaveProperty('database');
      expect(response.body.checks).toHaveProperty('redis');
      expect(response.body.checks).toHaveProperty('services');
    });
  });
  describe('GET /health/live', () => {
    it('should return liveness status', async () => {
      const response = await request(app).get('/health/live').expect(200);
      expect(response.body).toHaveProperty('status');
      expect(response.body).toHaveProperty('alive');
      expect(response.body.alive).toBe(true);
    });
    it('should include basic system information', async () => {
      const response = await request(app).get('/health/live').expect(200);
      expect(response.body).toHaveProperty('timestamp');
      expect(response.body).toHaveProperty('uptime');
    });
  });
  describe('Health Check Error Handling', () => {
    it('should handle database connection errors gracefully', async () => {
      // This test would require mocking the database connection
      // For now, we'll test that the health endpoint responds
      const response = await request(app).get('/health').expect(200);
      expect(response.body).toHaveProperty('status');
    });
    it('should handle Redis connection errors gracefully', async () => {
      // This test would require mocking the Redis connection
      // For now, we'll test that the health endpoint responds
      const response = await request(app).get('/health').expect(200);
      expect(response.body).toHaveProperty('status');
    });
  });
  describe('Health Check Performance', () => {
    it('should respond quickly to health checks', async () => {
      const startTime = Date.now();
      const response = await request(app).get('/health').expect(200);
      const endTime = Date.now();
      const responseTime = endTime - startTime;

      // Health checks should respond within 100ms
      expect(responseTime).toBeLessThan(100);
      expect(response.body.status).toBe('healthy');
    });
    it('should handle multiple concurrent health checks', async () => {
      const promises = Array(10).fill().map(() => request(app).get('/health'));
      const responses = await Promise.all(promises);
      responses.forEach(response => {
        expect(response.status).toBe(200);
        expect(response.body.status).toBe('healthy');
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,