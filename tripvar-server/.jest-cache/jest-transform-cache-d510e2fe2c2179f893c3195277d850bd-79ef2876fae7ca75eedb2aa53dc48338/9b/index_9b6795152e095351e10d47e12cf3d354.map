{"version":3,"names":["cov_23wiiwq41x","actualCoverage","Container","constructor","f","s","services","Map","singletons","factories","register","name","service","options","b","singleton","dependencies","set","registerFactory","factory","registerInstance","instance","get","has","createFromFactory","createFromService","Error","serviceConfig","resolvedDependencies","map","dep","factoryConfig","remove","delete","clear","getServiceNames","keys","container","module","exports"],"sources":["index.js"],"sourcesContent":["/**\n * Simple Dependency Injection Container\n */\nclass Container {\n  constructor() {\n    this.services = new Map();\n    this.singletons = new Map();\n    this.factories = new Map();\n  }\n\n  /**\n   * Register a service\n   * @param {string} name - Service name\n   * @param {Function|Object} service - Service constructor or instance\n   * @param {Object} options - Registration options\n   */\n  register(name, service, options = {}) {\n    const { singleton = false, dependencies = [] } = options;\n\n    this.services.set(name, {\n      service,\n      dependencies,\n      singleton\n    });\n  }\n\n  /**\n   * Register a factory function\n   * @param {string} name - Factory name\n   * @param {Function} factory - Factory function\n   * @param {Array} dependencies - Factory dependencies\n   */\n  registerFactory(name, factory, dependencies = []) {\n    this.factories.set(name, {\n      factory,\n      dependencies\n    });\n  }\n\n  /**\n   * Register a singleton instance\n   * @param {string} name - Singleton name\n   * @param {*} instance - Singleton instance\n   */\n  registerInstance(name, instance) {\n    this.singletons.set(name, instance);\n  }\n\n  /**\n   * Get a service instance\n   * @param {string} name - Service name\n   * @returns {*} Service instance\n   */\n  get(name) {\n    // Check if it's a singleton instance\n    if (this.singletons.has(name)) {\n      return this.singletons.get(name);\n    }\n\n    // Check if it's a factory\n    if (this.factories.has(name)) {\n      return this.createFromFactory(name);\n    }\n\n    // Check if it's a registered service\n    if (this.services.has(name)) {\n      return this.createFromService(name);\n    }\n\n    throw new Error(`Service '${name}' not found`);\n  }\n\n  /**\n   * Create instance from service registration\n   * @param {string} name - Service name\n   * @returns {*} Service instance\n   */\n  createFromService(name) {\n    const serviceConfig = this.services.get(name);\n    const { service, dependencies, singleton } = serviceConfig;\n\n    // Resolve dependencies\n    const resolvedDependencies = dependencies.map(dep => this.get(dep));\n\n    // Create instance\n    let instance;\n    if (typeof service === 'function') {\n      instance = new service(...resolvedDependencies);\n    } else {\n      instance = service;\n    }\n\n    // Store as singleton if configured\n    if (singleton) {\n      this.singletons.set(name, instance);\n    }\n\n    return instance;\n  }\n\n  /**\n   * Create instance from factory\n   * @param {string} name - Factory name\n   * @returns {*} Factory result\n   */\n  createFromFactory(name) {\n    const factoryConfig = this.factories.get(name);\n    const { factory, dependencies } = factoryConfig;\n\n    // Resolve dependencies\n    const resolvedDependencies = dependencies.map(dep => this.get(dep));\n\n    // Call factory function\n    return factory(...resolvedDependencies);\n  }\n\n  /**\n   * Check if service is registered\n   * @param {string} name - Service name\n   * @returns {boolean} Registration status\n   */\n  has(name) {\n    return this.services.has(name) ||\n           this.factories.has(name) ||\n           this.singletons.has(name);\n  }\n\n  /**\n   * Remove a service\n   * @param {string} name - Service name\n   */\n  remove(name) {\n    this.services.delete(name);\n    this.factories.delete(name);\n    this.singletons.delete(name);\n  }\n\n  /**\n   * Clear all services\n   */\n  clear() {\n    this.services.clear();\n    this.factories.clear();\n    this.singletons.clear();\n  }\n\n  /**\n   * Get all registered service names\n   * @returns {Array<string>} Service names\n   */\n  getServiceNames() {\n    return [\n      ...this.services.keys(),\n      ...this.factories.keys(),\n      ...this.singletons.keys()\n    ];\n  }\n}\n\n// Create global container instance\nconst container = new Container();\n\nmodule.exports = container;"],"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","ignoreList":[]}