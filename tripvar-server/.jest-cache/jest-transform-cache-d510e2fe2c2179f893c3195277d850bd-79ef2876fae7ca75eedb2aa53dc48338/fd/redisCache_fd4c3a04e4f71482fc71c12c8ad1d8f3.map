{"version":3,"names":["cov_2ji4hfeys8","actualCoverage","redisUtils","s","require","info","error","redisCache","options","b","f","key","ttl","skipCache","req","res","next","query","cacheKey","method","originalUrl","cachedData","getCache","path","json","_cached","_cacheKey","originalJson","data","setCache","catch","err","message","call","stack","invalidateCache","pattern","getRedisClient","client","keys","length","del","keysCount","redisSession","sessionId","cookies","headers","sessionData","getSession","session","setSession","newSessionId","randomUUID","cookie","httpOnly","secure","process","env","NODE_ENV","maxAge","clearSession","deleteSession","clearCookie","module","exports"],"sources":["redisCache.js"],"sourcesContent":["const { redisUtils } = require('../config/redis');\nconst { info, error } = require('../utils/logger');\n\n/**\n * Redis caching middleware\n * @param {Object} options - Cache options\n * @param {string} options.key - Cache key (can be a function that receives req)\n * @param {number} options.ttl - Time to live in seconds (default: 3600)\n * @param {boolean} options.skipCache - Skip cache for certain conditions\n * @returns {Function} Express middleware function\n */\nconst redisCache = (options = {}) => {\n  const { key, ttl = 3600, skipCache = false } = options;\n\n  return async(req, res, next) => {\n    // Skip caching if requested\n    if (skipCache || req.query.skipCache === 'true') {\n      return next();\n    }\n\n    try {\n      // Generate cache key\n      let cacheKey;\n      if (typeof key === 'function') {\n        cacheKey = key(req);\n      } else if (key) {\n        cacheKey = key;\n      } else {\n        // Default cache key based on URL and query params\n        cacheKey = `cache:${req.method}:${req.originalUrl}`;\n      }\n\n      // Try to get from cache\n      const cachedData = await redisUtils.getCache(cacheKey);\n\n      if (cachedData) {\n        info('Cache hit', { key: cacheKey, path: req.path });\n        return res.json({\n          ...cachedData,\n          _cached: true,\n          _cacheKey: cacheKey\n        });\n      }\n\n      // Cache miss - continue to route handler\n      info('Cache miss', { key: cacheKey, path: req.path });\n\n      // Store original res.json to intercept response\n      const originalJson = res.json;\n      res.json = function(data) {\n        // Cache the response (async, don't wait)\n        redisUtils.setCache(cacheKey, data, ttl).catch(err => {\n          error('Failed to cache response', { error: err.message, cacheKey });\n        });\n\n        // Call original json method\n        return originalJson.call(this, data);\n      };\n\n      next();\n    } catch (err) {\n      // If Redis fails, continue without caching\n      error('Redis cache middleware error', { error: err.message, stack: err.stack });\n      next();\n    }\n  };\n};\n\n/**\n * Invalidate cache by key pattern\n * @param {string} pattern - Key pattern to invalidate\n */\nconst invalidateCache = async(pattern) => {\n  try {\n    const { getRedisClient } = require('../config/redis');\n    const client = getRedisClient();\n    const keys = await client.keys(pattern);\n\n    if (keys.length > 0) {\n      await client.del(...keys);\n      info('Cache invalidated', { pattern, keysCount: keys.length });\n    }\n  } catch (err) {\n    error('Failed to invalidate cache', { error: err.message, pattern });\n  }\n};\n\n/**\n * Session middleware using Redis\n */\nconst redisSession = (options = {}) => {\n  const { ttl = 86400 } = options; // 24 hours default\n\n  return async(req, res, next) => {\n    try {\n      // Get session ID from cookie or header\n      const sessionId = req.cookies?.sessionId || req.headers['x-session-id'];\n\n      if (sessionId) {\n        const sessionData = await redisUtils.getSession(sessionId);\n        if (sessionData) {\n          req.session = sessionData;\n        }\n      }\n\n      // Add session methods to response\n      res.setSession = async(data) => {\n        const newSessionId = sessionId || require('crypto').randomUUID();\n        await redisUtils.setSession(newSessionId, data, ttl);\n        res.cookie('sessionId', newSessionId, {\n          httpOnly: true,\n          secure: process.env.NODE_ENV === 'production',\n          maxAge: ttl * 1000\n        });\n        req.session = data;\n        return newSessionId;\n      };\n\n      res.clearSession = async() => {\n        if (sessionId) {\n          await redisUtils.deleteSession(sessionId);\n          res.clearCookie('sessionId');\n          delete req.session;\n        }\n      };\n\n      next();\n    } catch (err) {\n      error('Redis session middleware error', { error: err.message, stack: err.stack });\n      next();\n    }\n  };\n};\n\nmodule.exports = {\n  redisCache,\n  invalidateCache,\n  redisSession\n};"],"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","ignoreList":[]}