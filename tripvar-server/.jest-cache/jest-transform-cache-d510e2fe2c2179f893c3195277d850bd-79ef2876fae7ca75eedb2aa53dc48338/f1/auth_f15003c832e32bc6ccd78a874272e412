a4f11282c7bc9faf6194e62a3a5ebf54
const jwt = require('jsonwebtoken');
const {
  promisify
} = require('util');
const User = require('../public/models/user.model');
const {
  UnauthorizedError,
  ForbiddenError
} = require('../utils/errors');
exports.authenticate = async (req, res, next) => {
  try {
    // 1) Get token and check if it exists
    let token;
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
      token = req.headers.authorization.split(' ')[1];
    }

    // Additional security: Check for token in cookies as fallback
    if (!token && req.cookies && req.cookies.token) {
      token = req.cookies.token;
    }
    if (!token) {
      return res.status(401).json({
        status: 'fail',
        message: 'You are not logged in! Please log in to get access.',
        code: 'UNAUTHORIZED'
      });
    }

    // 2) Verify token
    try {
      const decoded = await promisify(jwt.verify)(token, process.env.JWT_SECRET, {
        algorithms: ['HS256'] // Explicitly specify algorithm for security
      });

      // 3) Check if user still exists
      const user = await User.findById(decoded.id);
      if (!user) {
        return res.status(401).json({
          status: 'fail',
          message: 'The user belonging to this token no longer exists.',
          code: 'UNAUTHORIZED'
        });
      }

      // 4) Check if user changed password after the token was issued
      if (user.changedPasswordAfter(decoded.iat)) {
        return res.status(401).json({
          status: 'fail',
          message: 'User recently changed password! Please log in again.',
          code: 'UNAUTHORIZED'
        });
      }

      // Grant access to protected route
      req.user = user;
      next();
    } catch (err) {
      // Handle JWT specific errors with clear messages
      if (err.name === 'TokenExpiredError') {
        return res.status(401).json({
          status: 'fail',
          message: 'Your token has expired. Please log in again.',
          code: 'TOKEN_EXPIRED'
        });
      } else if (err.name === 'JsonWebTokenError') {
        return res.status(401).json({
          status: 'fail',
          message: 'Invalid token. Please log in again.',
          code: 'INVALID_TOKEN'
        });
      }
      // For other errors, pass to error handler
      next(err);
    }
  } catch (error) {
    next(error);
  }
};
exports.authorize = (...roles) => {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return next(new ForbiddenError('You do not have permission to perform this action'));
    }
    next();
  };
};

// Keep the old exports for backward compatibility
exports.protect = exports.authenticate;
exports.restrictTo = exports.authorize;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqd3QiLCJyZXF1aXJlIiwicHJvbWlzaWZ5IiwiVXNlciIsIlVuYXV0aG9yaXplZEVycm9yIiwiRm9yYmlkZGVuRXJyb3IiLCJleHBvcnRzIiwiYXV0aGVudGljYXRlIiwicmVxIiwicmVzIiwibmV4dCIsInRva2VuIiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJzdGFydHNXaXRoIiwic3BsaXQiLCJjb29raWVzIiwic3RhdHVzIiwianNvbiIsIm1lc3NhZ2UiLCJjb2RlIiwiZGVjb2RlZCIsInZlcmlmeSIsInByb2Nlc3MiLCJlbnYiLCJKV1RfU0VDUkVUIiwiYWxnb3JpdGhtcyIsInVzZXIiLCJmaW5kQnlJZCIsImlkIiwiY2hhbmdlZFBhc3N3b3JkQWZ0ZXIiLCJpYXQiLCJlcnIiLCJuYW1lIiwiZXJyb3IiLCJhdXRob3JpemUiLCJyb2xlcyIsImluY2x1ZGVzIiwicm9sZSIsInByb3RlY3QiLCJyZXN0cmljdFRvIl0sInNvdXJjZXMiOlsiYXV0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKTtcbmNvbnN0IHsgcHJvbWlzaWZ5IH0gPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBVc2VyID0gcmVxdWlyZSgnLi4vcHVibGljL21vZGVscy91c2VyLm1vZGVsJyk7XG5jb25zdCB7IFVuYXV0aG9yaXplZEVycm9yLCBGb3JiaWRkZW5FcnJvciB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvZXJyb3JzJyk7XG5cbmV4cG9ydHMuYXV0aGVudGljYXRlID0gYXN5bmMocmVxLCByZXMsIG5leHQpID0+IHtcbiAgdHJ5IHtcbiAgICAvLyAxKSBHZXQgdG9rZW4gYW5kIGNoZWNrIGlmIGl0IGV4aXN0c1xuICAgIGxldCB0b2tlbjtcbiAgICBpZiAoXG4gICAgICByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uICYmXG4gICAgICByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uLnN0YXJ0c1dpdGgoJ0JlYXJlcicpXG4gICAgKSB7XG4gICAgICB0b2tlbiA9IHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24uc3BsaXQoJyAnKVsxXTtcbiAgICB9XG5cbiAgICAvLyBBZGRpdGlvbmFsIHNlY3VyaXR5OiBDaGVjayBmb3IgdG9rZW4gaW4gY29va2llcyBhcyBmYWxsYmFja1xuICAgIGlmICghdG9rZW4gJiYgcmVxLmNvb2tpZXMgJiYgcmVxLmNvb2tpZXMudG9rZW4pIHtcbiAgICAgIHRva2VuID0gcmVxLmNvb2tpZXMudG9rZW47XG4gICAgfVxuXG4gICAgaWYgKCF0b2tlbikge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgc3RhdHVzOiAnZmFpbCcsXG4gICAgICAgIG1lc3NhZ2U6ICdZb3UgYXJlIG5vdCBsb2dnZWQgaW4hIFBsZWFzZSBsb2cgaW4gdG8gZ2V0IGFjY2Vzcy4nLFxuICAgICAgICBjb2RlOiAnVU5BVVRIT1JJWkVEJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gMikgVmVyaWZ5IHRva2VuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRlY29kZWQgPSBhd2FpdCBwcm9taXNpZnkoand0LnZlcmlmeSkodG9rZW4sIHByb2Nlc3MuZW52LkpXVF9TRUNSRVQsIHtcbiAgICAgICAgYWxnb3JpdGhtczogWydIUzI1NiddIC8vIEV4cGxpY2l0bHkgc3BlY2lmeSBhbGdvcml0aG0gZm9yIHNlY3VyaXR5XG4gICAgICB9KTtcblxuICAgICAgLy8gMykgQ2hlY2sgaWYgdXNlciBzdGlsbCBleGlzdHNcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeUlkKGRlY29kZWQuaWQpO1xuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgc3RhdHVzOiAnZmFpbCcsXG4gICAgICAgICAgbWVzc2FnZTogJ1RoZSB1c2VyIGJlbG9uZ2luZyB0byB0aGlzIHRva2VuIG5vIGxvbmdlciBleGlzdHMuJyxcbiAgICAgICAgICBjb2RlOiAnVU5BVVRIT1JJWkVEJ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gNCkgQ2hlY2sgaWYgdXNlciBjaGFuZ2VkIHBhc3N3b3JkIGFmdGVyIHRoZSB0b2tlbiB3YXMgaXNzdWVkXG4gICAgICBpZiAodXNlci5jaGFuZ2VkUGFzc3dvcmRBZnRlcihkZWNvZGVkLmlhdCkpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgICBzdGF0dXM6ICdmYWlsJyxcbiAgICAgICAgICBtZXNzYWdlOiAnVXNlciByZWNlbnRseSBjaGFuZ2VkIHBhc3N3b3JkISBQbGVhc2UgbG9nIGluIGFnYWluLicsXG4gICAgICAgICAgY29kZTogJ1VOQVVUSE9SSVpFRCdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEdyYW50IGFjY2VzcyB0byBwcm90ZWN0ZWQgcm91dGVcbiAgICAgIHJlcS51c2VyID0gdXNlcjtcbiAgICAgIG5leHQoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIEhhbmRsZSBKV1Qgc3BlY2lmaWMgZXJyb3JzIHdpdGggY2xlYXIgbWVzc2FnZXNcbiAgICAgIGlmIChlcnIubmFtZSA9PT0gJ1Rva2VuRXhwaXJlZEVycm9yJykge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIHN0YXR1czogJ2ZhaWwnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdZb3VyIHRva2VuIGhhcyBleHBpcmVkLiBQbGVhc2UgbG9nIGluIGFnYWluLicsXG4gICAgICAgICAgY29kZTogJ1RPS0VOX0VYUElSRUQnXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChlcnIubmFtZSA9PT0gJ0pzb25XZWJUb2tlbkVycm9yJykge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIHN0YXR1czogJ2ZhaWwnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIHRva2VuLiBQbGVhc2UgbG9nIGluIGFnYWluLicsXG4gICAgICAgICAgY29kZTogJ0lOVkFMSURfVE9LRU4nXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gRm9yIG90aGVyIGVycm9ycywgcGFzcyB0byBlcnJvciBoYW5kbGVyXG4gICAgICBuZXh0KGVycik7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIG5leHQoZXJyb3IpO1xuICB9XG59O1xuXG5leHBvcnRzLmF1dGhvcml6ZSA9ICguLi5yb2xlcykgPT4ge1xuICByZXR1cm4gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgaWYgKCFyb2xlcy5pbmNsdWRlcyhyZXEudXNlci5yb2xlKSkge1xuICAgICAgcmV0dXJuIG5leHQoXG4gICAgICAgIG5ldyBGb3JiaWRkZW5FcnJvcignWW91IGRvIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gcGVyZm9ybSB0aGlzIGFjdGlvbicpXG4gICAgICApO1xuICAgIH1cbiAgICBuZXh0KCk7XG4gIH07XG59O1xuXG4vLyBLZWVwIHRoZSBvbGQgZXhwb3J0cyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuZXhwb3J0cy5wcm90ZWN0ID0gZXhwb3J0cy5hdXRoZW50aWNhdGU7XG5leHBvcnRzLnJlc3RyaWN0VG8gPSBleHBvcnRzLmF1dGhvcml6ZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsR0FBRyxHQUFHQyxPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ25DLE1BQU07RUFBRUM7QUFBVSxDQUFDLEdBQUdELE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDckMsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsNkJBQTZCLENBQUM7QUFDbkQsTUFBTTtFQUFFRyxpQkFBaUI7RUFBRUM7QUFBZSxDQUFDLEdBQUdKLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztBQUV4RUssT0FBTyxDQUFDQyxZQUFZLEdBQUcsT0FBTUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLElB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