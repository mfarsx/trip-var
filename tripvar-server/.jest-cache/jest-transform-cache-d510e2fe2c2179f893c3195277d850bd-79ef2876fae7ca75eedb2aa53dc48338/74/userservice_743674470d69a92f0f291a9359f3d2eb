55fc021ce638f927d2fc1dc2212225e9
/* istanbul ignore next */
function cov_7ctdtm3f8() {
  var path = "/Users/mfarsx/dev/tripvar/tripvar-server/src/services/user.service.js";
  var hash = "634978e427135f41924181b3ff7552a79794a277";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/mfarsx/dev/tripvar/tripvar-server/src/services/user.service.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 23
        },
        end: {
          line: 1,
          column: 65
        }
      },
      "1": {
        start: {
          line: 2,
          column: 77
        },
        end: {
          line: 2,
          column: 103
        }
      },
      "2": {
        start: {
          line: 3,
          column: 23
        },
        end: {
          line: 3,
          column: 58
        }
      },
      "3": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 47
        }
      },
      "4": {
        start: {
          line: 5,
          column: 20
        },
        end: {
          line: 5,
          column: 45
        }
      },
      "5": {
        start: {
          line: 14,
          column: 64
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "6": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 17,
          column: 64
        }
      },
      "7": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 20,
          column: 5
        }
      },
      "8": {
        start: {
          line: 19,
          column: 6
        },
        end: {
          line: 19,
          column: 58
        }
      },
      "9": {
        start: {
          line: 23,
          column: 33
        },
        end: {
          line: 23,
          column: 80
        }
      },
      "10": {
        start: {
          line: 26,
          column: 17
        },
        end: {
          line: 32,
          column: 6
        }
      },
      "11": {
        start: {
          line: 35,
          column: 18
        },
        end: {
          line: 35,
          column: 42
        }
      },
      "12": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 30
        }
      },
      "13": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 27
        }
      },
      "14": {
        start: {
          line: 49,
          column: 32
        },
        end: {
          line: 49,
          column: 43
        }
      },
      "15": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 54,
          column: 5
        }
      },
      "16": {
        start: {
          line: 53,
          column: 6
        },
        end: {
          line: 53,
          column: 69
        }
      },
      "17": {
        start: {
          line: 57,
          column: 17
        },
        end: {
          line: 57,
          column: 68
        }
      },
      "18": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 61,
          column: 5
        }
      },
      "19": {
        start: {
          line: 60,
          column: 6
        },
        end: {
          line: 60,
          column: 57
        }
      },
      "20": {
        start: {
          line: 64,
          column: 18
        },
        end: {
          line: 64,
          column: 42
        }
      },
      "21": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 67,
          column: 30
        }
      },
      "22": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 27
        }
      },
      "23": {
        start: {
          line: 78,
          column: 17
        },
        end: {
          line: 81,
          column: 6
        }
      },
      "24": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "25": {
        start: {
          line: 84,
          column: 6
        },
        end: {
          line: 84,
          column: 48
        }
      },
      "26": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "27": {
        start: {
          line: 89,
          column: 6
        },
        end: {
          line: 89,
          column: 53
        }
      },
      "28": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 98,
          column: 5
        }
      },
      "29": {
        start: {
          line: 94,
          column: 22
        },
        end: {
          line: 94,
          column: 70
        }
      },
      "30": {
        start: {
          line: 94,
          column: 42
        },
        end: {
          line: 94,
          column: 69
        }
      },
      "31": {
        start: {
          line: 95,
          column: 6
        },
        end: {
          line: 97,
          column: 7
        }
      },
      "32": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 40
        }
      },
      "33": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 100,
          column: 16
        }
      },
      "34": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 115,
          column: 5
        }
      },
      "35": {
        start: {
          line: 112,
          column: 6
        },
        end: {
          line: 114,
          column: 8
        }
      },
      "36": {
        start: {
          line: 118,
          column: 25
        },
        end: {
          line: 118,
          column: 108
        }
      },
      "37": {
        start: {
          line: 120,
          column: 24
        },
        end: {
          line: 122,
          column: 6
        }
      },
      "38": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 127,
          column: 5
        }
      },
      "39": {
        start: {
          line: 126,
          column: 6
        },
        end: {
          line: 126,
          column: 67
        }
      },
      "40": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 135,
          column: 5
        }
      },
      "41": {
        start: {
          line: 131,
          column: 22
        },
        end: {
          line: 131,
          column: 77
        }
      },
      "42": {
        start: {
          line: 131,
          column: 42
        },
        end: {
          line: 131,
          column: 76
        }
      },
      "43": {
        start: {
          line: 132,
          column: 6
        },
        end: {
          line: 134,
          column: 7
        }
      },
      "44": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 47
        }
      },
      "45": {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 137,
          column: 23
        }
      },
      "46": {
        start: {
          line: 147,
          column: 45
        },
        end: {
          line: 147,
          column: 57
        }
      },
      "47": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 151,
          column: 5
        }
      },
      "48": {
        start: {
          line: 150,
          column: 6
        },
        end: {
          line: 150,
          column: 75
        }
      },
      "49": {
        start: {
          line: 153,
          column: 17
        },
        end: {
          line: 153,
          column: 79
        }
      },
      "50": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 157,
          column: 5
        }
      },
      "51": {
        start: {
          line: 156,
          column: 6
        },
        end: {
          line: 156,
          column: 48
        }
      },
      "52": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 161,
          column: 5
        }
      },
      "53": {
        start: {
          line: 160,
          column: 6
        },
        end: {
          line: 160,
          column: 67
        }
      },
      "54": {
        start: {
          line: 163,
          column: 4
        },
        end: {
          line: 163,
          column: 61
        }
      },
      "55": {
        start: {
          line: 166,
          column: 24
        },
        end: {
          line: 166,
          column: 61
        }
      },
      "56": {
        start: {
          line: 167,
          column: 18
        },
        end: {
          line: 167,
          column: 49
        }
      },
      "57": {
        start: {
          line: 169,
          column: 4
        },
        end: {
          line: 169,
          column: 21
        }
      },
      "58": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 178,
          column: 44
        }
      },
      "59": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 181,
          column: 38
        }
      },
      "60": {
        start: {
          line: 190,
          column: 52
        },
        end: {
          line: 190,
          column: 59
        }
      },
      "61": {
        start: {
          line: 192,
          column: 19
        },
        end: {
          line: 196,
          column: 6
        }
      },
      "62": {
        start: {
          line: 198,
          column: 4
        },
        end: {
          line: 198,
          column: 18
        }
      },
      "63": {
        start: {
          line: 208,
          column: 4
        },
        end: {
          line: 210,
          column: 5
        }
      },
      "64": {
        start: {
          line: 209,
          column: 6
        },
        end: {
          line: 209,
          column: 62
        }
      },
      "65": {
        start: {
          line: 212,
          column: 19
        },
        end: {
          line: 212,
          column: 77
        }
      },
      "66": {
        start: {
          line: 215,
          column: 4
        },
        end: {
          line: 215,
          column: 38
        }
      },
      "67": {
        start: {
          line: 217,
          column: 4
        },
        end: {
          line: 220,
          column: 6
        }
      },
      "68": {
        start: {
          line: 229,
          column: 4
        },
        end: {
          line: 229,
          column: 53
        }
      },
      "69": {
        start: {
          line: 238,
          column: 18
        },
        end: {
          line: 238,
          column: 28
        }
      },
      "70": {
        start: {
          line: 239,
          column: 22
        },
        end: {
          line: 239,
          column: 43
        }
      },
      "71": {
        start: {
          line: 240,
          column: 14
        },
        end: {
          line: 240,
          column: 59
        }
      },
      "72": {
        start: {
          line: 241,
          column: 22
        },
        end: {
          line: 241,
          column: 61
        }
      },
      "73": {
        start: {
          line: 243,
          column: 4
        },
        end: {
          line: 245,
          column: 5
        }
      },
      "74": {
        start: {
          line: 244,
          column: 6
        },
        end: {
          line: 244,
          column: 12
        }
      },
      "75": {
        start: {
          line: 247,
          column: 4
        },
        end: {
          line: 247,
          column: 15
        }
      },
      "76": {
        start: {
          line: 257,
          column: 19
        },
        end: {
          line: 257,
          column: 21
        }
      },
      "77": {
        start: {
          line: 258,
          column: 4
        },
        end: {
          line: 262,
          column: 7
        }
      },
      "78": {
        start: {
          line: 259,
          column: 6
        },
        end: {
          line: 261,
          column: 7
        }
      },
      "79": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 260,
          column: 29
        }
      },
      "80": {
        start: {
          line: 263,
          column: 4
        },
        end: {
          line: 263,
          column: 18
        }
      },
      "81": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 285,
          column: 5
        }
      },
      "82": {
        start: {
          line: 273,
          column: 24
        },
        end: {
          line: 277,
          column: 7
        }
      },
      "83": {
        start: {
          line: 279,
          column: 6
        },
        end: {
          line: 281,
          column: 8
        }
      },
      "84": {
        start: {
          line: 280,
          column: 29
        },
        end: {
          line: 280,
          column: 55
        }
      },
      "85": {
        start: {
          line: 284,
          column: 6
        },
        end: {
          line: 284,
          column: 65
        }
      },
      "86": {
        start: {
          line: 294,
          column: 21
        },
        end: {
          line: 294,
          column: 37
        }
      },
      "87": {
        start: {
          line: 296,
          column: 4
        },
        end: {
          line: 319,
          column: 5
        }
      },
      "88": {
        start: {
          line: 298,
          column: 17
        },
        end: {
          line: 298,
          column: 51
        }
      },
      "89": {
        start: {
          line: 300,
          column: 6
        },
        end: {
          line: 310,
          column: 7
        }
      },
      "90": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 304,
          column: 11
        }
      },
      "91": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 309,
          column: 9
        }
      },
      "92": {
        start: {
          line: 308,
          column: 10
        },
        end: {
          line: 308,
          column: 52
        }
      },
      "93": {
        start: {
          line: 312,
          column: 6
        },
        end: {
          line: 312,
          column: 18
        }
      },
      "94": {
        start: {
          line: 315,
          column: 6
        },
        end: {
          line: 318,
          column: 9
        }
      },
      "95": {
        start: {
          line: 323,
          column: 0
        },
        end: {
          line: 323,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 2
          },
          end: {
            line: 13,
            column: 3
          }
        },
        loc: {
          start: {
            line: 13,
            column: 27
          },
          end: {
            line: 41,
            column: 3
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 48,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        },
        loc: {
          start: {
            line: 48,
            column: 27
          },
          end: {
            line: 70,
            column: 3
          }
        },
        line: 48
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 77,
            column: 2
          },
          end: {
            line: 77,
            column: 3
          }
        },
        loc: {
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 101,
            column: 3
          }
        },
        line: 77
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 94,
            column: 37
          },
          end: {
            line: 94,
            column: 38
          }
        },
        loc: {
          start: {
            line: 94,
            column: 42
          },
          end: {
            line: 94,
            column: 69
          }
        },
        line: 94
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 109,
            column: 2
          },
          end: {
            line: 109,
            column: 3
          }
        },
        loc: {
          start: {
            line: 109,
            column: 42
          },
          end: {
            line: 138,
            column: 3
          }
        },
        line: 109
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 131,
            column: 37
          },
          end: {
            line: 131,
            column: 38
          }
        },
        loc: {
          start: {
            line: 131,
            column: 42
          },
          end: {
            line: 131,
            column: 76
          }
        },
        line: 131
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 146,
            column: 2
          },
          end: {
            line: 146,
            column: 3
          }
        },
        loc: {
          start: {
            line: 146,
            column: 45
          },
          end: {
            line: 170,
            column: 3
          }
        },
        line: 146
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 177,
            column: 2
          },
          end: {
            line: 177,
            column: 3
          }
        },
        loc: {
          start: {
            line: 177,
            column: 30
          },
          end: {
            line: 182,
            column: 3
          }
        },
        line: 177
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 189,
            column: 2
          },
          end: {
            line: 189,
            column: 3
          }
        },
        loc: {
          start: {
            line: 189,
            column: 34
          },
          end: {
            line: 199,
            column: 3
          }
        },
        line: 189
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 207,
            column: 2
          },
          end: {
            line: 207,
            column: 3
          }
        },
        loc: {
          start: {
            line: 207,
            column: 46
          },
          end: {
            line: 221,
            column: 3
          }
        },
        line: 207
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 228,
            column: 2
          },
          end: {
            line: 228,
            column: 3
          }
        },
        loc: {
          start: {
            line: 228,
            column: 29
          },
          end: {
            line: 230,
            column: 3
          }
        },
        line: 228
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 237,
            column: 2
          },
          end: {
            line: 237,
            column: 3
          }
        },
        loc: {
          start: {
            line: 237,
            column: 28
          },
          end: {
            line: 248,
            column: 3
          }
        },
        line: 237
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 256,
            column: 2
          },
          end: {
            line: 256,
            column: 3
          }
        },
        loc: {
          start: {
            line: 256,
            column: 45
          },
          end: {
            line: 264,
            column: 3
          }
        },
        line: 256
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 258,
            column: 29
          },
          end: {
            line: 258,
            column: 30
          }
        },
        loc: {
          start: {
            line: 258,
            column: 37
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 258
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 271,
            column: 2
          },
          end: {
            line: 271,
            column: 3
          }
        },
        loc: {
          start: {
            line: 271,
            column: 31
          },
          end: {
            line: 286,
            column: 3
          }
        },
        line: 271
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 280,
            column: 22
          },
          end: {
            line: 280,
            column: 23
          }
        },
        loc: {
          start: {
            line: 280,
            column: 29
          },
          end: {
            line: 280,
            column: 55
          }
        },
        line: 280
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 293,
            column: 2
          },
          end: {
            line: 293,
            column: 3
          }
        },
        loc: {
          start: {
            line: 293,
            column: 28
          },
          end: {
            line: 320,
            column: 3
          }
        },
        line: 293
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 33
          },
          end: {
            line: 23,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 47
          },
          end: {
            line: 23,
            column: 68
          }
        }, {
          start: {
            line: 23,
            column: 71
          },
          end: {
            line: 23,
            column: 80
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 27
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 14
          }
        }, {
          start: {
            line: 52,
            column: 18
          },
          end: {
            line: 52,
            column: 27
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "5": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: 59,
            column: 17
          },
          end: {
            line: 59,
            column: 56
          }
        }],
        line: 59
      },
      "6": {
        loc: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "7": {
        loc: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "8": {
        loc: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "9": {
        loc: {
          start: {
            line: 95,
            column: 6
          },
          end: {
            line: 97,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 6
          },
          end: {
            line: 97,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "10": {
        loc: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 115,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 115,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "11": {
        loc: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "12": {
        loc: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 135,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 135,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "13": {
        loc: {
          start: {
            line: 132,
            column: 6
          },
          end: {
            line: 134,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 6
          },
          end: {
            line: 134,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "14": {
        loc: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "15": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 149,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 149,
            column: 24
          }
        }, {
          start: {
            line: 149,
            column: 28
          },
          end: {
            line: 149,
            column: 40
          }
        }],
        line: 149
      },
      "16": {
        loc: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "17": {
        loc: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "18": {
        loc: {
          start: {
            line: 189,
            column: 20
          },
          end: {
            line: 189,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 189,
            column: 30
          },
          end: {
            line: 189,
            column: 32
          }
        }],
        line: 189
      },
      "19": {
        loc: {
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 190,
            column: 20
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 190,
            column: 19
          },
          end: {
            line: 190,
            column: 20
          }
        }],
        line: 190
      },
      "20": {
        loc: {
          start: {
            line: 190,
            column: 22
          },
          end: {
            line: 190,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 190,
            column: 30
          },
          end: {
            line: 190,
            column: 32
          }
        }],
        line: 190
      },
      "21": {
        loc: {
          start: {
            line: 190,
            column: 34
          },
          end: {
            line: 190,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 190,
            column: 43
          },
          end: {
            line: 190,
            column: 47
          }
        }],
        line: 190
      },
      "22": {
        loc: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "23": {
        loc: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "24": {
        loc: {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 243,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 243,
            column: 21
          }
        }, {
          start: {
            line: 243,
            column: 26
          },
          end: {
            line: 243,
            column: 41
          }
        }, {
          start: {
            line: 243,
            column: 45
          },
          end: {
            line: 243,
            column: 82
          }
        }],
        line: 243
      },
      "25": {
        loc: {
          start: {
            line: 259,
            column: 6
          },
          end: {
            line: 261,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 6
          },
          end: {
            line: 261,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "26": {
        loc: {
          start: {
            line: 300,
            column: 6
          },
          end: {
            line: 310,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 6
          },
          end: {
            line: 310,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "27": {
        loc: {
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0],
      "20": [0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "634978e427135f41924181b3ff7552a79794a277"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7ctdtm3f8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7ctdtm3f8();
const userRepository =
/* istanbul ignore next */
(cov_7ctdtm3f8().s[0]++, require('../repositories/user.repository'));
const {
  ValidationError,
  UnauthorizedError,
  NotFoundError,
  ConflictError
} =
/* istanbul ignore next */
(cov_7ctdtm3f8().s[1]++, require('../utils/errors'));
const {
  redisUtils
} =
/* istanbul ignore next */
(cov_7ctdtm3f8().s[2]++, require('../middleware/redisCache'));
const COUNTRIES =
/* istanbul ignore next */
(cov_7ctdtm3f8().s[3]++, require('../utils/countries'));
const BaseService =
/* istanbul ignore next */
(cov_7ctdtm3f8().s[4]++, require('./base.service'));
class UserService extends BaseService {
  /**
   * Register a new user
   * @param {Object} userData - User registration data
   * @returns {Promise<Object>} User and token
   */
  async register(userData) {
    /* istanbul ignore next */
    cov_7ctdtm3f8().f[0]++;
    const {
      email,
      password,
      name,
      dateOfBirth,
      nationality
    } =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[5]++, userData);

    // Check if user already exists
    const existingUser =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[6]++, await userRepository.findByEmail(email));
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[7]++;
    if (existingUser) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[0][0]++;
      cov_7ctdtm3f8().s[8]++;
      throw new ConflictError('Email already registered');
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[0][1]++;
    }

    // Format dateOfBirth to handle timezone issues
    const formattedDateOfBirth =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[9]++, dateOfBirth ?
    /* istanbul ignore next */
    (cov_7ctdtm3f8().b[1][0]++, new Date(dateOfBirth)) :
    /* istanbul ignore next */
    (cov_7ctdtm3f8().b[1][1]++, undefined));

    // Create new user
    const user =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[10]++, await userRepository.create({
      email,
      password,
      name,
      dateOfBirth: formattedDateOfBirth,
      nationality
    }));

    // Generate token
    const token =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[11]++, user.generateAuthToken());

    // Remove password from output
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[12]++;
    user.password = undefined;
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[13]++;
    return {
      user,
      token
    };
  }

  /**
   * Login user
   * @param {Object} credentials - Login credentials
   * @returns {Promise<Object>} User and token
   */
  async login(credentials) {
    /* istanbul ignore next */
    cov_7ctdtm3f8().f[1]++;
    const {
      email,
      password
    } =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[14]++, credentials);

    // Check if email and password exist
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_7ctdtm3f8().b[3][0]++, !email) ||
    /* istanbul ignore next */
    (cov_7ctdtm3f8().b[3][1]++, !password)) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[2][0]++;
      cov_7ctdtm3f8().s[16]++;
      throw new ValidationError('Please provide email and password');
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[2][1]++;
    }

    // Check if user exists && password is correct
    const user =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[17]++, await userRepository.findByEmailWithPassword(email));
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[18]++;
    if (
    /* istanbul ignore next */
    (cov_7ctdtm3f8().b[5][0]++, !user) ||
    /* istanbul ignore next */
    (cov_7ctdtm3f8().b[5][1]++, !(await user.comparePassword(password)))) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[4][0]++;
      cov_7ctdtm3f8().s[19]++;
      throw new UnauthorizedError('Invalid credentials');
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[4][1]++;
    }

    // Generate token
    const token =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[20]++, user.generateAuthToken());

    // Remove password from output
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[21]++;
    user.password = undefined;
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[22]++;
    return {
      user,
      token
    };
  }

  /**
   * Get user profile by ID
   * @param {string} userId - User ID
   * @returns {Promise<Object>} User profile with computed fields
   */
  async getProfile(userId) {
    /* istanbul ignore next */
    cov_7ctdtm3f8().f[2]++;
    const user =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[23]++, await userRepository.findById(userId, {
      select: '-password',
      lean: true
    }));
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[24]++;
    if (!user) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[6][0]++;
      cov_7ctdtm3f8().s[25]++;
      throw new NotFoundError('User not found');
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[6][1]++;
    }

    // Calculate age if dateOfBirth exists
    cov_7ctdtm3f8().s[26]++;
    if (user.dateOfBirth) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[7][0]++;
      cov_7ctdtm3f8().s[27]++;
      user.age = this.calculateAge(user.dateOfBirth);
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[7][1]++;
    }

    // Get country code if nationality exists
    cov_7ctdtm3f8().s[28]++;
    if (user.nationality) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[8][0]++;
      const country =
      /* istanbul ignore next */
      (cov_7ctdtm3f8().s[29]++, COUNTRIES.find(c => {
        /* istanbul ignore next */
        cov_7ctdtm3f8().f[3]++;
        cov_7ctdtm3f8().s[30]++;
        return c.name === user.nationality;
      }));
      /* istanbul ignore next */
      cov_7ctdtm3f8().s[31]++;
      if (country) {
        /* istanbul ignore next */
        cov_7ctdtm3f8().b[9][0]++;
        cov_7ctdtm3f8().s[32]++;
        user.countryCode = country.code;
      } else
      /* istanbul ignore next */
      {
        cov_7ctdtm3f8().b[9][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[8][1]++;
    }
    cov_7ctdtm3f8().s[33]++;
    return user;
  }

  /**
   * Update user profile
   * @param {string} userId - User ID
   * @param {Object} updateData - Data to update
   * @returns {Promise<Object>} Updated user profile
   */
  async updateProfile(userId, updateData) {
    /* istanbul ignore next */
    cov_7ctdtm3f8().f[4]++;
    cov_7ctdtm3f8().s[34]++;
    // Don't allow password updates here
    if (updateData.password) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[10][0]++;
      cov_7ctdtm3f8().s[35]++;
      throw new ValidationError('This route is not for password updates. Please use /auth/update-password');
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[10][1]++;
    }

    // Filter out unwanted fields that are not allowed to be updated
    const filteredData =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[36]++, this.filterAllowedFields(updateData, 'name', 'email', 'dateOfBirth', 'nationality'));
    const updatedUser =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[37]++, await userRepository.updateById(userId, filteredData, {
      select: '-password'
    }));

    // Calculate age if dateOfBirth exists
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[38]++;
    if (updatedUser.dateOfBirth) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[11][0]++;
      cov_7ctdtm3f8().s[39]++;
      updatedUser.age = this.calculateAge(updatedUser.dateOfBirth);
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[11][1]++;
    }

    // Get country code if nationality exists
    cov_7ctdtm3f8().s[40]++;
    if (updatedUser.nationality) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[12][0]++;
      const country =
      /* istanbul ignore next */
      (cov_7ctdtm3f8().s[41]++, COUNTRIES.find(c => {
        /* istanbul ignore next */
        cov_7ctdtm3f8().f[5]++;
        cov_7ctdtm3f8().s[42]++;
        return c.name === updatedUser.nationality;
      }));
      /* istanbul ignore next */
      cov_7ctdtm3f8().s[43]++;
      if (country) {
        /* istanbul ignore next */
        cov_7ctdtm3f8().b[13][0]++;
        cov_7ctdtm3f8().s[44]++;
        updatedUser.countryCode = country.code;
      } else
      /* istanbul ignore next */
      {
        cov_7ctdtm3f8().b[13][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[12][1]++;
    }
    cov_7ctdtm3f8().s[45]++;
    return updatedUser;
  }

  /**
   * Update user password
   * @param {string} userId - User ID
   * @param {Object} passwordData - Current and new password
   * @returns {Promise<Object>} New token
   */
  async updatePassword(userId, passwordData) {
    /* istanbul ignore next */
    cov_7ctdtm3f8().f[6]++;
    const {
      currentPassword,
      newPassword
    } =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[46]++, passwordData);
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[47]++;
    if (
    /* istanbul ignore next */
    (cov_7ctdtm3f8().b[15][0]++, !currentPassword) ||
    /* istanbul ignore next */
    (cov_7ctdtm3f8().b[15][1]++, !newPassword)) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[14][0]++;
      cov_7ctdtm3f8().s[48]++;
      throw new ValidationError('Please provide current and new password');
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[14][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[49]++, await userRepository.findById(userId, {
      select: '+password'
    }));
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[50]++;
    if (!user) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[16][0]++;
      cov_7ctdtm3f8().s[51]++;
      throw new NotFoundError('User not found');
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[16][1]++;
    }
    cov_7ctdtm3f8().s[52]++;
    if (!(await user.comparePassword(currentPassword))) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[17][0]++;
      cov_7ctdtm3f8().s[53]++;
      throw new UnauthorizedError('Current password is incorrect');
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[17][1]++;
    }
    cov_7ctdtm3f8().s[54]++;
    await userRepository.updatePassword(userId, newPassword);

    // Get updated user to generate new token
    const updatedUser =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[55]++, await userRepository.findById(userId));
    const token =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[56]++, updatedUser.generateAuthToken());
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[57]++;
    return {
      token
    };
  }

  /**
   * Delete user account (soft delete)
   * @param {string} userId - User ID
   * @returns {Promise<void>}
   */
  async deleteAccount(userId) {
    /* istanbul ignore next */
    cov_7ctdtm3f8().f[7]++;
    cov_7ctdtm3f8().s[58]++;
    await userRepository.softDelete(userId);

    // Clear user-related cache
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[59]++;
    await this.clearUserCache(userId);
  }

  /**
   * Get all users (admin only)
   * @param {Object} options - Query options
   * @returns {Promise<Array>} List of users
   */
  async getAllUsers(options =
  /* istanbul ignore next */
  (cov_7ctdtm3f8().b[18][0]++, {})) {
    /* istanbul ignore next */
    cov_7ctdtm3f8().f[8]++;
    const {
      page =
      /* istanbul ignore next */
      (cov_7ctdtm3f8().b[19][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_7ctdtm3f8().b[20][0]++, 10),
      active =
      /* istanbul ignore next */
      (cov_7ctdtm3f8().b[21][0]++, true)
    } =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[60]++, options);
    const result =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[61]++, await userRepository.findActiveWithPagination({}, {
      page,
      limit,
      select: '-password'
    }));
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[62]++;
    return result;
  }

  /**
   * Toggle favorite destination
   * @param {string} userId - User ID
   * @param {string} destinationId - Destination ID
   * @returns {Promise<Object>} Updated favorites
   */
  async toggleFavorite(userId, destinationId) {
    /* istanbul ignore next */
    cov_7ctdtm3f8().f[9]++;
    cov_7ctdtm3f8().s[63]++;
    if (!destinationId) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[22][0]++;
      cov_7ctdtm3f8().s[64]++;
      throw new ValidationError('Destination ID is required');
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[22][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[65]++, await userRepository.toggleFavorite(userId, destinationId));

    // Clear user cache
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[66]++;
    await this.clearUserCache(userId);
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[67]++;
    return {
      isFavorite: result.isFavorite,
      favorites: result.user.favorites
    };
  }

  /**
   * Get user's favorite destinations
   * @param {string} userId - User ID
   * @returns {Promise<Array>} Favorite destinations
   */
  async getFavorites(userId) {
    /* istanbul ignore next */
    cov_7ctdtm3f8().f[10]++;
    cov_7ctdtm3f8().s[68]++;
    return await userRepository.getFavorites(userId);
  }

  /**
   * Calculate age from date of birth
   * @param {Date} dateOfBirth - Date of birth
   * @returns {number} Age
   */
  calculateAge(dateOfBirth) {
    /* istanbul ignore next */
    cov_7ctdtm3f8().f[11]++;
    const today =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[69]++, new Date());
    const birthDate =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[70]++, new Date(dateOfBirth));
    let age =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[71]++, today.getFullYear() - birthDate.getFullYear());
    const monthDiff =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[72]++, today.getMonth() - birthDate.getMonth());
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[73]++;
    if (
    /* istanbul ignore next */
    (cov_7ctdtm3f8().b[24][0]++, monthDiff < 0) ||
    /* istanbul ignore next */
    (cov_7ctdtm3f8().b[24][1]++, monthDiff === 0) &&
    /* istanbul ignore next */
    (cov_7ctdtm3f8().b[24][2]++, today.getDate() < birthDate.getDate())) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().b[23][0]++;
      cov_7ctdtm3f8().s[74]++;
      age--;
    } else
    /* istanbul ignore next */
    {
      cov_7ctdtm3f8().b[23][1]++;
    }
    cov_7ctdtm3f8().s[75]++;
    return age;
  }

  /**
   * Filter object to only include allowed fields
   * @param {Object} obj - Object to filter
   * @param {...string} allowedFields - Allowed field names
   * @returns {Object} Filtered object
   */
  filterAllowedFields(obj, ...allowedFields) {
    /* istanbul ignore next */
    cov_7ctdtm3f8().f[12]++;
    const newObj =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[76]++, {});
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[77]++;
    Object.keys(obj).forEach(el => {
      /* istanbul ignore next */
      cov_7ctdtm3f8().f[13]++;
      cov_7ctdtm3f8().s[78]++;
      if (allowedFields.includes(el)) {
        /* istanbul ignore next */
        cov_7ctdtm3f8().b[25][0]++;
        cov_7ctdtm3f8().s[79]++;
        newObj[el] = obj[el];
      } else
      /* istanbul ignore next */
      {
        cov_7ctdtm3f8().b[25][1]++;
      }
    });
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[80]++;
    return newObj;
  }

  /**
   * Clear user-related cache
   * @param {string} userId - User ID
   * @returns {Promise<void>}
   */
  async clearUserCache(userId) {
    /* istanbul ignore next */
    cov_7ctdtm3f8().f[14]++;
    cov_7ctdtm3f8().s[81]++;
    try {
      const cacheKeys =
      /* istanbul ignore next */
      (cov_7ctdtm3f8().s[82]++, [`user:${userId}`, `user:profile:${userId}`, `user:favorites:${userId}`]);
      /* istanbul ignore next */
      cov_7ctdtm3f8().s[83]++;
      await Promise.all(cacheKeys.map(key => {
        /* istanbul ignore next */
        cov_7ctdtm3f8().f[15]++;
        cov_7ctdtm3f8().s[84]++;
        return this.deleteCachedData(key);
      }));
    } catch (error) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().s[85]++;
      // Log error but don't throw - cache clearing is not critical
      console.warn('Failed to clear user cache:', error.message);
    }
  }

  /**
   * Get user by ID with caching
   * @param {string} userId - User ID
   * @returns {Promise<Object>} User data
   */
  async getUserById(userId) {
    /* istanbul ignore next */
    cov_7ctdtm3f8().f[16]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_7ctdtm3f8().s[86]++, `user:${userId}`);
    /* istanbul ignore next */
    cov_7ctdtm3f8().s[87]++;
    try {
      // Try to get from cache first
      let user =
      /* istanbul ignore next */
      (cov_7ctdtm3f8().s[88]++, await this.getCachedData(cacheKey));
      /* istanbul ignore next */
      cov_7ctdtm3f8().s[89]++;
      if (!user) {
        /* istanbul ignore next */
        cov_7ctdtm3f8().b[26][0]++;
        cov_7ctdtm3f8().s[90]++;
        user = await userRepository.findById(userId, {
          select: '-password',
          lean: true
        });
        /* istanbul ignore next */
        cov_7ctdtm3f8().s[91]++;
        if (user) {
          /* istanbul ignore next */
          cov_7ctdtm3f8().b[27][0]++;
          cov_7ctdtm3f8().s[92]++;
          // Cache for 15 minutes
          await this.cacheData(cacheKey, user, 900);
        } else
        /* istanbul ignore next */
        {
          cov_7ctdtm3f8().b[27][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_7ctdtm3f8().b[26][1]++;
      }
      cov_7ctdtm3f8().s[93]++;
      return user;
    } catch (error) {
      /* istanbul ignore next */
      cov_7ctdtm3f8().s[94]++;
      // If cache fails, fall back to database
      return await userRepository.findById(userId, {
        select: '-password',
        lean: true
      });
    }
  }
}
/* istanbul ignore next */
cov_7ctdtm3f8().s[95]++;
module.exports = new UserService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,