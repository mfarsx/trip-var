9e874adb50e5dd2f1c5ed1d62bb70eee
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// List of countries with their codes for flag display
const COUNTRIES = [{
  name: 'Afghanistan',
  code: 'AF'
}, {
  name: 'Albania',
  code: 'AL'
}, {
  name: 'Algeria',
  code: 'DZ'
}, {
  name: 'Andorra',
  code: 'AD'
}, {
  name: 'Angola',
  code: 'AO'
}, {
  name: 'Argentina',
  code: 'AR'
}, {
  name: 'Australia',
  code: 'AU'
}, {
  name: 'Austria',
  code: 'AT'
}, {
  name: 'Azerbaijan',
  code: 'AZ'
}, {
  name: 'Bahamas',
  code: 'BS'
}, {
  name: 'Bahrain',
  code: 'BH'
}, {
  name: 'Bangladesh',
  code: 'BD'
}, {
  name: 'Belgium',
  code: 'BE'
}, {
  name: 'Brazil',
  code: 'BR'
}, {
  name: 'Canada',
  code: 'CA'
}, {
  name: 'China',
  code: 'CN'
}, {
  name: 'Denmark',
  code: 'DK'
}, {
  name: 'Egypt',
  code: 'EG'
}, {
  name: 'Finland',
  code: 'FI'
}, {
  name: 'France',
  code: 'FR'
}, {
  name: 'Germany',
  code: 'DE'
}, {
  name: 'Greece',
  code: 'GR'
}, {
  name: 'Hong Kong',
  code: 'HK'
}, {
  name: 'Iceland',
  code: 'IS'
}, {
  name: 'India',
  code: 'IN'
}, {
  name: 'Indonesia',
  code: 'ID'
}, {
  name: 'Iran',
  code: 'IR'
}, {
  name: 'Iraq',
  code: 'IQ'
}, {
  name: 'Ireland',
  code: 'IE'
}, {
  name: 'Israel',
  code: 'IL'
}, {
  name: 'Italy',
  code: 'IT'
}, {
  name: 'Japan',
  code: 'JP'
}, {
  name: 'Kazakhstan',
  code: 'KZ'
}, {
  name: 'Kenya',
  code: 'KE'
}, {
  name: 'Kuwait',
  code: 'KW'
}, {
  name: 'Malaysia',
  code: 'MY'
}, {
  name: 'Mexico',
  code: 'MX'
}, {
  name: 'Netherlands',
  code: 'NL'
}, {
  name: 'New Zealand',
  code: 'NZ'
}, {
  name: 'Norway',
  code: 'NO'
}, {
  name: 'Pakistan',
  code: 'PK'
}, {
  name: 'Philippines',
  code: 'PH'
}, {
  name: 'Poland',
  code: 'PL'
}, {
  name: 'Portugal',
  code: 'PT'
}, {
  name: 'Qatar',
  code: 'QA'
}, {
  name: 'Russia',
  code: 'RU'
}, {
  name: 'Saudi Arabia',
  code: 'SA'
}, {
  name: 'Singapore',
  code: 'SG'
}, {
  name: 'South Africa',
  code: 'ZA'
}, {
  name: 'South Korea',
  code: 'KR'
}, {
  name: 'Spain',
  code: 'ES'
}, {
  name: 'Sweden',
  code: 'SE'
}, {
  name: 'Switzerland',
  code: 'CH'
}, {
  name: 'Taiwan',
  code: 'TW'
}, {
  name: 'Thailand',
  code: 'TH'
}, {
  name: 'Turkey',
  code: 'TR'
}, {
  name: 'Ukraine',
  code: 'UA'
}, {
  name: 'United Arab Emirates',
  code: 'AE'
}, {
  name: 'United Kingdom',
  code: 'GB'
}, {
  name: 'United States',
  code: 'US'
}, {
  name: 'Vietnam',
  code: 'VN'
}].sort((a, b) => a.name.localeCompare(b.name));
const userSchema = new mongoose.Schema({
  email: {
    type: String,
    required: [true, 'Email is required'],
    unique: true,
    lowercase: true,
    trim: true,
    validate: {
      validator: function (v) {
        return /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/.test(v);
      },
      message: props => `${props.value} is not a valid email!`
    }
  },
  password: {
    type: String,
    required: [true, 'Password is required'],
    minlength: [6, 'Password must be at least 6 characters long'],
    select: false
  },
  name: {
    type: String,
    required: [true, 'Name is required'],
    trim: true
  },
  dateOfBirth: {
    type: Date,
    required: false,
    validate: {
      validator: function (v) {
        if (!v) {
          return true;
        } // Allow empty value
        const today = new Date();
        const birthDate = new Date(v);
        const age = today.getFullYear() - birthDate.getFullYear();
        const monthDiff = today.getMonth() - birthDate.getMonth();

        // Calculate actual age considering month and day
        const isOldEnough = monthDiff < 0 || monthDiff === 0 && today.getDate() < birthDate.getDate() ? age - 1 : age;
        return isOldEnough >= 20; // Minimum age requirement updated to 20
      },
      message: 'User must be at least 20 years old'
    }
  },
  nationality: {
    type: String,
    required: false,
    trim: true,
    validate: {
      validator: function (v) {
        if (!v) {
          return true;
        } // Allow empty value
        return COUNTRIES.some(country => country.name === v);
      },
      message: props => `${props.value} is not a valid country name`
    }
  },
  role: {
    type: String,
    enum: ['user', 'admin'],
    default: 'user'
  },
  favorites: {
    type: [mongoose.Schema.Types.ObjectId],
    ref: 'Destination',
    default: []
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  passwordChangedAt: Date,
  passwordResetToken: String,
  passwordResetExpires: Date,
  active: {
    type: Boolean,
    default: true,
    select: true
  }
}, {
  timestamps: true,
  toJSON: {
    virtuals: true,
    transform: function (doc, ret) {
      delete ret.password; // Always remove password
      return ret;
    }
  },
  toObject: {
    virtuals: true,
    transform: function (doc, ret) {
      delete ret.password; // Always remove password
      return ret;
    }
  }
});

// Hash password before saving
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) {
    return next();
  }
  this.password = await bcrypt.hash(this.password, 12);
  next();
});

// Compare password method
userSchema.methods.comparePassword = async function (candidatePassword) {
  return await bcrypt.compare(candidatePassword, this.password);
};

// Generate JWT token
userSchema.methods.generateAuthToken = function () {
  return jwt.sign({
    id: this._id,
    role: this.role
  }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN
  });
};

// Check if password was changed after token was issued
userSchema.methods.changedPasswordAfter = function (JWTTimestamp) {
  if (this.passwordChangedAt) {
    const changedTimestamp = parseInt(this.passwordChangedAt.getTime() / 1000, 10);
    return JWTTimestamp < changedTimestamp;
  }
  return false;
};

// Virtual field for age
userSchema.virtual('age').get(function () {
  if (!this.dateOfBirth) {
    return null;
  }
  const today = new Date();
  const birthDate = new Date(this.dateOfBirth);
  let age = today.getFullYear() - birthDate.getFullYear();
  const monthDiff = today.getMonth() - birthDate.getMonth();

  // Adjust age if birthday hasn't occurred this year
  if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birthDate.getDate()) {
    age--;
  }
  return age;
});
const User = mongoose.model('User', userSchema);
module.exports = User;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,