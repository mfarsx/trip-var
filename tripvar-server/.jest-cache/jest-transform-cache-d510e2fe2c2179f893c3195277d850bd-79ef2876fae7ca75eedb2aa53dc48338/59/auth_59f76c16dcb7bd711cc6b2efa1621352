3ac02a6e1ec0e47a9dbd97a306b3a854
/* istanbul ignore next */
function cov_1mjvm98adb() {
  var path = "/Users/mfarsx/dev/tripvar/tripvar-server/src/middleware/auth.js";
  var hash = "d0d2968bda49fbff81700d306befd2c836a0847a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/mfarsx/dev/tripvar/tripvar-server/src/middleware/auth.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 12
        },
        end: {
          line: 1,
          column: 35
        }
      },
      "1": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 2,
          column: 37
        }
      },
      "2": {
        start: {
          line: 3,
          column: 13
        },
        end: {
          line: 3,
          column: 44
        }
      },
      "3": {
        start: {
          line: 4,
          column: 46
        },
        end: {
          line: 4,
          column: 72
        }
      },
      "4": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 79,
          column: 2
        }
      },
      "5": {
        start: {
          line: 7,
          column: 2
        },
        end: {
          line: 78,
          column: 3
        }
      },
      "6": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 15,
          column: 5
        }
      },
      "7": {
        start: {
          line: 14,
          column: 6
        },
        end: {
          line: 14,
          column: 54
        }
      },
      "8": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 20,
          column: 5
        }
      },
      "9": {
        start: {
          line: 19,
          column: 6
        },
        end: {
          line: 19,
          column: 32
        }
      },
      "10": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 28,
          column: 5
        }
      },
      "11": {
        start: {
          line: 23,
          column: 6
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "12": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 75,
          column: 5
        }
      },
      "13": {
        start: {
          line: 32,
          column: 22
        },
        end: {
          line: 34,
          column: 8
        }
      },
      "14": {
        start: {
          line: 37,
          column: 19
        },
        end: {
          line: 37,
          column: 50
        }
      },
      "15": {
        start: {
          line: 38,
          column: 6
        },
        end: {
          line: 44,
          column: 7
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 43,
          column: 11
        }
      },
      "17": {
        start: {
          line: 47,
          column: 6
        },
        end: {
          line: 53,
          column: 7
        }
      },
      "18": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "19": {
        start: {
          line: 56,
          column: 6
        },
        end: {
          line: 56,
          column: 22
        }
      },
      "20": {
        start: {
          line: 57,
          column: 6
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "21": {
        start: {
          line: 60,
          column: 6
        },
        end: {
          line: 72,
          column: 7
        }
      },
      "22": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "23": {
        start: {
          line: 66,
          column: 13
        },
        end: {
          line: 72,
          column: 7
        }
      },
      "24": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 71,
          column: 11
        }
      },
      "25": {
        start: {
          line: 74,
          column: 6
        },
        end: {
          line: 74,
          column: 16
        }
      },
      "26": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 16
        }
      },
      "27": {
        start: {
          line: 81,
          column: 0
        },
        end: {
          line: 90,
          column: 2
        }
      },
      "28": {
        start: {
          line: 82,
          column: 2
        },
        end: {
          line: 89,
          column: 4
        }
      },
      "29": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 87,
          column: 5
        }
      },
      "30": {
        start: {
          line: 84,
          column: 6
        },
        end: {
          line: 86,
          column: 8
        }
      },
      "31": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 88,
          column: 11
        }
      },
      "32": {
        start: {
          line: 93,
          column: 0
        },
        end: {
          line: 93,
          column: 39
        }
      },
      "33": {
        start: {
          line: 94,
          column: 0
        },
        end: {
          line: 94,
          column: 39
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 23
          },
          end: {
            line: 6,
            column: 24
          }
        },
        loc: {
          start: {
            line: 6,
            column: 48
          },
          end: {
            line: 79,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 81,
            column: 20
          },
          end: {
            line: 81,
            column: 21
          }
        },
        loc: {
          start: {
            line: 81,
            column: 34
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 81
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 82,
            column: 9
          },
          end: {
            line: 82,
            column: 10
          }
        },
        loc: {
          start: {
            line: 82,
            column: 29
          },
          end: {
            line: 89,
            column: 3
          }
        },
        line: 82
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 11,
            column: 6
          },
          end: {
            line: 12,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 6
          },
          end: {
            line: 11,
            column: 31
          }
        }, {
          start: {
            line: 12,
            column: 6
          },
          end: {
            line: 12,
            column: 52
          }
        }],
        line: 11
      },
      "2": {
        loc: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "3": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 18,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 18,
            column: 14
          }
        }, {
          start: {
            line: 18,
            column: 18
          },
          end: {
            line: 18,
            column: 29
          }
        }, {
          start: {
            line: 18,
            column: 33
          },
          end: {
            line: 18,
            column: 50
          }
        }],
        line: 18
      },
      "4": {
        loc: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "5": {
        loc: {
          start: {
            line: 38,
            column: 6
          },
          end: {
            line: 44,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 6
          },
          end: {
            line: 44,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "6": {
        loc: {
          start: {
            line: 47,
            column: 6
          },
          end: {
            line: 53,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 6
          },
          end: {
            line: 53,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "7": {
        loc: {
          start: {
            line: 60,
            column: 6
          },
          end: {
            line: 72,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 6
          },
          end: {
            line: 72,
            column: 7
          }
        }, {
          start: {
            line: 66,
            column: 13
          },
          end: {
            line: 72,
            column: 7
          }
        }],
        line: 60
      },
      "8": {
        loc: {
          start: {
            line: 66,
            column: 13
          },
          end: {
            line: 72,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 13
          },
          end: {
            line: 72,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "9": {
        loc: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d0d2968bda49fbff81700d306befd2c836a0847a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mjvm98adb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mjvm98adb();
const jwt =
/* istanbul ignore next */
(cov_1mjvm98adb().s[0]++, require('jsonwebtoken'));
const {
  promisify
} =
/* istanbul ignore next */
(cov_1mjvm98adb().s[1]++, require('util'));
const User =
/* istanbul ignore next */
(cov_1mjvm98adb().s[2]++, require('../models/user.model'));
const {
  UnauthorizedError,
  ForbiddenError
} =
/* istanbul ignore next */
(cov_1mjvm98adb().s[3]++, require('../utils/errors'));
/* istanbul ignore next */
cov_1mjvm98adb().s[4]++;
exports.authenticate = async (req, res, next) => {
  /* istanbul ignore next */
  cov_1mjvm98adb().f[0]++;
  cov_1mjvm98adb().s[5]++;
  try {
    // 1) Get token and check if it exists
    let token;
    /* istanbul ignore next */
    cov_1mjvm98adb().s[6]++;
    if (
    /* istanbul ignore next */
    (cov_1mjvm98adb().b[1][0]++, req.headers.authorization) &&
    /* istanbul ignore next */
    (cov_1mjvm98adb().b[1][1]++, req.headers.authorization.startsWith('Bearer'))) {
      /* istanbul ignore next */
      cov_1mjvm98adb().b[0][0]++;
      cov_1mjvm98adb().s[7]++;
      token = req.headers.authorization.split(' ')[1];
    } else
    /* istanbul ignore next */
    {
      cov_1mjvm98adb().b[0][1]++;
    }

    // Additional security: Check for token in cookies as fallback
    cov_1mjvm98adb().s[8]++;
    if (
    /* istanbul ignore next */
    (cov_1mjvm98adb().b[3][0]++, !token) &&
    /* istanbul ignore next */
    (cov_1mjvm98adb().b[3][1]++, req.cookies) &&
    /* istanbul ignore next */
    (cov_1mjvm98adb().b[3][2]++, req.cookies.token)) {
      /* istanbul ignore next */
      cov_1mjvm98adb().b[2][0]++;
      cov_1mjvm98adb().s[9]++;
      token = req.cookies.token;
    } else
    /* istanbul ignore next */
    {
      cov_1mjvm98adb().b[2][1]++;
    }
    cov_1mjvm98adb().s[10]++;
    if (!token) {
      /* istanbul ignore next */
      cov_1mjvm98adb().b[4][0]++;
      cov_1mjvm98adb().s[11]++;
      return res.status(401).json({
        status: 'fail',
        message: 'You are not logged in! Please log in to get access.',
        code: 'UNAUTHORIZED'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mjvm98adb().b[4][1]++;
    }

    // 2) Verify token
    cov_1mjvm98adb().s[12]++;
    try {
      const decoded =
      /* istanbul ignore next */
      (cov_1mjvm98adb().s[13]++, await promisify(jwt.verify)(token, process.env.JWT_SECRET, {
        algorithms: ['HS256'] // Explicitly specify algorithm for security
      }));

      // 3) Check if user still exists
      const user =
      /* istanbul ignore next */
      (cov_1mjvm98adb().s[14]++, await User.findById(decoded.id));
      /* istanbul ignore next */
      cov_1mjvm98adb().s[15]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1mjvm98adb().b[5][0]++;
        cov_1mjvm98adb().s[16]++;
        return res.status(401).json({
          status: 'fail',
          message: 'The user belonging to this token no longer exists.',
          code: 'UNAUTHORIZED'
        });
      } else
      /* istanbul ignore next */
      {
        cov_1mjvm98adb().b[5][1]++;
      }

      // 4) Check if user changed password after the token was issued
      cov_1mjvm98adb().s[17]++;
      if (user.changedPasswordAfter(decoded.iat)) {
        /* istanbul ignore next */
        cov_1mjvm98adb().b[6][0]++;
        cov_1mjvm98adb().s[18]++;
        return res.status(401).json({
          status: 'fail',
          message: 'User recently changed password! Please log in again.',
          code: 'UNAUTHORIZED'
        });
      } else
      /* istanbul ignore next */
      {
        cov_1mjvm98adb().b[6][1]++;
      }

      // Grant access to protected route
      cov_1mjvm98adb().s[19]++;
      req.user = user;
      /* istanbul ignore next */
      cov_1mjvm98adb().s[20]++;
      next();
    } catch (err) {
      /* istanbul ignore next */
      cov_1mjvm98adb().s[21]++;
      // Handle JWT specific errors with clear messages
      if (err.name === 'TokenExpiredError') {
        /* istanbul ignore next */
        cov_1mjvm98adb().b[7][0]++;
        cov_1mjvm98adb().s[22]++;
        return res.status(401).json({
          status: 'fail',
          message: 'Your token has expired. Please log in again.',
          code: 'TOKEN_EXPIRED'
        });
      } else {
        /* istanbul ignore next */
        cov_1mjvm98adb().b[7][1]++;
        cov_1mjvm98adb().s[23]++;
        if (err.name === 'JsonWebTokenError') {
          /* istanbul ignore next */
          cov_1mjvm98adb().b[8][0]++;
          cov_1mjvm98adb().s[24]++;
          return res.status(401).json({
            status: 'fail',
            message: 'Invalid token. Please log in again.',
            code: 'INVALID_TOKEN'
          });
        } else
        /* istanbul ignore next */
        {
          cov_1mjvm98adb().b[8][1]++;
        }
      }
      // For other errors, pass to error handler
      /* istanbul ignore next */
      cov_1mjvm98adb().s[25]++;
      next(err);
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1mjvm98adb().s[26]++;
    next(error);
  }
};
/* istanbul ignore next */
cov_1mjvm98adb().s[27]++;
exports.authorize = (...roles) => {
  /* istanbul ignore next */
  cov_1mjvm98adb().f[1]++;
  cov_1mjvm98adb().s[28]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_1mjvm98adb().f[2]++;
    cov_1mjvm98adb().s[29]++;
    if (!roles.includes(req.user.role)) {
      /* istanbul ignore next */
      cov_1mjvm98adb().b[9][0]++;
      cov_1mjvm98adb().s[30]++;
      return next(new ForbiddenError('You do not have permission to perform this action'));
    } else
    /* istanbul ignore next */
    {
      cov_1mjvm98adb().b[9][1]++;
    }
    cov_1mjvm98adb().s[31]++;
    next();
  };
};

// Keep the old exports for backward compatibility
/* istanbul ignore next */
cov_1mjvm98adb().s[32]++;
exports.protect = exports.authenticate;
/* istanbul ignore next */
cov_1mjvm98adb().s[33]++;
exports.restrictTo = exports.authorize;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,