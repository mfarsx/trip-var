{"version":3,"names":["request","require","app","setupTestEnvironment","cleanupTestEnvironment","clearDatabase","createTestUser","createTestDestination","generateTestToken","generateFutureDates","expectSuccessResponse","describe","user","destination","token","beforeAll","afterAll","beforeEach","it","startTime","Date","now","response","get","expect","responseTime","toBeLessThan","post","send","email","password","requests","Array","fill","map","responses","Promise","allSettled","totalTime","successfulResponses","filter","status","value","length","toBe","createPromises","_","index","title","description","location","category","all","body","data","destinations","toBeGreaterThan","categories","forEach","categoryIndex","i","push","toLowerCase","featured","dates","bookingData","destinationId","_id","checkInDate","checkOutDate","numberOfGuests","paymentMethod","set","firstRequestStart","firstResponse","firstRequestTime","secondRequestStart","secondResponse","secondRequestTime"],"sources":["performance.test.js"],"sourcesContent":["const request = require('supertest');\nconst app = require('./app.test');\nconst {\n  setupTestEnvironment,\n  cleanupTestEnvironment,\n  clearDatabase,\n  createTestUser,\n  createTestDestination,\n  generateTestToken,\n  generateFutureDates,\n  expectSuccessResponse\n} = require('./setup');\n\ndescribe('Performance Tests', () => {\n  let user, destination, token;\n\n  beforeAll(async () => {\n    await setupTestEnvironment();\n  });\n\n  afterAll(async () => {\n    await cleanupTestEnvironment();\n  });\n\n  beforeEach(async () => {\n    await clearDatabase();\n    \n    // Create test data\n    user = await createTestUser();\n    destination = await createTestDestination();\n    token = generateTestToken(user);\n  });\n\n  describe('Response Time Tests', () => {\n    it('should respond to destination list within acceptable time', async () => {\n      const startTime = Date.now();\n      \n      const response = await request(app)\n        .get('/api/v1/destinations')\n        .expect(200);\n\n      const responseTime = Date.now() - startTime;\n      \n      expectSuccessResponse(response, 200);\n      expect(responseTime).toBeLessThan(1000); // Should respond within 1 second\n    });\n\n    it('should respond to authentication within acceptable time', async () => {\n      const startTime = Date.now();\n      \n      const response = await request(app)\n        .post('/api/v1/auth/login')\n        .send({\n          email: user.email,\n          password: 'TestPassword123!'\n        })\n        .expect(200);\n\n      const responseTime = Date.now() - startTime;\n      \n      expectSuccessResponse(response, 200);\n      expect(responseTime).toBeLessThan(2000); // Should respond within 2 seconds\n    });\n\n    it('should handle concurrent requests efficiently', async () => {\n      const startTime = Date.now();\n      \n      const requests = Array(10).fill().map(() =>\n        request(app).get('/api/v1/destinations')\n      );\n\n      const responses = await Promise.allSettled(requests);\n      const totalTime = Date.now() - startTime;\n      \n      // All requests should succeed\n      const successfulResponses = responses.filter(\n        response => response.status === 'fulfilled' && response.value.status === 200\n      );\n\n      expect(successfulResponses.length).toBe(10);\n      expect(totalTime).toBeLessThan(5000); // All requests should complete within 5 seconds\n    });\n  });\n\n  describe('Memory Usage Tests', () => {\n    it('should handle large dataset queries efficiently', async () => {\n      // Create multiple destinations\n      const createPromises = Array(50).fill().map((_, index) => {\n        return createTestDestination({\n          title: `Performance Test Destination ${index}`,\n          description: 'Performance test description',\n          location: 'Test Location',\n          category: 'Test'\n        });\n      });\n\n      await Promise.all(createPromises);\n\n      const startTime = Date.now();\n      \n      const response = await request(app)\n        .get('/api/v1/destinations')\n        .expect(200);\n\n      const responseTime = Date.now() - startTime;\n      \n      expectSuccessResponse(response, 200);\n      expect(response.body.data.destinations.length).toBeGreaterThan(50);\n      expect(responseTime).toBeLessThan(2000); // Should handle large datasets efficiently\n    });\n\n    it('should handle pagination efficiently', async () => {\n      // Create multiple destinations\n      const createPromises = Array(100).fill().map((_, index) => {\n        return createTestDestination({\n          title: `Pagination Test Destination ${index}`,\n          description: 'Pagination test description',\n          location: 'Test Location',\n          category: 'Test'\n        });\n      });\n\n      await Promise.all(createPromises);\n\n      const startTime = Date.now();\n      \n      const response = await request(app)\n        .get('/api/v1/destinations?page=1&limit=10')\n        .expect(200);\n\n      const responseTime = Date.now() - startTime;\n      \n      expectSuccessResponse(response, 200);\n      expect(response.body.data.destinations.length).toBe(10);\n      expect(responseTime).toBeLessThan(1000); // Pagination should be fast\n    });\n  });\n\n  describe('Database Performance Tests', () => {\n    it('should handle complex queries efficiently', async () => {\n      // Create destinations with different categories\n      const categories = ['Beach', 'Mountain', 'City', 'Adventure'];\n      const createPromises = [];\n\n      categories.forEach((category, categoryIndex) => {\n        for (let i = 0; i < 25; i++) {\n          createPromises.push(\n            createTestDestination({\n              title: `${category} Destination ${i}`,\n              description: `Beautiful ${category.toLowerCase()} destination`,\n              location: `${category} Location ${i}`,\n              category: category,\n              featured: i % 5 === 0\n            })\n          );\n        }\n      });\n\n      await Promise.all(createPromises);\n\n      const startTime = Date.now();\n      \n      // Test complex search with multiple filters\n      const response = await request(app)\n        .get('/api/v1/destinations?category=Beach&featured=true&search=beautiful')\n        .expect(200);\n\n      const responseTime = Date.now() - startTime;\n      \n      expectSuccessResponse(response, 200);\n      expect(responseTime).toBeLessThan(1500); // Complex queries should be reasonably fast\n    });\n\n    it('should handle booking creation efficiently', async () => {\n      const dates = generateFutureDates();\n      const startTime = Date.now();\n      \n      const bookingData = {\n        destinationId: destination._id,\n        checkInDate: dates.checkInDate,\n        checkOutDate: dates.checkOutDate,\n        numberOfGuests: 2,\n        paymentMethod: 'credit-card'\n      };\n\n      const response = await request(app)\n        .post('/api/v1/bookings')\n        .set('Authorization', `Bearer ${token}`)\n        .send(bookingData)\n        .expect(201);\n\n      const responseTime = Date.now() - startTime;\n      \n      expectSuccessResponse(response, 201);\n      expect(responseTime).toBeLessThan(2000); // Booking creation should be reasonably fast\n    });\n  });\n\n  describe('Caching Performance Tests', () => {\n    it('should benefit from caching on repeated requests', async () => {\n      // First request (cache miss)\n      const firstRequestStart = Date.now();\n      const firstResponse = await request(app)\n        .get('/api/v1/destinations')\n        .expect(200);\n      const firstRequestTime = Date.now() - firstRequestStart;\n\n      // Second request (should be faster due to caching)\n      const secondRequestStart = Date.now();\n      const secondResponse = await request(app)\n        .get('/api/v1/destinations')\n        .expect(200);\n      const secondRequestTime = Date.now() - secondRequestStart;\n\n      expectSuccessResponse(firstResponse, 200);\n      expectSuccessResponse(secondResponse, 200);\n      \n      // Second request should be faster (though this might not always be true in test environment)\n      // The important thing is that both requests succeed\n      expect(firstRequestTime).toBeLessThan(2000);\n      expect(secondRequestTime).toBeLessThan(2000);\n    });\n  });\n\n  describe('Load Testing', () => {\n    it('should handle moderate load without degradation', async () => {\n      const startTime = Date.now();\n      \n      // Simulate moderate load with 20 concurrent requests\n      const requests = Array(20).fill().map((_, index) => {\n        if (index % 2 === 0) {\n          // GET requests\n          return request(app).get('/api/v1/destinations');\n        } else {\n          // POST requests (login)\n          return request(app)\n            .post('/api/v1/auth/login')\n            .send({\n              email: user.email,\n              password: 'TestPassword123!'\n            });\n        }\n      });\n\n      const responses = await Promise.allSettled(requests);\n      const totalTime = Date.now() - startTime;\n      \n      // Count successful responses\n      const successfulResponses = responses.filter(\n        response => response.status === 'fulfilled' && \n        (response.value.status === 200 || response.value.status === 201)\n      );\n\n      expect(successfulResponses.length).toBeGreaterThan(15); // At least 75% should succeed\n      expect(totalTime).toBeLessThan(10000); // Should complete within 10 seconds\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}