{"version":3,"names":["successResponse","paginatedResponse","require","asyncHandler","ValidationError","BaseController","sendSuccess","res","data","message","statusCode","status","json","sendPaginated","page","limit","total","validateRequestBody","body","requiredFields","missingFields","filter","field","undefined","length","join","validateRequestParams","params","requiredParams","missingParams","param","sanitizeRequestBody","allowedFields","sanitized","Object","keys","forEach","key","includes","trim","getPaginationParams","query","Math","max","parseInt","min","skip","getSortParams","defaultSort","sortBy","sortOrder","providedField","getFilterParams","allowedFilters","filters","handleService","serviceMethod","args","req","next","result","error","handleServiceWithResponse","responseHandler","createCRUDOperations","service","resourceName","getAll","getAllowedFilters","getAllowedSortFields","sort","getById","id","create","sanitizedBody","getAllowedFields","update","delete","module","exports"],"sources":["base.controller.js"],"sourcesContent":["const { successResponse, paginatedResponse } = require('../utils/response');\nconst { asyncHandler } = require('../utils/asyncHandler');\nconst { ValidationError } = require('../utils/errors');\n\n/**\n * Base controller class with common functionality\n */\nclass BaseController {\n  /**\n   * Send success response\n   * @param {Object} res - Express response object\n   * @param {*} data - Response data\n   * @param {string} message - Success message\n   * @param {number} statusCode - HTTP status code\n   */\n  sendSuccess(res, data = null, message = 'Success', statusCode = 200) {\n    res.status(statusCode).json(successResponse(data, message));\n  }\n\n  /**\n   * Send paginated response\n   * @param {Object} res - Express response object\n   * @param {Array} data - Response data\n   * @param {number} page - Current page\n   * @param {number} limit - Items per page\n   * @param {number} total - Total items\n   * @param {string} message - Success message\n   */\n  sendPaginated(res, data, page, limit, total) {\n    res.status(200).json(paginatedResponse(data, page, limit, total));\n  }\n\n  /**\n   * Validate request body\n   * @param {Object} body - Request body\n   * @param {Array<string>} requiredFields - Required field names\n   * @throws {ValidationError} If validation fails\n   */\n  validateRequestBody(body, requiredFields) {\n    const missingFields = requiredFields.filter(field =>\n      body[field] === undefined || body[field] === null || body[field] === ''\n    );\n\n    if (missingFields.length > 0) {\n      throw new ValidationError(\n        `Missing required fields: ${missingFields.join(', ')}`,\n        { missingFields }\n      );\n    }\n  }\n\n  /**\n   * Validate request parameters\n   * @param {Object} params - Request parameters\n   * @param {Array<string>} requiredParams - Required parameter names\n   * @throws {ValidationError} If validation fails\n   */\n  validateRequestParams(params, requiredParams) {\n    const missingParams = requiredParams.filter(param =>\n      !params[param] || params[param] === ''\n    );\n\n    if (missingParams.length > 0) {\n      throw new ValidationError(\n        `Missing required parameters: ${missingParams.join(', ')}`,\n        { missingParams }\n      );\n    }\n  }\n\n  /**\n   * Sanitize request body\n   * @param {Object} body - Request body\n   * @param {Array<string>} allowedFields - Allowed field names\n   * @returns {Object} Sanitized body\n   */\n  sanitizeRequestBody(body, allowedFields) {\n    const sanitized = {};\n\n    Object.keys(body).forEach(key => {\n      if (allowedFields.includes(key)) {\n        // Basic sanitization\n        if (typeof body[key] === 'string') {\n          sanitized[key] = body[key].trim();\n        } else {\n          sanitized[key] = body[key];\n        }\n      }\n    });\n\n    return sanitized;\n  }\n\n  /**\n   * Get pagination parameters from query\n   * @param {Object} query - Request query object\n   * @returns {Object} Pagination parameters\n   */\n  getPaginationParams(query) {\n    const page = Math.max(1, parseInt(query.page, 10) || 1);\n    const limit = Math.min(100, Math.max(1, parseInt(query.limit, 10) || 10));\n    const skip = (page - 1) * limit;\n\n    return { page, limit, skip };\n  }\n\n  /**\n   * Get sorting parameters from query\n   * @param {Object} query - Request query object\n   * @param {Array<string>} allowedFields - Allowed sort fields\n   * @param {string} defaultSort - Default sort field\n   * @returns {Object} Sort parameters\n   */\n  getSortParams(query, allowedFields = [], defaultSort = 'createdAt') {\n    const sortBy = query.sortBy || defaultSort;\n    const sortOrder = query.sortOrder === 'asc' ? 1 : -1;\n\n    // Validate sort field\n    if (allowedFields.length > 0 && !allowedFields.includes(sortBy)) {\n      throw new ValidationError(\n        `Invalid sort field. Allowed fields: ${allowedFields.join(', ')}`,\n        { allowedFields, providedField: sortBy }\n      );\n    }\n\n    return { sortBy, sortOrder };\n  }\n\n  /**\n   * Get filter parameters from query\n   * @param {Object} query - Request query object\n   * @param {Array<string>} allowedFilters - Allowed filter fields\n   * @returns {Object} Filter parameters\n   */\n  getFilterParams(query, allowedFilters = []) {\n    const filters = {};\n\n    allowedFilters.forEach(field => {\n      if (query[field] !== undefined && query[field] !== '') {\n        filters[field] = query[field];\n      }\n    });\n\n    return filters;\n  }\n\n  /**\n   * Handle service method execution\n   * @param {Function} serviceMethod - Service method to execute\n   * @param {Array} args - Arguments to pass to service method\n   * @returns {Function} Express middleware function\n   */\n  handleService(serviceMethod, ...args) {\n    return asyncHandler(async(req, res, next) => {\n      try {\n        const result = await serviceMethod(...args);\n        this.sendSuccess(res, result);\n      } catch (error) {\n        next(error);\n      }\n    });\n  }\n\n  /**\n   * Handle service method with custom response\n   * @param {Function} serviceMethod - Service method to execute\n   * @param {Function} responseHandler - Custom response handler\n   * @param {Array} args - Arguments to pass to service method\n   * @returns {Function} Express middleware function\n   */\n  handleServiceWithResponse(serviceMethod, responseHandler, ...args) {\n    return asyncHandler(async(req, res, next) => {\n      try {\n        const result = await serviceMethod(...args);\n        responseHandler(res, result);\n      } catch (error) {\n        next(error);\n      }\n    });\n  }\n\n  /**\n   * Create CRUD operations for a service\n   * @param {Object} service - Service instance\n   * @param {string} resourceName - Name of the resource\n   * @returns {Object} CRUD operation methods\n   */\n  createCRUDOperations(service, resourceName) {\n    return {\n      // Get all resources\n      getAll: asyncHandler(async(req, res, next) => {\n        try {\n          const { page, limit, skip } = this.getPaginationParams(req.query);\n          const filters = this.getFilterParams(req.query, service.getAllowedFilters?.() || []);\n          const { sortBy, sortOrder } = this.getSortParams(req.query, service.getAllowedSortFields?.() || []);\n\n          const result = await service.getAll({\n            page,\n            limit,\n            skip,\n            filters,\n            sort: { [sortBy]: sortOrder }\n          });\n\n          this.sendPaginated(res, result.data, page, limit, result.total);\n        } catch (error) {\n          next(error);\n        }\n      }),\n\n      // Get resource by ID\n      getById: asyncHandler(async(req, res, next) => {\n        try {\n          this.validateRequestParams(req.params, ['id']);\n          const result = await service.getById(req.params.id);\n          this.sendSuccess(res, result);\n        } catch (error) {\n          next(error);\n        }\n      }),\n\n      // Create new resource\n      create: asyncHandler(async(req, res, next) => {\n        try {\n          const sanitizedBody = this.sanitizeRequestBody(req.body, service.getAllowedFields?.() || []);\n          const result = await service.create(sanitizedBody);\n          this.sendSuccess(res, result, `${resourceName} created successfully`, 201);\n        } catch (error) {\n          next(error);\n        }\n      }),\n\n      // Update resource\n      update: asyncHandler(async(req, res, next) => {\n        try {\n          this.validateRequestParams(req.params, ['id']);\n          const sanitizedBody = this.sanitizeRequestBody(req.body, service.getAllowedFields?.() || []);\n          const result = await service.update(req.params.id, sanitizedBody);\n          this.sendSuccess(res, result, `${resourceName} updated successfully`);\n        } catch (error) {\n          next(error);\n        }\n      }),\n\n      // Delete resource\n      delete: asyncHandler(async(req, res, next) => {\n        try {\n          this.validateRequestParams(req.params, ['id']);\n          await service.delete(req.params.id);\n          this.sendSuccess(res, null, `${resourceName} deleted successfully`, 204);\n        } catch (error) {\n          next(error);\n        }\n      })\n    };\n  }\n}\n\nmodule.exports = BaseController;"],"mappings":"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","ignoreList":[]}