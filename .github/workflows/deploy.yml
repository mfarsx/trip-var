name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd tripvar-server && npm ci
          cd ../tripvar-client && npm ci

      - name: Run tests
        run: |
          # Server tests
          cd tripvar-server
          npm run test:coverage
          cd ../tripvar-client
          npm run test:coverage
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/tripvar-test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key-for-testing-only

      - name: Build client
        working-directory: ./tripvar-client
        run: npm run build
        env:
          NODE_ENV: production
          VITE_API_URL: ${{ secrets.API_URL }}

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [server, client]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./tripvar-${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # For example, using Docker Compose or Kubernetes
          
          # Example with Docker Compose:
          # docker-compose -f docker-compose.staging.yml up -d
          
          # Example with Kubernetes:
          # kubectl apply -f k8s/staging/
          
          echo "Staging deployment completed"

      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Add health check commands here
          # curl -f ${{ secrets.STAGING_URL }}/health
          echo "Health checks completed"

      - name: Notify deployment
        run: |
          echo "Staging deployment successful!"
          # Add notification logic here (Slack, Discord, etc.)

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, deploy-staging]
    if: github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          
          # Example with Docker Compose:
          # docker-compose -f docker-compose.prod.yml up -d
          
          # Example with Kubernetes:
          # kubectl apply -f k8s/production/
          
          echo "Production deployment completed"

      - name: Run health checks
        run: |
          echo "Running production health checks..."
          # Add health check commands here
          # curl -f ${{ secrets.PRODUCTION_URL }}/health
          echo "Health checks completed"

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated deployment to production
            
            Changes in this release:
            - See commit history for details
            
            Deployment completed at: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

      - name: Notify deployment
        run: |
          echo "Production deployment successful!"
          # Add notification logic here (Slack, Discord, etc.)

  # Rollback (Manual trigger)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        run: |
          echo "Rolling back deployment..."
          # Add rollback commands here
          
          # Example with Docker Compose:
          # docker-compose -f docker-compose.prod.yml down
          # docker-compose -f docker-compose.prod.yml up -d --scale server=0
          # docker-compose -f docker-compose.prod.yml up -d
          
          echo "Rollback completed"

      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          # Add verification commands here
          # curl -f ${{ secrets.PRODUCTION_URL }}/health
          echo "Rollback verification completed"

      - name: Notify rollback
        run: |
          echo "Rollback completed successfully!"
          # Add notification logic here