{"version":3,"names":["cov_2mhdytxhta","actualCoverage","express","s","require","router","Router","mongoose","getRedisClient","config","os","process","healthChecker","redisClient","get","req","res","f","health","status","timestamp","Date","toISOString","service","version","b","env","npm_package_version","environment","server","nodeEnv","uptime","json","dbState","connection","readyState","database","error","message","startTime","now","ping","responseTime","redis","metrics","system","memory","used","memoryUsage","free","freemem","total","totalmem","cpu","loadAverage","loadavg","cpus","length","platform","arch","nodeVersion","pid","ppid","title","argv","execPath","services","checks","dbStartTime","dbResponseTime","mongodb","redisStartTime","redisResponseTime","memoryUsagePercent","heapUsed","heapTotal","Math","round","usagePercent","statusCode","redisReady","redisError","console","warn","reason","module","exports"],"sources":["health.routes.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst mongoose = require('mongoose');\nconst { getRedisClient } = require('../config/redis');\n// const { HealthChecker, createHealthCheckMiddleware, createReadinessMiddleware, createLivenessMiddleware, createMetricsMiddleware } = require('../middleware/healthCheck');\n\nconst config = require('../config/config');\nconst os = require('os');\nconst process = require('process');\n\n// Initialize health checker\nlet healthChecker;\nlet redisClient;\n\n// Initialize health checker without Redis initially\n// healthChecker = new HealthChecker(null); // HealthChecker not implemented yet\n\n// Metrics middleware\n// const metricsMiddleware = createMetricsMiddleware(); // Metrics middleware not implemented yet\n\n// Basic health check\nrouter.get('/', (req, res) => {\n  const health = {\n    status: 'ok',\n    timestamp: new Date().toISOString(),\n    service: 'tripvar-server',\n    version: process.env.npm_package_version || '1.0.0',\n    environment: config.server.nodeEnv,\n    uptime: process.uptime()\n  };\n\n  res.json(health);\n});\n\n// Database health check\nrouter.get('/db', async(req, res) => {\n  try {\n    const dbState = mongoose.connection.readyState;\n    if (dbState === 1) {\n      res.json({ status: 'ok', database: 'connected' });\n    } else {\n      res.status(503).json({ status: 'error', database: 'disconnected' });\n    }\n  } catch (error) {\n    res.status(503).json({ status: 'error', message: error.message });\n  }\n});\n\n// Redis health check\nrouter.get('/redis', async(req, res) => {\n  try {\n    const redisClient = getRedisClient();\n    const startTime = Date.now();\n    await redisClient.ping();\n    const responseTime = Date.now() - startTime;\n\n    res.json({\n      status: 'ok',\n      redis: 'connected',\n      responseTime: `${responseTime}ms`\n    });\n  } catch (error) {\n    res.status(503).json({\n      status: 'error',\n      redis: 'disconnected',\n      message: error.message\n    });\n  }\n});\n\n// System metrics\nrouter.get('/metrics', (req, res) => {\n  const metrics = {\n    timestamp: new Date().toISOString(),\n    system: {\n      uptime: process.uptime(),\n      memory: {\n        used: process.memoryUsage(),\n        free: os.freemem(),\n        total: os.totalmem()\n      },\n      cpu: {\n        loadAverage: os.loadavg(),\n        cpus: os.cpus().length\n      },\n      platform: os.platform(),\n      arch: os.arch(),\n      nodeVersion: process.version\n    },\n    process: {\n      pid: process.pid,\n      ppid: process.ppid,\n      title: process.title,\n      argv: process.argv,\n      execPath: process.execPath\n    }\n  };\n\n  res.json(metrics);\n});\n\n// Complete health check (all services)\nrouter.get('/all', async(req, res) => {\n  const startTime = Date.now();\n  const health = {\n    status: 'ok',\n    timestamp: new Date().toISOString(),\n    service: 'tripvar-server',\n    version: process.env.npm_package_version || '1.0.0',\n    environment: config.server.nodeEnv,\n    uptime: process.uptime(),\n    services: {},\n    checks: {}\n  };\n\n  // Check MongoDB\n  try {\n    const dbStartTime = Date.now();\n    const dbState = mongoose.connection.readyState;\n    const dbResponseTime = Date.now() - dbStartTime;\n\n    health.services.mongodb = {\n      status: dbState === 1 ? 'connected' : 'disconnected',\n      responseTime: `${dbResponseTime}ms`,\n      readyState: dbState\n    };\n\n    health.checks.mongodb = dbState === 1 ? 'pass' : 'fail';\n\n    if (dbState !== 1) {\n      health.status = 'degraded';\n    }\n  } catch (error) {\n    health.services.mongodb = {\n      status: 'error',\n      error: error.message\n    };\n    health.checks.mongodb = 'fail';\n    health.status = 'error';\n  }\n\n  // Check Redis\n  try {\n    const redisStartTime = Date.now();\n    const redisClient = getRedisClient();\n    await redisClient.ping();\n    const redisResponseTime = Date.now() - redisStartTime;\n\n    health.services.redis = {\n      status: 'connected',\n      responseTime: `${redisResponseTime}ms`\n    };\n\n    health.checks.redis = 'pass';\n  } catch (error) {\n    health.services.redis = {\n      status: 'disconnected',\n      error: error.message\n    };\n    health.checks.redis = 'fail';\n    health.status = 'degraded';\n  }\n\n  // System health\n  const memoryUsage = process.memoryUsage();\n  const memoryUsagePercent = (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100;\n\n  health.system = {\n    memory: {\n      used: `${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB`,\n      total: `${Math.round(memoryUsage.heapTotal / 1024 / 1024)}MB`,\n      usagePercent: Math.round(memoryUsagePercent)\n    },\n    uptime: `${Math.round(process.uptime())}s`,\n    loadAverage: os.loadavg()\n  };\n\n  // Overall response time\n  health.responseTime = `${Date.now() - startTime}ms`;\n\n  // Determine status code\n  let statusCode = 200;\n  if (health.status === 'error') {\n    statusCode = 503;\n  } else if (health.status === 'degraded') {\n    statusCode = 200; // Still operational but with issues\n  }\n\n  res.status(statusCode).json(health);\n});\n\n// Readiness probe (for Kubernetes)\nrouter.get('/ready', async(req, res) => {\n  try {\n    // Check if all critical services are ready\n    const dbState = mongoose.connection.readyState;\n\n    // Check Redis if available\n    let redisReady = true;\n    try {\n      const redisClient = getRedisClient();\n      await redisClient.ping();\n    } catch (redisError) {\n      redisReady = false;\n      // Redis is not critical for readiness, just log the warning\n      console.warn('Redis not ready:', redisError.message);\n    }\n\n    if (dbState === 1) {\n      res.status(200).json({\n        status: 'ready',\n        services: {\n          database: 'ready',\n          redis: redisReady ? 'ready' : 'not ready'\n        }\n      });\n    } else {\n      res.status(503).json({ status: 'not ready', reason: 'database not connected' });\n    }\n  } catch (error) {\n    res.status(503).json({ status: 'not ready', reason: error.message });\n  }\n});\n\n// Liveness probe (for Kubernetes)\nrouter.get('/live', (req, res) => {\n  // Simple check if the process is alive\n  res.status(200).json({ status: 'alive', uptime: process.uptime() });\n});\n\nmodule.exports = router;\n"],"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","ignoreList":[]}