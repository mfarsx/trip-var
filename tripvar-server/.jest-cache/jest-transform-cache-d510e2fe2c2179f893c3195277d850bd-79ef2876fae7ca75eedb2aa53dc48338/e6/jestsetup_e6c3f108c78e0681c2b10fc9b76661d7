7a6d3a7f15709deae3296d05b789621a
// Global Jest setup for Tripvar Server Tests

// Mock Redis before any other imports

// Mock Redis utilities

// Mock logger to reduce noise in tests
_getJestObj().mock('ioredis', () => {
  const mockRedis = {
    get: jest.fn().mockResolvedValue(null),
    set: jest.fn().mockResolvedValue('OK'),
    del: jest.fn().mockResolvedValue(1),
    exists: jest.fn().mockResolvedValue(0),
    expire: jest.fn().mockResolvedValue(1),
    flushall: jest.fn().mockResolvedValue('OK'),
    ping: jest.fn().mockResolvedValue('PONG'),
    quit: jest.fn().mockResolvedValue('OK'),
    publish: jest.fn().mockResolvedValue(1),
    subscribe: jest.fn().mockResolvedValue(1),
    unsubscribe: jest.fn().mockResolvedValue(1),
    pipeline: jest.fn(() => ({
      get: jest.fn().mockReturnThis(),
      set: jest.fn().mockReturnThis(),
      del: jest.fn().mockReturnThis(),
      exec: jest.fn().mockResolvedValue([])
    })),
    on: jest.fn(),
    connect: jest.fn().mockResolvedValue(),
    disconnect: jest.fn().mockResolvedValue(),
    status: 'ready'
  };
  return {
    Redis: jest.fn(() => mockRedis),
    default: jest.fn(() => mockRedis),
    createClient: jest.fn(() => mockRedis)
  };
});
_getJestObj().mock('../config/redis', () => ({
  connectRedis: jest.fn().mockResolvedValue(),
  disconnectRedis: jest.fn().mockResolvedValue(),
  getRedisClient: jest.fn(() => ({
    get: jest.fn().mockResolvedValue(null),
    set: jest.fn().mockResolvedValue('OK'),
    del: jest.fn().mockResolvedValue(1),
    exists: jest.fn().mockResolvedValue(0),
    expire: jest.fn().mockResolvedValue(1),
    flushall: jest.fn().mockResolvedValue('OK'),
    ping: jest.fn().mockResolvedValue('PONG'),
    quit: jest.fn().mockResolvedValue('OK'),
    status: 'ready'
  })),
  redisUtils: {
    deleteCache: jest.fn().mockResolvedValue(true),
    getCache: jest.fn().mockResolvedValue(null),
    setCache: jest.fn().mockResolvedValue('OK'),
    exists: jest.fn().mockResolvedValue(false),
    expire: jest.fn().mockResolvedValue(true),
    flushall: jest.fn().mockResolvedValue('OK')
  }
}));
_getJestObj().mock('../utils/logger', () => ({
  info: jest.fn(),
  error: jest.fn(),
  warn: jest.fn(),
  debug: jest.fn()
}));

// Set test environment variables
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
process.env.NODE_ENV = 'test';
process.env.JWT_SECRET = 'test-jwt-secret-key-for-testing-only';
process.env.JWT_EXPIRES_IN = '1h';
process.env.LOG_LEVEL = 'error';
process.env.REDIS_URL = 'redis://localhost:6379';

// Increase timeout for tests
jest.setTimeout(30000);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJtb2NrUmVkaXMiLCJnZXQiLCJqZXN0IiwiZm4iLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInNldCIsImRlbCIsImV4aXN0cyIsImV4cGlyZSIsImZsdXNoYWxsIiwicGluZyIsInF1aXQiLCJwdWJsaXNoIiwic3Vic2NyaWJlIiwidW5zdWJzY3JpYmUiLCJwaXBlbGluZSIsIm1vY2tSZXR1cm5UaGlzIiwiZXhlYyIsIm9uIiwiY29ubmVjdCIsImRpc2Nvbm5lY3QiLCJzdGF0dXMiLCJSZWRpcyIsImRlZmF1bHQiLCJjcmVhdGVDbGllbnQiLCJjb25uZWN0UmVkaXMiLCJkaXNjb25uZWN0UmVkaXMiLCJnZXRSZWRpc0NsaWVudCIsInJlZGlzVXRpbHMiLCJkZWxldGVDYWNoZSIsImdldENhY2hlIiwic2V0Q2FjaGUiLCJpbmZvIiwiZXJyb3IiLCJ3YXJuIiwiZGVidWciLCJyZXF1aXJlIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiSldUX1NFQ1JFVCIsIkpXVF9FWFBJUkVTX0lOIiwiTE9HX0xFVkVMIiwiUkVESVNfVVJMIiwic2V0VGltZW91dCJdLCJzb3VyY2VzIjpbImplc3Quc2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2xvYmFsIEplc3Qgc2V0dXAgZm9yIFRyaXB2YXIgU2VydmVyIFRlc3RzXG5cbi8vIE1vY2sgUmVkaXMgYmVmb3JlIGFueSBvdGhlciBpbXBvcnRzXG5qZXN0Lm1vY2soJ2lvcmVkaXMnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tSZWRpcyA9IHtcbiAgICBnZXQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKSxcbiAgICBzZXQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgnT0snKSxcbiAgICBkZWw6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgxKSxcbiAgICBleGlzdHM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgwKSxcbiAgICBleHBpcmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgxKSxcbiAgICBmbHVzaGFsbDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCdPSycpLFxuICAgIHBpbmc6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgnUE9ORycpLFxuICAgIHF1aXQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgnT0snKSxcbiAgICBwdWJsaXNoOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoMSksXG4gICAgc3Vic2NyaWJlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoMSksXG4gICAgdW5zdWJzY3JpYmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgxKSxcbiAgICBwaXBlbGluZTogamVzdC5mbigoKSA9PiAoe1xuICAgICAgZ2V0OiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICAgIHNldDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgICBkZWw6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgICAgZXhlYzogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtdKVxuICAgIH0pKSxcbiAgICBvbjogamVzdC5mbigpLFxuICAgIGNvbm5lY3Q6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgpLFxuICAgIGRpc2Nvbm5lY3Q6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgpLFxuICAgIHN0YXR1czogJ3JlYWR5J1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgUmVkaXM6IGplc3QuZm4oKCkgPT4gbW9ja1JlZGlzKSxcbiAgICBkZWZhdWx0OiBqZXN0LmZuKCgpID0+IG1vY2tSZWRpcyksXG4gICAgY3JlYXRlQ2xpZW50OiBqZXN0LmZuKCgpID0+IG1vY2tSZWRpcylcbiAgfTtcbn0pO1xuXG4vLyBNb2NrIFJlZGlzIHV0aWxpdGllc1xuamVzdC5tb2NrKCcuLi9jb25maWcvcmVkaXMnLCAoKSA9PiAoe1xuICBjb25uZWN0UmVkaXM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgpLFxuICBkaXNjb25uZWN0UmVkaXM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgpLFxuICBnZXRSZWRpc0NsaWVudDogamVzdC5mbigoKSA9PiAoe1xuICAgIGdldDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpLFxuICAgIHNldDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCdPSycpLFxuICAgIGRlbDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKDEpLFxuICAgIGV4aXN0czogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKDApLFxuICAgIGV4cGlyZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKDEpLFxuICAgIGZsdXNoYWxsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ09LJyksXG4gICAgcGluZzogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCdQT05HJyksXG4gICAgcXVpdDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCdPSycpLFxuICAgIHN0YXR1czogJ3JlYWR5J1xuICB9KSksXG4gIHJlZGlzVXRpbHM6IHtcbiAgICBkZWxldGVDYWNoZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICAgIGdldENhY2hlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobnVsbCksXG4gICAgc2V0Q2FjaGU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgnT0snKSxcbiAgICBleGlzdHM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShmYWxzZSksXG4gICAgZXhwaXJlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gICAgZmx1c2hhbGw6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgnT0snKVxuICB9XG59KSk7XG5cbi8vIE1vY2sgbG9nZ2VyIHRvIHJlZHVjZSBub2lzZSBpbiB0ZXN0c1xuamVzdC5tb2NrKCcuLi91dGlscy9sb2dnZXInLCAoKSA9PiAoe1xuICBpbmZvOiBqZXN0LmZuKCksXG4gIGVycm9yOiBqZXN0LmZuKCksXG4gIHdhcm46IGplc3QuZm4oKSxcbiAgZGVidWc6IGplc3QuZm4oKVxufSkpO1xuXG4vLyBTZXQgdGVzdCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbnByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xucHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCA9ICd0ZXN0LWp3dC1zZWNyZXQta2V5LWZvci10ZXN0aW5nLW9ubHknO1xucHJvY2Vzcy5lbnYuSldUX0VYUElSRVNfSU4gPSAnMWgnO1xucHJvY2Vzcy5lbnYuTE9HX0xFVkVMID0gJ2Vycm9yJztcbnByb2Nlc3MuZW52LlJFRElTX1VSTCA9ICdyZWRpczovL2xvY2FsaG9zdDo2Mzc5JztcblxuLy8gSW5jcmVhc2UgdGltZW91dCBmb3IgdGVzdHNcbmplc3Quc2V0VGltZW91dCgzMDAwMCk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFpQ0E7O0FBeUJBO0FBekRBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTTtFQUN6QixNQUFNQyxTQUFTLEdBQUc7SUFDaEJDLEdBQUcsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7SUFDdENDLEdBQUcsRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7SUFDdENFLEdBQUcsRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFDbkNHLE1BQU0sRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFDdENJLE1BQU0sRUFBRU4sSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFDdENLLFFBQVEsRUFB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