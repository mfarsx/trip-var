{"version":3,"names":["cov_2oretgr5w2","actualCoverage","BaseRepository","s","require","NotificationRepository","constructor","model","f","findByUser","userId","find","user","sort","createdAt","error","findUnreadByUser","isRead","findByType","type","populate","findByDateRange","startDate","endDate","$gte","$lte","markAsRead","notificationId","findByIdAndUpdate","$set","readAt","Date","new","markAllAsRead","updateMany","deleteOldNotifications","daysOld","b","cutoffDate","setDate","getDate","deleteMany","$lt","getUnreadCount","countDocuments","createBulk","notifications","insertMany","findByPriority","priority","getStatistics","stats","aggregate","$group","_id","totalNotifications","$sum","unreadCount","$cond","byType","$push","findWithPagination","page","limit","skip","total","pagination","pages","Math","ceil","module","exports"],"sources":["notification.repository.js"],"sourcesContent":["const BaseRepository = require('./base.repository');\n\nclass NotificationRepository extends BaseRepository {\n  constructor(model) {\n    super(model);\n  }\n\n  // Find notifications by user\n  async findByUser(userId) {\n    try {\n      return await this.model\n        .find({ user: userId })\n        .sort({ createdAt: -1 });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find unread notifications by user\n  async findUnreadByUser(userId) {\n    try {\n      return await this.model\n        .find({ user: userId, isRead: false })\n        .sort({ createdAt: -1 });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find notifications by type\n  async findByType(type) {\n    try {\n      return await this.model\n        .find({ type })\n        .populate('user')\n        .sort({ createdAt: -1 });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find notifications by date range\n  async findByDateRange(startDate, endDate) {\n    try {\n      return await this.model\n        .find({\n          createdAt: { $gte: startDate, $lte: endDate }\n        })\n        .populate('user')\n        .sort({ createdAt: -1 });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Mark notification as read\n  async markAsRead(notificationId) {\n    try {\n      return await this.model.findByIdAndUpdate(\n        notificationId,\n        { $set: { isRead: true, readAt: new Date() } },\n        { new: true }\n      );\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Mark all notifications as read for a user\n  async markAllAsRead(userId) {\n    try {\n      return await this.model.updateMany(\n        { user: userId, isRead: false },\n        { $set: { isRead: true, readAt: new Date() } }\n      );\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Delete old notifications\n  async deleteOldNotifications(daysOld = 30) {\n    try {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n      \n      return await this.model.deleteMany({\n        createdAt: { $lt: cutoffDate },\n        isRead: true\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get notification count for user\n  async getUnreadCount(userId) {\n    try {\n      return await this.model.countDocuments({\n        user: userId,\n        isRead: false\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Create bulk notifications\n  async createBulk(notifications) {\n    try {\n      return await this.model.insertMany(notifications);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find notifications by priority\n  async findByPriority(priority) {\n    try {\n      return await this.model\n        .find({ priority })\n        .populate('user')\n        .sort({ createdAt: -1 });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get notification statistics\n  async getStatistics() {\n    try {\n      const stats = await this.model.aggregate([\n        {\n          $group: {\n            _id: null,\n            totalNotifications: { $sum: 1 },\n            unreadCount: {\n              $sum: {\n                $cond: ['$isRead', 0, 1]\n              }\n            },\n            byType: {\n              $push: {\n                type: '$type',\n                isRead: '$isRead'\n              }\n            }\n          }\n        }\n      ]);\n      return stats[0] || { totalNotifications: 0, unreadCount: 0, byType: [] };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find notifications with pagination\n  async findWithPagination(userId, page = 1, limit = 10) {\n    try {\n      const skip = (page - 1) * limit;\n      const notifications = await this.model\n        .find({ user: userId })\n        .sort({ createdAt: -1 })\n        .skip(skip)\n        .limit(limit);\n\n      const total = await this.model.countDocuments({ user: userId });\n\n      return {\n        notifications,\n        pagination: {\n          page,\n          limit,\n          total,\n          pages: Math.ceil(total / limit)\n        }\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nmodule.exports = NotificationRepository;"],"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","ignoreList":[]}