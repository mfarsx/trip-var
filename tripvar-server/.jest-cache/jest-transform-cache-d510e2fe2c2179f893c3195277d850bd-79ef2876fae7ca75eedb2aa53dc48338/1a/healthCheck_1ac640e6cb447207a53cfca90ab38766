f6eea8a9ff04b5ac290617c55c435b5a
/* istanbul ignore next */
function cov_t8uibq257() {
  var path = "/Users/mfarsx/dev/tripvar/tripvar-server/src/middleware/healthCheck.js";
  var hash = "9fc21dd02db2d56a80a514f7bf40b8d9eeb890d8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/mfarsx/dev/tripvar/tripvar-server/src/middleware/healthCheck.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 1,
          column: 36
        }
      },
      "1": {
        start: {
          line: 2,
          column: 27
        },
        end: {
          line: 2,
          column: 53
        }
      },
      "2": {
        start: {
          line: 3,
          column: 19
        },
        end: {
          line: 3,
          column: 45
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 42
        }
      },
      "4": {
        start: {
          line: 9,
          column: 21
        },
        end: {
          line: 13,
          column: 1
        }
      },
      "5": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 21
        }
      },
      "6": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 25
        }
      },
      "7": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 27
        }
      },
      "8": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 27
        }
      },
      "9": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 46
        }
      },
      "10": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 39
        }
      },
      "11": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 46
        }
      },
      "12": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 35
        }
      },
      "13": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 62
        }
      },
      "14": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 45
        }
      },
      "15": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 25
        }
      },
      "16": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 36
        }
      },
      "17": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "18": {
        start: {
          line: 46,
          column: 6
        },
        end: {
          line: 46,
          column: 43
        }
      },
      "19": {
        start: {
          line: 47,
          column: 11
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "20": {
        start: {
          line: 48,
          column: 6
        },
        end: {
          line: 48,
          column: 42
        }
      },
      "21": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 60,
          column: 6
        }
      },
      "22": {
        start: {
          line: 68,
          column: 20
        },
        end: {
          line: 68,
          column: 30
        }
      },
      "23": {
        start: {
          line: 70,
          column: 2
        },
        end: {
          line: 107,
          column: 3
        }
      },
      "24": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "25": {
        start: {
          line: 73,
          column: 6
        },
        end: {
          line: 78,
          column: 8
        }
      },
      "26": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 82,
          column: 48
        }
      },
      "27": {
        start: {
          line: 83,
          column: 25
        },
        end: {
          line: 83,
          column: 47
        }
      },
      "28": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 96,
          column: 6
        }
      },
      "29": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 106,
          column: 6
        }
      },
      "30": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 30
        }
      },
      "31": {
        start: {
          line: 116,
          column: 2
        },
        end: {
          line: 163,
          column: 3
        }
      },
      "32": {
        start: {
          line: 117,
          column: 19
        },
        end: {
          line: 117,
          column: 35
        }
      },
      "33": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "34": {
        start: {
          line: 120,
          column: 6
        },
        end: {
          line: 125,
          column: 8
        }
      },
      "35": {
        start: {
          line: 129,
          column: 17
        },
        end: {
          line: 129,
          column: 36
        }
      },
      "36": {
        start: {
          line: 130,
          column: 25
        },
        end: {
          line: 130,
          column: 47
        }
      },
      "37": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "38": {
        start: {
          line: 133,
          column: 6
        },
        end: {
          line: 141,
          column: 8
        }
      },
      "39": {
        start: {
          line: 143,
          column: 6
        },
        end: {
          line: 151,
          column: 8
        }
      },
      "40": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 162,
          column: 6
        }
      },
      "41": {
        start: {
          line: 170,
          column: 19
        },
        end: {
          line: 170,
          column: 40
        }
      },
      "42": {
        start: {
          line: 171,
          column: 19
        },
        end: {
          line: 171,
          column: 37
        }
      },
      "43": {
        start: {
          line: 172,
          column: 18
        },
        end: {
          line: 172,
          column: 35
        }
      },
      "44": {
        start: {
          line: 173,
          column: 23
        },
        end: {
          line: 173,
          column: 49
        }
      },
      "45": {
        start: {
          line: 175,
          column: 15
        },
        end: {
          line: 175,
          column: 35
        }
      },
      "46": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 40
        }
      },
      "47": {
        start: {
          line: 178,
          column: 2
        },
        end: {
          line: 184,
          column: 3
        }
      },
      "48": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 179,
          column: 36
        }
      },
      "49": {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 180,
          column: 48
        }
      },
      "50": {
        start: {
          line: 181,
          column: 9
        },
        end: {
          line: 184,
          column: 3
        }
      },
      "51": {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 182,
          column: 35
        }
      },
      "52": {
        start: {
          line: 183,
          column: 4
        },
        end: {
          line: 183,
          column: 37
        }
      },
      "53": {
        start: {
          line: 186,
          column: 2
        },
        end: {
          line: 197,
          column: 4
        }
      },
      "54": {
        start: {
          line: 204,
          column: 19
        },
        end: {
          line: 204,
          column: 37
        }
      },
      "55": {
        start: {
          line: 205,
          column: 21
        },
        end: {
          line: 205,
          column: 52
        }
      },
      "56": {
        start: {
          line: 208,
          column: 2
        },
        end: {
          line: 217,
          column: 4
        }
      },
      "57": {
        start: {
          line: 225,
          column: 2
        },
        end: {
          line: 232,
          column: 4
        }
      },
      "58": {
        start: {
          line: 239,
          column: 23
        },
        end: {
          line: 239,
          column: 25
        }
      },
      "59": {
        start: {
          line: 242,
          column: 26
        },
        end: {
          line: 242,
          column: 55
        }
      },
      "60": {
        start: {
          line: 243,
          column: 25
        },
        end: {
          line: 243,
          column: 79
        }
      },
      "61": {
        start: {
          line: 243,
          column: 58
        },
        end: {
          line: 243,
          column: 78
        }
      },
      "62": {
        start: {
          line: 245,
          column: 2
        },
        end: {
          line: 258,
          column: 3
        }
      },
      "63": {
        start: {
          line: 246,
          column: 4
        },
        end: {
          line: 251,
          column: 7
        }
      },
      "64": {
        start: {
          line: 253,
          column: 4
        },
        end: {
          line: 257,
          column: 7
        }
      },
      "65": {
        start: {
          line: 260,
          column: 2
        },
        end: {
          line: 260,
          column: 22
        }
      },
      "66": {
        start: {
          line: 267,
          column: 17
        },
        end: {
          line: 267,
          column: 40
        }
      },
      "67": {
        start: {
          line: 269,
          column: 2
        },
        end: {
          line: 300,
          column: 3
        }
      },
      "68": {
        start: {
          line: 271,
          column: 4
        },
        end: {
          line: 271,
          column: 47
        }
      },
      "69": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 272,
          column: 44
        }
      },
      "70": {
        start: {
          line: 273,
          column: 4
        },
        end: {
          line: 273,
          column: 39
        }
      },
      "71": {
        start: {
          line: 274,
          column: 4
        },
        end: {
          line: 274,
          column: 36
        }
      },
      "72": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 275,
          column: 42
        }
      },
      "73": {
        start: {
          line: 278,
          column: 25
        },
        end: {
          line: 278,
          column: 58
        }
      },
      "74": {
        start: {
          line: 279,
          column: 4
        },
        end: {
          line: 279,
          column: 58
        }
      },
      "75": {
        start: {
          line: 279,
          column: 32
        },
        end: {
          line: 279,
          column: 56
        }
      },
      "76": {
        start: {
          line: 282,
          column: 4
        },
        end: {
          line: 287,
          column: 7
        }
      },
      "77": {
        start: {
          line: 285,
          column: 47
        },
        end: {
          line: 285,
          column: 82
        }
      },
      "78": {
        start: {
          line: 286,
          column: 46
        },
        end: {
          line: 286,
          column: 80
        }
      },
      "79": {
        start: {
          line: 289,
          column: 4
        },
        end: {
          line: 289,
          column: 18
        }
      },
      "80": {
        start: {
          line: 291,
          column: 4
        },
        end: {
          line: 291,
          column: 43
        }
      },
      "81": {
        start: {
          line: 292,
          column: 4
        },
        end: {
          line: 297,
          column: 7
        }
      },
      "82": {
        start: {
          line: 299,
          column: 4
        },
        end: {
          line: 299,
          column: 18
        }
      },
      "83": {
        start: {
          line: 306,
          column: 30
        },
        end: {
          line: 323,
          column: 1
        }
      },
      "84": {
        start: {
          line: 307,
          column: 2
        },
        end: {
          line: 322,
          column: 3
        }
      },
      "85": {
        start: {
          line: 308,
          column: 25
        },
        end: {
          line: 308,
          column: 51
        }
      },
      "86": {
        start: {
          line: 311,
          column: 23
        },
        end: {
          line: 312,
          column: 63
        }
      },
      "87": {
        start: {
          line: 314,
          column: 4
        },
        end: {
          line: 314,
          column: 55
        }
      },
      "88": {
        start: {
          line: 316,
          column: 4
        },
        end: {
          line: 321,
          column: 7
        }
      },
      "89": {
        start: {
          line: 328,
          column: 22
        },
        end: {
          line: 334,
          column: 1
        }
      },
      "90": {
        start: {
          line: 329,
          column: 2
        },
        end: {
          line: 333,
          column: 5
        }
      },
      "91": {
        start: {
          line: 339,
          column: 23
        },
        end: {
          line: 368,
          column: 1
        }
      },
      "92": {
        start: {
          line: 340,
          column: 2
        },
        end: {
          line: 367,
          column: 3
        }
      },
      "93": {
        start: {
          line: 342,
          column: 22
        },
        end: {
          line: 342,
          column: 58
        }
      },
      "94": {
        start: {
          line: 344,
          column: 4
        },
        end: {
          line: 360,
          column: 5
        }
      },
      "95": {
        start: {
          line: 345,
          column: 6
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "96": {
        start: {
          line: 353,
          column: 6
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "97": {
        start: {
          line: 362,
          column: 4
        },
        end: {
          line: 366,
          column: 7
        }
      },
      "98": {
        start: {
          line: 370,
          column: 0
        },
        end: {
          line: 378,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        },
        loc: {
          start: {
            line: 19,
            column: 56
          },
          end: {
            line: 25,
            column: 3
          }
        },
        line: 19
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 32,
            column: 2
          },
          end: {
            line: 32,
            column: 3
          }
        },
        loc: {
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 39,
            column: 3
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 2
          },
          end: {
            line: 41,
            column: 3
          }
        },
        loc: {
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 50,
            column: 3
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 52,
            column: 2
          },
          end: {
            line: 52,
            column: 3
          }
        },
        loc: {
          start: {
            line: 52,
            column: 11
          },
          end: {
            line: 61,
            column: 3
          }
        },
        line: 52
      },
      "4": {
        name: "checkDatabase",
        decl: {
          start: {
            line: 67,
            column: 15
          },
          end: {
            line: 67,
            column: 28
          }
        },
        loc: {
          start: {
            line: 67,
            column: 31
          },
          end: {
            line: 108,
            column: 1
          }
        },
        line: 67
      },
      "5": {
        name: "checkRedis",
        decl: {
          start: {
            line: 113,
            column: 15
          },
          end: {
            line: 113,
            column: 25
          }
        },
        loc: {
          start: {
            line: 113,
            column: 28
          },
          end: {
            line: 164,
            column: 1
          }
        },
        line: 113
      },
      "6": {
        name: "checkMemory",
        decl: {
          start: {
            line: 169,
            column: 9
          },
          end: {
            line: 169,
            column: 20
          }
        },
        loc: {
          start: {
            line: 169,
            column: 23
          },
          end: {
            line: 198,
            column: 1
          }
        },
        line: 169
      },
      "7": {
        name: "checkCPU",
        decl: {
          start: {
            line: 203,
            column: 9
          },
          end: {
            line: 203,
            column: 17
          }
        },
        loc: {
          start: {
            line: 203,
            column: 20
          },
          end: {
            line: 218,
            column: 1
          }
        },
        line: 203
      },
      "8": {
        name: "checkDiskSpace",
        decl: {
          start: {
            line: 223,
            column: 9
          },
          end: {
            line: 223,
            column: 23
          }
        },
        loc: {
          start: {
            line: 223,
            column: 26
          },
          end: {
            line: 233,
            column: 1
          }
        },
        line: 223
      },
      "9": {
        name: "checkExternalDependencies",
        decl: {
          start: {
            line: 238,
            column: 15
          },
          end: {
            line: 238,
            column: 40
          }
        },
        loc: {
          start: {
            line: 238,
            column: 43
          },
          end: {
            line: 261,
            column: 1
          }
        },
        line: 238
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 243,
            column: 48
          },
          end: {
            line: 243,
            column: 49
          }
        },
        loc: {
          start: {
            line: 243,
            column: 58
          },
          end: {
            line: 243,
            column: 78
          }
        },
        line: 243
      },
      "11": {
        name: "performHealthCheck",
        decl: {
          start: {
            line: 266,
            column: 15
          },
          end: {
            line: 266,
            column: 33
          }
        },
        loc: {
          start: {
            line: 266,
            column: 36
          },
          end: {
            line: 301,
            column: 1
          }
        },
        line: 266
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 279,
            column: 25
          },
          end: {
            line: 279,
            column: 26
          }
        },
        loc: {
          start: {
            line: 279,
            column: 32
          },
          end: {
            line: 279,
            column: 56
          }
        },
        line: 279
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 285,
            column: 42
          },
          end: {
            line: 285,
            column: 43
          }
        },
        loc: {
          start: {
            line: 285,
            column: 47
          },
          end: {
            line: 285,
            column: 82
          }
        },
        line: 285
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 286,
            column: 41
          },
          end: {
            line: 286,
            column: 42
          }
        },
        loc: {
          start: {
            line: 286,
            column: 46
          },
          end: {
            line: 286,
            column: 80
          }
        },
        line: 286
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 306,
            column: 30
          },
          end: {
            line: 306,
            column: 31
          }
        },
        loc: {
          start: {
            line: 306,
            column: 55
          },
          end: {
            line: 323,
            column: 1
          }
        },
        line: 306
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 328,
            column: 22
          },
          end: {
            line: 328,
            column: 23
          }
        },
        loc: {
          start: {
            line: 328,
            column: 36
          },
          end: {
            line: 334,
            column: 1
          }
        },
        line: 328
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 339,
            column: 23
          },
          end: {
            line: 339,
            column: 24
          }
        },
        loc: {
          start: {
            line: 339,
            column: 42
          },
          end: {
            line: 368,
            column: 1
          }
        },
        line: 339
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 28
          },
          end: {
            line: 19,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 38
          },
          end: {
            line: 19,
            column: 40
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 42
          },
          end: {
            line: 19,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 52
          },
          end: {
            line: 19,
            column: 54
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 19
          },
          end: {
            line: 36,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 19
          },
          end: {
            line: 36,
            column: 50
          }
        }, {
          start: {
            line: 36,
            column: 54
          },
          end: {
            line: 36,
            column: 61
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        }, {
          start: {
            line: 47,
            column: 11
          },
          end: {
            line: 49,
            column: 5
          }
        }],
        line: 45
      },
      "4": {
        loc: {
          start: {
            line: 47,
            column: 11
          },
          end: {
            line: 49,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 11
          },
          end: {
            line: 49,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "5": {
        loc: {
          start: {
            line: 47,
            column: 15
          },
          end: {
            line: 47,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 15
          },
          end: {
            line: 47,
            column: 57
          }
        }, {
          start: {
            line: 47,
            column: 61
          },
          end: {
            line: 47,
            column: 97
          }
        }],
        line: 47
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "8": {
        loc: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        }, {
          start: {
            line: 142,
            column: 11
          },
          end: {
            line: 152,
            column: 5
          }
        }],
        line: 132
      },
      "9": {
        loc: {
          start: {
            line: 178,
            column: 2
          },
          end: {
            line: 184,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 2
          },
          end: {
            line: 184,
            column: 3
          }
        }, {
          start: {
            line: 181,
            column: 9
          },
          end: {
            line: 184,
            column: 3
          }
        }],
        line: 178
      },
      "10": {
        loc: {
          start: {
            line: 181,
            column: 9
          },
          end: {
            line: 184,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 9
          },
          end: {
            line: 184,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "11": {
        loc: {
          start: {
            line: 245,
            column: 2
          },
          end: {
            line: 258,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 2
          },
          end: {
            line: 258,
            column: 3
          }
        }, {
          start: {
            line: 252,
            column: 9
          },
          end: {
            line: 258,
            column: 3
          }
        }],
        line: 245
      },
      "12": {
        loc: {
          start: {
            line: 311,
            column: 23
          },
          end: {
            line: 312,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 311,
            column: 70
          },
          end: {
            line: 311,
            column: 73
          }
        }, {
          start: {
            line: 312,
            column: 6
          },
          end: {
            line: 312,
            column: 63
          }
        }],
        line: 311
      },
      "13": {
        loc: {
          start: {
            line: 312,
            column: 6
          },
          end: {
            line: 312,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 312,
            column: 54
          },
          end: {
            line: 312,
            column: 57
          }
        }, {
          start: {
            line: 312,
            column: 60
          },
          end: {
            line: 312,
            column: 63
          }
        }],
        line: 312
      },
      "14": {
        loc: {
          start: {
            line: 344,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        }, {
          start: {
            line: 352,
            column: 11
          },
          end: {
            line: 360,
            column: 5
          }
        }],
        line: 344
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9fc21dd02db2d56a80a514f7bf40b8d9eeb890d8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_t8uibq257 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_t8uibq257();
const mongoose =
/* istanbul ignore next */
(cov_t8uibq257().s[0]++, require('mongoose'));
const {
  getRedisClient
} =
/* istanbul ignore next */
(cov_t8uibq257().s[1]++, require('../config/redis'));
const {
  health
} =
/* istanbul ignore next */
(cov_t8uibq257().s[2]++, require('../utils/logger'));
const config =
/* istanbul ignore next */
(cov_t8uibq257().s[3]++, require('../config/config'));

/**
 * Health check status
 */
const HealthStatus =
/* istanbul ignore next */
(cov_t8uibq257().s[4]++, {
  HEALTHY: 'healthy',
  UNHEALTHY: 'unhealthy',
  DEGRADED: 'degraded'
});

/**
 * Component health check result
 */
class ComponentHealth {
  constructor(name, status, message =
  /* istanbul ignore next */
  (cov_t8uibq257().b[0][0]++, ''), details =
  /* istanbul ignore next */
  (cov_t8uibq257().b[1][0]++, {})) {
    /* istanbul ignore next */
    cov_t8uibq257().f[0]++;
    cov_t8uibq257().s[5]++;
    this.name = name;
    /* istanbul ignore next */
    cov_t8uibq257().s[6]++;
    this.status = status;
    /* istanbul ignore next */
    cov_t8uibq257().s[7]++;
    this.message = message;
    /* istanbul ignore next */
    cov_t8uibq257().s[8]++;
    this.details = details;
    /* istanbul ignore next */
    cov_t8uibq257().s[9]++;
    this.timestamp = new Date().toISOString();
  }
}

/**
 * Overall health check result
 */
class HealthCheckResult {
  constructor() {
    /* istanbul ignore next */
    cov_t8uibq257().f[1]++;
    cov_t8uibq257().s[10]++;
    this.status = HealthStatus.HEALTHY;
    /* istanbul ignore next */
    cov_t8uibq257().s[11]++;
    this.timestamp = new Date().toISOString();
    /* istanbul ignore next */
    cov_t8uibq257().s[12]++;
    this.uptime = process.uptime();
    /* istanbul ignore next */
    cov_t8uibq257().s[13]++;
    this.version =
    /* istanbul ignore next */
    (cov_t8uibq257().b[2][0]++, process.env.npm_package_version) ||
    /* istanbul ignore next */
    (cov_t8uibq257().b[2][1]++, '1.0.0');
    /* istanbul ignore next */
    cov_t8uibq257().s[14]++;
    this.environment = config.server.nodeEnv;
    /* istanbul ignore next */
    cov_t8uibq257().s[15]++;
    this.components = [];
  }
  addComponent(component) {
    /* istanbul ignore next */
    cov_t8uibq257().f[2]++;
    cov_t8uibq257().s[16]++;
    this.components.push(component);

    // Update overall status based on component status
    /* istanbul ignore next */
    cov_t8uibq257().s[17]++;
    if (component.status === HealthStatus.UNHEALTHY) {
      /* istanbul ignore next */
      cov_t8uibq257().b[3][0]++;
      cov_t8uibq257().s[18]++;
      this.status = HealthStatus.UNHEALTHY;
    } else {
      /* istanbul ignore next */
      cov_t8uibq257().b[3][1]++;
      cov_t8uibq257().s[19]++;
      if (
      /* istanbul ignore next */
      (cov_t8uibq257().b[5][0]++, component.status === HealthStatus.DEGRADED) &&
      /* istanbul ignore next */
      (cov_t8uibq257().b[5][1]++, this.status === HealthStatus.HEALTHY)) {
        /* istanbul ignore next */
        cov_t8uibq257().b[4][0]++;
        cov_t8uibq257().s[20]++;
        this.status = HealthStatus.DEGRADED;
      } else
      /* istanbul ignore next */
      {
        cov_t8uibq257().b[4][1]++;
      }
    }
  }
  toJSON() {
    /* istanbul ignore next */
    cov_t8uibq257().f[3]++;
    cov_t8uibq257().s[21]++;
    return {
      status: this.status,
      timestamp: this.timestamp,
      uptime: this.uptime,
      version: this.version,
      environment: this.environment,
      components: this.components
    };
  }
}

/**
 * Check database health
 */
async function checkDatabase() {
  /* istanbul ignore next */
  cov_t8uibq257().f[4]++;
  const startTime =
  /* istanbul ignore next */
  (cov_t8uibq257().s[22]++, Date.now());
  /* istanbul ignore next */
  cov_t8uibq257().s[23]++;
  try {
    /* istanbul ignore next */
    cov_t8uibq257().s[24]++;
    // Check connection status
    if (mongoose.connection.readyState !== 1) {
      /* istanbul ignore next */
      cov_t8uibq257().b[6][0]++;
      cov_t8uibq257().s[25]++;
      return new ComponentHealth('database', HealthStatus.UNHEALTHY, 'Database connection is not established', {
        readyState: mongoose.connection.readyState
      });
    } else
    /* istanbul ignore next */
    {
      cov_t8uibq257().b[6][1]++;
    }

    // Test database query
    cov_t8uibq257().s[26]++;
    await mongoose.connection.db.admin().ping();
    const responseTime =
    /* istanbul ignore next */
    (cov_t8uibq257().s[27]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_t8uibq257().s[28]++;
    return new ComponentHealth('database', HealthStatus.HEALTHY, 'Database is healthy', {
      responseTime: `${responseTime}ms`,
      readyState: mongoose.connection.readyState,
      host: mongoose.connection.host,
      port: mongoose.connection.port,
      name: mongoose.connection.name
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_t8uibq257().s[29]++;
    return new ComponentHealth('database', HealthStatus.UNHEALTHY, 'Database health check failed', {
      error: error.message,
      responseTime: `${Date.now() - startTime}ms`
    });
  }
}

/**
 * Check Redis health
 */
async function checkRedis() {
  /* istanbul ignore next */
  cov_t8uibq257().f[5]++;
  const startTime =
  /* istanbul ignore next */
  (cov_t8uibq257().s[30]++, Date.now());
  /* istanbul ignore next */
  cov_t8uibq257().s[31]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_t8uibq257().s[32]++, getRedisClient());
    /* istanbul ignore next */
    cov_t8uibq257().s[33]++;
    if (!client) {
      /* istanbul ignore next */
      cov_t8uibq257().b[7][0]++;
      cov_t8uibq257().s[34]++;
      return new ComponentHealth('redis', HealthStatus.DEGRADED, 'Redis client not available', {
        responseTime: `${Date.now() - startTime}ms`
      });
    } else
    /* istanbul ignore next */
    {
      cov_t8uibq257().b[7][1]++;
    }

    // Test Redis connection
    const pong =
    /* istanbul ignore next */
    (cov_t8uibq257().s[35]++, await client.ping());
    const responseTime =
    /* istanbul ignore next */
    (cov_t8uibq257().s[36]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_t8uibq257().s[37]++;
    if (pong === 'PONG') {
      /* istanbul ignore next */
      cov_t8uibq257().b[8][0]++;
      cov_t8uibq257().s[38]++;
      return new ComponentHealth('redis', HealthStatus.HEALTHY, 'Redis is healthy', {
        responseTime: `${responseTime}ms`,
        status: client.status
      });
    } else {
      /* istanbul ignore next */
      cov_t8uibq257().b[8][1]++;
      cov_t8uibq257().s[39]++;
      return new ComponentHealth('redis', HealthStatus.UNHEALTHY, 'Redis ping failed', {
        responseTime: `${responseTime}ms`,
        pingResponse: pong
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_t8uibq257().s[40]++;
    return new ComponentHealth('redis', HealthStatus.DEGRADED, 'Redis health check failed', {
      error: error.message,
      responseTime: `${Date.now() - startTime}ms`
    });
  }
}

/**
 * Check memory usage
 */
function checkMemory() {
  /* istanbul ignore next */
  cov_t8uibq257().f[6]++;
  const memUsage =
  /* istanbul ignore next */
  (cov_t8uibq257().s[41]++, process.memoryUsage());
  const totalMem =
  /* istanbul ignore next */
  (cov_t8uibq257().s[42]++, memUsage.heapTotal);
  const usedMem =
  /* istanbul ignore next */
  (cov_t8uibq257().s[43]++, memUsage.heapUsed);
  const usagePercent =
  /* istanbul ignore next */
  (cov_t8uibq257().s[44]++, usedMem / totalMem * 100);
  let status =
  /* istanbul ignore next */
  (cov_t8uibq257().s[45]++, HealthStatus.HEALTHY);
  let message =
  /* istanbul ignore next */
  (cov_t8uibq257().s[46]++, 'Memory usage is normal');
  /* istanbul ignore next */
  cov_t8uibq257().s[47]++;
  if (usagePercent > 90) {
    /* istanbul ignore next */
    cov_t8uibq257().b[9][0]++;
    cov_t8uibq257().s[48]++;
    status = HealthStatus.UNHEALTHY;
    /* istanbul ignore next */
    cov_t8uibq257().s[49]++;
    message = 'Memory usage is critically high';
  } else {
    /* istanbul ignore next */
    cov_t8uibq257().b[9][1]++;
    cov_t8uibq257().s[50]++;
    if (usagePercent > 80) {
      /* istanbul ignore next */
      cov_t8uibq257().b[10][0]++;
      cov_t8uibq257().s[51]++;
      status = HealthStatus.DEGRADED;
      /* istanbul ignore next */
      cov_t8uibq257().s[52]++;
      message = 'Memory usage is high';
    } else
    /* istanbul ignore next */
    {
      cov_t8uibq257().b[10][1]++;
    }
  }
  /* istanbul ignore next */
  cov_t8uibq257().s[53]++;
  return new ComponentHealth('memory', status, message, {
    heapUsed: `${Math.round(usedMem / 1024 / 1024)}MB`,
    heapTotal: `${Math.round(totalMem / 1024 / 1024)}MB`,
    usagePercent: `${Math.round(usagePercent)}%`,
    external: `${Math.round(memUsage.external / 1024 / 1024)}MB`,
    rss: `${Math.round(memUsage.rss / 1024 / 1024)}MB`
  });
}

/**
 * Check CPU usage
 */
function checkCPU() {
  /* istanbul ignore next */
  cov_t8uibq257().f[7]++;
  const cpuUsage =
  /* istanbul ignore next */
  (cov_t8uibq257().s[54]++, process.cpuUsage());
  const totalUsage =
  /* istanbul ignore next */
  (cov_t8uibq257().s[55]++, cpuUsage.user + cpuUsage.system);

  // This is a simplified CPU check - in production, you might want to use a more sophisticated approach
  /* istanbul ignore next */
  cov_t8uibq257().s[56]++;
  return new ComponentHealth('cpu', HealthStatus.HEALTHY, 'CPU usage is normal', {
    user: `${Math.round(cpuUsage.user / 1000)}ms`,
    system: `${Math.round(cpuUsage.system / 1000)}ms`,
    total: `${Math.round(totalUsage / 1000)}ms`
  });
}

/**
 * Check disk space
 */
function checkDiskSpace() {
  /* istanbul ignore next */
  cov_t8uibq257().f[8]++;
  cov_t8uibq257().s[57]++;
  // This is a placeholder - in production, you might want to use a library like 'diskusage'
  return new ComponentHealth('disk', HealthStatus.HEALTHY, 'Disk space is available', {
    note: 'Disk space monitoring not implemented'
  });
}

/**
 * Check external dependencies
 */
async function checkExternalDependencies() {
  /* istanbul ignore next */
  cov_t8uibq257().f[9]++;
  const dependencies =
  /* istanbul ignore next */
  (cov_t8uibq257().s[58]++, []);

  // Check if required environment variables are set
  const requiredEnvVars =
  /* istanbul ignore next */
  (cov_t8uibq257().s[59]++, ['MONGODB_URI', 'JWT_SECRET']);
  const missingEnvVars =
  /* istanbul ignore next */
  (cov_t8uibq257().s[60]++, requiredEnvVars.filter(envVar => {
    /* istanbul ignore next */
    cov_t8uibq257().f[10]++;
    cov_t8uibq257().s[61]++;
    return !process.env[envVar];
  }));
  /* istanbul ignore next */
  cov_t8uibq257().s[62]++;
  if (missingEnvVars.length > 0) {
    /* istanbul ignore next */
    cov_t8uibq257().b[11][0]++;
    cov_t8uibq257().s[63]++;
    dependencies.push(new ComponentHealth('environment', HealthStatus.UNHEALTHY, 'Missing required environment variables', {
      missing: missingEnvVars
    }));
  } else {
    /* istanbul ignore next */
    cov_t8uibq257().b[11][1]++;
    cov_t8uibq257().s[64]++;
    dependencies.push(new ComponentHealth('environment', HealthStatus.HEALTHY, 'All required environment variables are set'));
  }
  /* istanbul ignore next */
  cov_t8uibq257().s[65]++;
  return dependencies;
}

/**
 * Perform comprehensive health check
 */
async function performHealthCheck() {
  /* istanbul ignore next */
  cov_t8uibq257().f[11]++;
  const result =
  /* istanbul ignore next */
  (cov_t8uibq257().s[66]++, new HealthCheckResult());
  /* istanbul ignore next */
  cov_t8uibq257().s[67]++;
  try {
    /* istanbul ignore next */
    cov_t8uibq257().s[68]++;
    // Check core components
    result.addComponent(await checkDatabase());
    /* istanbul ignore next */
    cov_t8uibq257().s[69]++;
    result.addComponent(await checkRedis());
    /* istanbul ignore next */
    cov_t8uibq257().s[70]++;
    result.addComponent(checkMemory());
    /* istanbul ignore next */
    cov_t8uibq257().s[71]++;
    result.addComponent(checkCPU());
    /* istanbul ignore next */
    cov_t8uibq257().s[72]++;
    result.addComponent(checkDiskSpace());

    // Check external dependencies
    const externalDeps =
    /* istanbul ignore next */
    (cov_t8uibq257().s[73]++, await checkExternalDependencies());
    /* istanbul ignore next */
    cov_t8uibq257().s[74]++;
    externalDeps.forEach(dep => {
      /* istanbul ignore next */
      cov_t8uibq257().f[12]++;
      cov_t8uibq257().s[75]++;
      return result.addComponent(dep);
    });

    // Log health check result
    /* istanbul ignore next */
    cov_t8uibq257().s[76]++;
    health('Health check completed', {
      status: result.status,
      components: result.components.length,
      unhealthy: result.components.filter(c => {
        /* istanbul ignore next */
        cov_t8uibq257().f[13]++;
        cov_t8uibq257().s[77]++;
        return c.status === HealthStatus.UNHEALTHY;
      }).length,
      degraded: result.components.filter(c => {
        /* istanbul ignore next */
        cov_t8uibq257().f[14]++;
        cov_t8uibq257().s[78]++;
        return c.status === HealthStatus.DEGRADED;
      }).length
    });
    /* istanbul ignore next */
    cov_t8uibq257().s[79]++;
    return result;
  } catch (error) {
    /* istanbul ignore next */
    cov_t8uibq257().s[80]++;
    result.status = HealthStatus.UNHEALTHY;
    /* istanbul ignore next */
    cov_t8uibq257().s[81]++;
    result.addComponent(new ComponentHealth('health-check', HealthStatus.UNHEALTHY, 'Health check failed', {
      error: error.message
    }));
    /* istanbul ignore next */
    cov_t8uibq257().s[82]++;
    return result;
  }
}

/**
 * Health check middleware
 */
/* istanbul ignore next */
cov_t8uibq257().s[83]++;
const healthCheckMiddleware = async (req, res, next) => {
  /* istanbul ignore next */
  cov_t8uibq257().f[15]++;
  cov_t8uibq257().s[84]++;
  try {
    const healthResult =
    /* istanbul ignore next */
    (cov_t8uibq257().s[85]++, await performHealthCheck());

    // Set appropriate HTTP status code
    const statusCode =
    /* istanbul ignore next */
    (cov_t8uibq257().s[86]++, healthResult.status === HealthStatus.HEALTHY ?
    /* istanbul ignore next */
    (cov_t8uibq257().b[12][0]++, 200) :
    /* istanbul ignore next */
    (cov_t8uibq257().b[12][1]++, healthResult.status === HealthStatus.DEGRADED ?
    /* istanbul ignore next */
    (cov_t8uibq257().b[13][0]++, 200) :
    /* istanbul ignore next */
    (cov_t8uibq257().b[13][1]++, 503)));
    /* istanbul ignore next */
    cov_t8uibq257().s[87]++;
    res.status(statusCode).json(healthResult.toJSON());
  } catch (error) {
    /* istanbul ignore next */
    cov_t8uibq257().s[88]++;
    res.status(503).json({
      status: HealthStatus.UNHEALTHY,
      timestamp: new Date().toISOString(),
      message: 'Health check failed',
      error: error.message
    });
  }
};

/**
 * Liveness probe - simple check if the application is running
 */
/* istanbul ignore next */
cov_t8uibq257().s[89]++;
const livenessProbe = (req, res) => {
  /* istanbul ignore next */
  cov_t8uibq257().f[16]++;
  cov_t8uibq257().s[90]++;
  res.status(200).json({
    status: 'alive',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
};

/**
 * Readiness probe - check if the application is ready to serve traffic
 */
/* istanbul ignore next */
cov_t8uibq257().s[91]++;
const readinessProbe = async (req, res) => {
  /* istanbul ignore next */
  cov_t8uibq257().f[17]++;
  cov_t8uibq257().s[92]++;
  try {
    // Quick check of critical components
    const dbHealthy =
    /* istanbul ignore next */
    (cov_t8uibq257().s[93]++, mongoose.connection.readyState === 1);
    /* istanbul ignore next */
    cov_t8uibq257().s[94]++;
    if (dbHealthy) {
      /* istanbul ignore next */
      cov_t8uibq257().b[14][0]++;
      cov_t8uibq257().s[95]++;
      res.status(200).json({
        status: 'ready',
        timestamp: new Date().toISOString(),
        components: {
          database: 'ready'
        }
      });
    } else {
      /* istanbul ignore next */
      cov_t8uibq257().b[14][1]++;
      cov_t8uibq257().s[96]++;
      res.status(503).json({
        status: 'not ready',
        timestamp: new Date().toISOString(),
        components: {
          database: 'not ready'
        }
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_t8uibq257().s[97]++;
    res.status(503).json({
      status: 'not ready',
      timestamp: new Date().toISOString(),
      error: error.message
    });
  }
};
/* istanbul ignore next */
cov_t8uibq257().s[98]++;
module.exports = {
  healthCheckMiddleware,
  livenessProbe,
  readinessProbe,
  performHealthCheck,
  HealthStatus,
  ComponentHealth,
  HealthCheckResult
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,