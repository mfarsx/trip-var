{"version":3,"names":["cov_1mjvm98adb","actualCoverage","jwt","s","require","promisify","User","UnauthorizedError","ForbiddenError","exports","authenticate","req","res","next","f","token","b","headers","authorization","startsWith","split","cookies","status","json","message","code","decoded","verify","process","env","JWT_SECRET","algorithms","user","findById","id","changedPasswordAfter","iat","err","name","error","authorize","roles","includes","role","protect","restrictTo"],"sources":["auth.js"],"sourcesContent":["const jwt = require('jsonwebtoken');\nconst { promisify } = require('util');\nconst User = require('../models/user.model');\nconst { UnauthorizedError, ForbiddenError } = require('../utils/errors');\n\nexports.authenticate = async(req, res, next) => {\n  try {\n    // 1) Get token and check if it exists\n    let token;\n    if (\n      req.headers.authorization &&\n      req.headers.authorization.startsWith('Bearer')\n    ) {\n      token = req.headers.authorization.split(' ')[1];\n    }\n\n    // Additional security: Check for token in cookies as fallback\n    if (!token && req.cookies && req.cookies.token) {\n      token = req.cookies.token;\n    }\n\n    if (!token) {\n      return res.status(401).json({\n        status: 'fail',\n        message: 'You are not logged in! Please log in to get access.',\n        code: 'UNAUTHORIZED'\n      });\n    }\n\n    // 2) Verify token\n    try {\n      const decoded = await promisify(jwt.verify)(token, process.env.JWT_SECRET, {\n        algorithms: ['HS256'] // Explicitly specify algorithm for security\n      });\n\n      // 3) Check if user still exists\n      const user = await User.findById(decoded.id);\n      if (!user) {\n        return res.status(401).json({\n          status: 'fail',\n          message: 'The user belonging to this token no longer exists.',\n          code: 'UNAUTHORIZED'\n        });\n      }\n\n      // 4) Check if user changed password after the token was issued\n      if (user.changedPasswordAfter(decoded.iat)) {\n        return res.status(401).json({\n          status: 'fail',\n          message: 'User recently changed password! Please log in again.',\n          code: 'UNAUTHORIZED'\n        });\n      }\n\n      // Grant access to protected route\n      req.user = user;\n      next();\n    } catch (err) {\n      // Handle JWT specific errors with clear messages\n      if (err.name === 'TokenExpiredError') {\n        return res.status(401).json({\n          status: 'fail',\n          message: 'Your token has expired. Please log in again.',\n          code: 'TOKEN_EXPIRED'\n        });\n      } else if (err.name === 'JsonWebTokenError') {\n        return res.status(401).json({\n          status: 'fail',\n          message: 'Invalid token. Please log in again.',\n          code: 'INVALID_TOKEN'\n        });\n      }\n      // For other errors, pass to error handler\n      next(err);\n    }\n  } catch (error) {\n    next(error);\n  }\n};\n\nexports.authorize = (...roles) => {\n  return (req, res, next) => {\n    if (!roles.includes(req.user.role)) {\n      return next(\n        new ForbiddenError('You do not have permission to perform this action')\n      );\n    }\n    next();\n  };\n};\n\n// Keep the old exports for backward compatibility\nexports.protect = exports.authenticate;\nexports.restrictTo = exports.authorize;\n"],"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","ignoreList":[]}