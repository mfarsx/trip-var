{"version":3,"names":["cov_zjy2usfkw","actualCoverage","redisUtils","s","require","BaseService","cacheData","key","data","ttl","b","f","setCache","error","console","warn","message","getCachedData","getCache","deleteCachedData","deleteCache","clearCacheByPattern","pattern","getRedisClient","client","keys","length","del","validateRequiredFields","requiredFields","missingFields","filter","field","undefined","ValidationError","join","sanitizeInput","allowedFields","sanitized","Object","forEach","includes","trim","createPaginationMeta","page","limit","total","parseInt","pages","Math","ceil","hasNext","hasPrev","withRetry","operation","maxRetries","lastError","attempt","statusCode","delay","pow","Promise","resolve","setTimeout","module","exports"],"sources":["base.service.js"],"sourcesContent":["const { redisUtils } = require('../middleware/redisCache');\n\n/**\n * Base service class with common functionality\n */\nclass BaseService {\n  /**\n   * Cache data with TTL\n   * @param {string} key - Cache key\n   * @param {*} data - Data to cache\n   * @param {number} ttl - Time to live in seconds\n   * @returns {Promise<void>}\n   */\n  async cacheData(key, data, ttl = 300) {\n    try {\n      await redisUtils.setCache(key, data, ttl);\n    } catch (error) {\n      console.warn(`Failed to cache data for key ${key}:`, error.message);\n    }\n  }\n\n  /**\n   * Get cached data\n   * @param {string} key - Cache key\n   * @returns {Promise<*>} Cached data or null\n   */\n  async getCachedData(key) {\n    try {\n      return await redisUtils.getCache(key);\n    } catch (error) {\n      console.warn(`Failed to get cached data for key ${key}:`, error.message);\n      return null;\n    }\n  }\n\n  /**\n   * Delete cached data\n   * @param {string} key - Cache key\n   * @returns {Promise<void>}\n   */\n  async deleteCachedData(key) {\n    try {\n      await redisUtils.deleteCache(key);\n    } catch (error) {\n      console.warn(`Failed to delete cached data for key ${key}:`, error.message);\n    }\n  }\n\n  /**\n   * Clear cache by pattern\n   * @param {string} pattern - Cache key pattern\n   * @returns {Promise<number>} Number of keys deleted\n   */\n  async clearCacheByPattern(pattern) {\n    try {\n      const { getRedisClient } = require('../config/redis');\n      const client = getRedisClient();\n      const keys = await client.keys(pattern);\n\n      if (keys.length > 0) {\n        await client.del(...keys);\n        return keys.length;\n      }\n\n      return 0;\n    } catch (error) {\n      console.warn(`Failed to clear cache by pattern ${pattern}:`, error.message);\n      return 0;\n    }\n  }\n\n  /**\n   * Validate required fields\n   * @param {Object} data - Data to validate\n   * @param {Array<string>} requiredFields - Required field names\n   * @throws {ValidationError} If validation fails\n   */\n  validateRequiredFields(data, requiredFields) {\n    const missingFields = requiredFields.filter(field =>\n      data[field] === undefined || data[field] === null || data[field] === ''\n    );\n\n    if (missingFields.length > 0) {\n      const { ValidationError } = require('../utils/errors');\n      throw new ValidationError(\n        `Missing required fields: ${missingFields.join(', ')}`,\n        { missingFields }\n      );\n    }\n  }\n\n  /**\n   * Sanitize input data\n   * @param {Object} data - Data to sanitize\n   * @param {Array<string>} allowedFields - Allowed field names\n   * @returns {Object} Sanitized data\n   */\n  sanitizeInput(data, allowedFields) {\n    const sanitized = {};\n\n    Object.keys(data).forEach(key => {\n      if (allowedFields.includes(key)) {\n        // Basic sanitization\n        if (typeof data[key] === 'string') {\n          sanitized[key] = data[key].trim();\n        } else {\n          sanitized[key] = data[key];\n        }\n      }\n    });\n\n    return sanitized;\n  }\n\n  /**\n   * Create pagination metadata\n   * @param {number} page - Current page\n   * @param {number} limit - Items per page\n   * @param {number} total - Total items\n   * @returns {Object} Pagination metadata\n   */\n  createPaginationMeta(page, limit, total) {\n    return {\n      page: parseInt(page),\n      limit: parseInt(limit),\n      total,\n      pages: Math.ceil(total / limit),\n      hasNext: page * limit < total,\n      hasPrev: page > 1\n    };\n  }\n\n  /**\n   * Handle database operation with retry logic\n   * @param {Function} operation - Database operation\n   * @param {number} maxRetries - Maximum retry attempts\n   * @returns {Promise<*>} Operation result\n   */\n  async withRetry(operation, maxRetries = 3) {\n    let lastError;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error;\n\n        // Don't retry on validation errors or authentication errors\n        if (error.statusCode && error.statusCode < 500) {\n          throw error;\n        }\n\n        if (attempt === maxRetries) {\n          throw error;\n        }\n\n        // Exponential backoff\n        const delay = Math.pow(2, attempt) * 1000;\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n\n    throw lastError;\n  }\n}\n\nmodule.exports = BaseService;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC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","ignoreList":[]}