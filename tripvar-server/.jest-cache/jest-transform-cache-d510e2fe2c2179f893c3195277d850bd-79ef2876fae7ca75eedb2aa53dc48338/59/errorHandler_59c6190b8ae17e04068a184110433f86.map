{"version":3,"names":["cov_1v3fuoo180","actualCoverage","AppError","createError","s","require","error","warn","security","config","handleCastErrorDB","err","f","message","path","value","validation","field","handleValidationErrorDB","errors","Object","values","map","el","e","join","handleJWTError","authentication","handleJWTExpiredError","handleDuplicateFieldsDB","keys","keyValue","charAt","toUpperCase","slice","conflict","handleMongoError","code","b","database","handleRedisError","serviceUnavailable","service","handleRateLimitError","tooManyRequests","retryAfter","limit","remaining","handleMulterError","maxSize","receivedSize","size","maxFiles","receivedFiles","files","length","sendErrorDev","res","req","status","statusCode","json","details","name","stack","requestId","timestamp","method","sendErrorProd","isOperational","url","userAgent","get","ip","body","query","params","Date","toISOString","module","exports","next","id","SyntaxError","originalError","type","server","isDevelopment","undefined"],"sources":["errorHandler.js"],"sourcesContent":["const { AppError, createError } = require('../utils/errors');\nconst { error, warn, security } = require('../utils/logger');\nconst config = require('../config/config');\n\nconst handleCastErrorDB = err => {\n  const message = `Invalid ${err.path}: ${err.value}`;\n  return createError.validation(message, { field: err.path, value: err.value });\n};\n\nconst handleValidationErrorDB = err => {\n  const errors = Object.values(err.errors).map(el => ({\n    field: el.path,\n    message: el.message,\n    value: el.value\n  }));\n  const message = `Invalid input data. ${errors.map(e => e.message).join('. ')}`;\n  return createError.validation(message, errors);\n};\n\nconst handleJWTError = () =>\n  createError.authentication('Invalid token. Please log in again!');\n\nconst handleJWTExpiredError = () =>\n  createError.authentication('Your token has expired! Please log in again.');\n\nconst handleDuplicateFieldsDB = err => {\n  const field = Object.keys(err.keyValue)[0];\n  const value = err.keyValue[field];\n  const message = `${field.charAt(0).toUpperCase() + field.slice(1)} '${value}' already exists`;\n  return createError.conflict(message, { field, value });\n};\n\nconst handleMongoError = err => {\n  if (err.code === 11000) {\n    return handleDuplicateFieldsDB(err);\n  }\n  return createError.database('Database operation failed', { code: err.code });\n};\n\nconst handleRedisError = err => {\n  return createError.serviceUnavailable('Cache service unavailable', {\n    service: 'redis',\n    error: err.message\n  });\n};\n\nconst handleRateLimitError = err => {\n  return createError.tooManyRequests('Too many requests, please try again later', {\n    retryAfter: err.retryAfter,\n    limit: err.limit,\n    remaining: err.remaining\n  });\n};\n\nconst handleMulterError = err => {\n  if (err.code === 'LIMIT_FILE_SIZE') {\n    return createError.validation('File too large', {\n      maxSize: err.limit,\n      receivedSize: err.size\n    });\n  }\n  if (err.code === 'LIMIT_FILE_COUNT') {\n    return createError.validation('Too many files', {\n      maxFiles: err.limit,\n      receivedFiles: err.files?.length\n    });\n  }\n  if (err.code === 'LIMIT_UNEXPECTED_FILE') {\n    return createError.validation('Unexpected file field', {\n      field: err.field\n    });\n  }\n  return createError.validation('File upload error', { error: err.message });\n};\n\nconst sendErrorDev = (err, res, req) => {\n  res.status(err.statusCode).json({\n    status: err.status,\n    message: err.message,\n    code: err.code,\n    details: err.details,\n    error: {\n      name: err.name,\n      stack: err.stack\n    },\n    requestId: req.requestId,\n    timestamp: err.timestamp,\n    path: req.path,\n    method: req.method\n  });\n};\n\nconst sendErrorProd = (err, res, req) => {\n  // Operational, trusted error: send message to client\n  if (err.isOperational) {\n    res.status(err.statusCode).json({\n      status: err.status,\n      message: err.message,\n      code: err.code,\n      details: err.details,\n      requestId: req.requestId,\n      timestamp: err.timestamp\n    });\n  }\n  // Programming or other unknown error: don't leak error details\n  else {\n    // Log error for debugging\n    error('Unhandled error', {\n      error: err.message,\n      stack: err.stack,\n      requestId: req.requestId,\n      url: req.url,\n      method: req.method,\n      userAgent: req.get('User-Agent'),\n      ip: req.ip,\n      body: req.body,\n      query: req.query,\n      params: req.params\n    });\n\n    // Send generic message\n    res.status(500).json({\n      status: 'error',\n      message: 'Something went very wrong!',\n      code: 'INTERNAL_SERVER_ERROR',\n      requestId: req.requestId,\n      timestamp: new Date().toISOString()\n    });\n  }\n};\n\n// Global error handling middleware\nmodule.exports = (err, req, res, next) => {\n  err.statusCode = err.statusCode || 500;\n  err.status = err.status || 'error';\n  err.timestamp = err.timestamp || new Date().toISOString();\n  err.requestId = req.requestId || req.id || 'unknown';\n\n  // Handle JSON parsing errors\n  if (err instanceof SyntaxError && err.status === 400 && 'body' in err) {\n    err = createError.validation('Invalid JSON format', { \n      originalError: err.message,\n      code: 'INVALID_JSON'\n    });\n  }\n\n  // Handle payload too large errors\n  if (err.type === 'entity.too.large') {\n    err = createError.validation('Request payload too large', {\n      code: 'PAYLOAD_TOO_LARGE',\n      limit: err.limit\n    });\n  }\n\n  // Log all errors with appropriate level\n  if (err.statusCode >= 500) {\n    error('Server error', {\n      error: err.message,\n      stack: config.server.isDevelopment ? err.stack : undefined,\n      requestId: req.requestId,\n      url: req.url,\n      method: req.method,\n      statusCode: err.statusCode,\n      userAgent: req.get('User-Agent'),\n      ip: req.ip\n    });\n\n    // Alert for critical server errors\n    if (err.statusCode >= 500) {\n      security('CRITICAL SERVER ERROR', {\n        error: err.message,\n        requestId: req.requestId,\n        url: req.url,\n        method: req.method,\n        statusCode: err.statusCode,\n        ip: req.ip,\n        timestamp: new Date().toISOString()\n      });\n    }\n  } else if (err.statusCode >= 400) {\n    warn('Client error', {\n      error: err.message,\n      requestId: req.requestId,\n      url: req.url,\n      method: req.method,\n      statusCode: err.statusCode,\n      userAgent: req.get('User-Agent'),\n      ip: req.ip\n    });\n  }\n\n  // Log security-related errors\n  if (err.statusCode === 401 || err.statusCode === 403) {\n    security('Authentication/Authorization error', {\n      error: err.message,\n      requestId: req.requestId,\n      url: req.url,\n      method: req.method,\n      ip: req.ip,\n      userAgent: req.get('User-Agent')\n    });\n  }\n\n  if (config.server.isDevelopment) {\n    sendErrorDev(err, res, req);\n  } else {\n    let error = { ...err };\n    error.message = err.message;\n\n    // Handle specific error types\n    if (error.name === 'CastError') {\n      error = handleCastErrorDB(error);\n    }\n    if (error.name === 'ValidationError') {\n      error = handleValidationErrorDB(error);\n    }\n    if (error.name === 'JsonWebTokenError') {\n      error = handleJWTError();\n    }\n    if (error.name === 'TokenExpiredError') {\n      error = handleJWTExpiredError();\n    }\n    if (error.name === 'MongoError') {\n      error = handleMongoError(error);\n    }\n    if (error.name === 'MongoServerError') {\n      error = handleMongoError(error);\n    }\n    if (error.name === 'RedisError') {\n      error = handleRedisError(error);\n    }\n    if (error.name === 'RateLimitError') {\n      error = handleRateLimitError(error);\n    }\n    if (error.name === 'MulterError') {\n      error = handleMulterError(error);\n    }\n\n    sendErrorProd(error, res, req);\n  }\n};"],"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","ignoreList":[]}