a113ae0a38e4255edf23f49c05f10e72
// Mock notification service
_getJestObj().mock('../services/notification.service', () => ({
  createBookingConfirmationNotification: jest.fn().mockResolvedValue(),
  createBookingCancellationNotification: jest.fn().mockResolvedValue()
}));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const request = require('supertest');
const app = require('./app.test');
const {
  setupTestEnvironment,
  cleanupTestEnvironment,
  clearDatabase,
  createTestUser,
  createTestAdmin,
  createTestDestination,
  createTestBooking,
  generateTestToken,
  generateFutureDates,
  expectValidationError,
  expectAuthError,
  expectSuccessResponse,
  expectNotFoundError,
  expectConflictError
} = require('./setup');
describe('Booking API', () => {
  let user, admin, destination, token, adminToken;
  beforeAll(async () => {
    await setupTestEnvironment();
  });
  afterAll(async () => {
    await cleanupTestEnvironment();
  });
  beforeEach(async () => {
    await clearDatabase();

    // Create test data
    user = await createTestUser();
    admin = await createTestAdmin();
    destination = await createTestDestination();
    token = generateTestToken(user);
    adminToken = generateTestToken(admin);
  });
  describe('POST /api/v1/bookings', () => {
    it('should create a new booking successfully', async () => {
      const dates = generateFutureDates();
      const bookingData = {
        destinationId: destination._id,
        checkInDate: dates.checkInDate,
        checkOutDate: dates.checkOutDate,
        numberOfGuests: 2,
        paymentMethod: 'credit-card',
        specialRequests: 'Late check-in requested',
        contactEmail: 'test@example.com',
        contactPhone: '+1234567890'
      };
      const response = await request(app).post('/api/v1/bookings').set('Authorization', `Bearer ${token}`).send(bookingData).expect(201);
      expectSuccessResponse(response, 201, 'Booking created successfully');
      expect(response.body.data.booking).toHaveProperty('_id');
      expect(response.body.data.booking.user).toBe(user._id.toString());
      expect(response.body.data.booking.destination).toBe(destination._id.toString());
      expect(response.body.data.booking.numberOfGuests).toBe(2);
      expect(response.body.data.booking.totalAmount).toBeGreaterThan(0);
    });
    it('should fail to create booking with missing required fields', async () => {
      const bookingData = {
        destinationId: destination._id
        // Missing checkInDate, checkOutDate, numberOfGuests
      };
      const response = await request(app).post('/api/v1/bookings').set('Authorization', `Bearer ${token}`).send(bookingData).expect(400);
      expect(response.body.status).toBe('fail');
      expect(response.body.message).toContain('Missing required booking information');
    });
    it('should fail to create booking with invalid dates', async () => {
      const bookingData = {
        destinationId: destination._id,
        checkInDate: '2023-01-01',
        // Past date
        checkOutDate: '2024-06-05',
        numberOfGuests: 2
      };
      const response = await request(app).post('/api/v1/bookings').set('Authorization', `Bearer ${token}`).send(bookingData).expect(400);
      expect(response.body.status).toBe('fail');
      expect(response.body.message).toContain('Check-in date must be in the future');
    });
    it('should fail to create booking with invalid date range', async () => {
      const dates = generateFutureDates();
      const bookingData = {
        destinationId: destination._id,
        checkInDate: dates.checkOutDate,
        checkOutDate: dates.checkInDate,
        // Before check-in
        numberOfGuests: 2
      };
      const response = await request(app).post('/api/v1/bookings').set('Authorization', `Bearer ${token}`).send(bookingData).expect(400);
      expect(response.body.status).toBe('fail');
      expect(response.body.message).toContain('Check-out date must be after check-in date');
    });
    it('should fail to create booking for non-existent destination', async () => {
      const dates = generateFutureDates();
      const bookingData = {
        destinationId: '507f1f77bcf86cd799439011',
        // Non-existent ID
        checkInDate: dates.checkInDate,
        checkOutDate: dates.checkOutDate,
        numberOfGuests: 2
      };
      const response = await request(app).post('/api/v1/bookings').set('Authorization', `Bearer ${token}`).send(bookingData).expect(404);
      expectNotFoundError(response, 404, 'Destination not found');
    });
    it('should fail to create booking without authentication', async () => {
      const dates = generateFutureDates();
      const bookingData = {
        destinationId: destination._id,
        checkInDate: dates.checkInDate,
        checkOutDate: dates.checkOutDate,
        numberOfGuests: 2
      };
      const response = await request(app).post('/api/v1/bookings').send(bookingData).expect(401);
      expectAuthError(response, 401);
    });
  });
  describe('GET /api/v1/bookings', () => {
    beforeEach(async () => {
      // Create test bookings
      await createTestBooking({
        userId: user._id,
        destinationId: destination._id
      });
      await createTestBooking({
        userId: user._id,
        destinationId: destination._id,
        status: 'cancelled'
      });
    });
    it('should get user bookings successfully', async () => {
      const response = await request(app).get('/api/v1/bookings').set('Authorization', `Bearer ${token}`).expect(200);
      expectSuccessResponse(response, 200);
      expect(response.body.data.bookings).toHaveLength(2);
      expect(response.body.data.pagination).toHaveProperty('current');
      expect(response.body.data.pagination).toHaveProperty('total');
    });
    it('should filter bookings by status', async () => {
      const response = await request(app).get('/api/v1/bookings?status=cancelled').set('Authorization', `Bearer ${token}`).expect(200);
      expectSuccessResponse(response, 200);
      expect(response.body.data.bookings).toHaveLength(1);
      expect(response.body.data.bookings[0].status).toBe('cancelled');
    });
    it('should handle pagination', async () => {
      const response = await request(app).get('/api/v1/bookings?page=1&limit=1').set('Authorization', `Bearer ${token}`).expect(200);
      expectSuccessResponse(response, 200);
      expect(response.body.data.bookings).toHaveLength(1);
      expect(response.body.data.pagination.current).toBe(1);
    });
    it('should fail to get bookings without authentication', async () => {
      const response = await request(app).get('/api/v1/bookings').expect(401);
      expectAuthError(response, 401);
    });
  });
  describe('GET /api/v1/bookings/:id', () => {
    let booking;
    beforeEach(async () => {
      booking = await createTestBooking({
        userId: user._id,
        destinationId: destination._id
      });
    });
    it('should get booking by ID successfully', async () => {
      const response = await request(app).get(`/api/v1/bookings/${booking._id}`).set('Authorization', `Bearer ${token}`).expect(200);
      expectSuccessResponse(response, 200);
      expect(response.body.data.booking._id).toBe(booking._id.toString());
    });
    it('should allow admin to access any booking', async () => {
      const response = await request(app).get(`/api/v1/bookings/${booking._id}`).set('Authorization', `Bearer ${adminToken}`).expect(200);
      expectSuccessResponse(response, 200);
      expect(response.body.data.booking._id).toBe(booking._id.toString());
    });
    it('should fail to get non-existent booking', async () => {
      const response = await request(app).get('/api/v1/bookings/507f1f77bcf86cd799439011').set('Authorization', `Bearer ${token}`).expect(404);
      expectNotFoundError(response, 404, 'Booking not found');
    });
    it('should fail to access another user\'s booking', async () => {
      const otherUser = await createTestUser({
        email: 'other@example.com'
      });
      const otherUserToken = generateTestToken(otherUser);
      const response = await request(app).get(`/api/v1/bookings/${booking._id}`).set('Authorization', `Bearer ${otherUserToken}`).expect(403);
      expect(response.body.status).toBe('fail');
      expect(response.body.message).toContain('Access denied');
    });
  });
  describe('DELETE /api/v1/bookings/:id', () => {
    let booking;
    beforeEach(async () => {
      booking = await createTestBooking({
        userId: user._id,
        destinationId: destination._id
      });
    });
    it('should cancel booking successfully', async () => {
      const response = await request(app).delete(`/api/v1/bookings/${booking._id}`).set('Authorization', `Bearer ${token}`).send({
        reason: 'Change of plans'
      }).expect(200);
      expectSuccessResponse(response, 200, 'Booking cancelled successfully');
      expect(response.body.data.booking.status).toBe('cancelled');
      expect(response.body.data.booking.cancellationReason).toBe('Change of plans');
    });
    it('should fail to cancel non-existent booking', async () => {
      const response = await request(app).delete('/api/v1/bookings/507f1f77bcf86cd799439011').set('Authorization', `Bearer ${token}`).send({
        reason: 'Change of plans'
      }).expect(404);
      expectNotFoundError(response, 404, 'Booking not found');
    });
    it('should fail to cancel another user\'s booking', async () => {
      const otherUser = await createTestUser({
        email: 'other@example.com'
      });
      const otherUserToken = generateTestToken(otherUser);
      const response = await request(app).delete(`/api/v1/bookings/${booking._id}`).set('Authorization', `Bearer ${otherUserToken}`).send({
        reason: 'Change of plans'
      }).expect(403);
      expect(response.body.status).toBe('fail');
      expect(response.body.message).toContain('Access denied');
    });
    it('should fail to cancel already cancelled booking', async () => {
      // First cancel the booking
      await request(app).delete(`/api/v1/bookings/${booking._id}`).set('Authorization', `Bearer ${token}`).send({
        reason: 'Change of plans'
      });

      // Try to cancel again
      const response = await request(app).delete(`/api/v1/bookings/${booking._id}`).set('Authorization', `Bearer ${token}`).send({
        reason: 'Another reason'
      }).expect(409);
      expectConflictError(response, 409, 'Booking is already cancelled');
    });
  });
  describe('GET /api/v1/bookings/admin/all', () => {
    beforeEach(async () => {
      // Create test bookings
      await createTestBooking({
        userId: user._id,
        destinationId: destination._id
      });
      await createTestBooking({
        userId: user._id,
        destinationId: destination._id,
        status: 'cancelled'
      });
    });
    it('should get all bookings for admin', async () => {
      const response = await request(app).get('/api/v1/bookings/admin/all').set('Authorization', `Bearer ${adminToken}`).expect(200);
      expectSuccessResponse(response, 200);
      expect(response.body.data.bookings).toHaveLength(2);
      expect(response.body.data.pagination).toHaveProperty('current');
      expect(response.body.data.pagination).toHaveProperty('total');
    });
    it('should filter bookings by status for admin', async () => {
      const response = await request(app).get('/api/v1/bookings/admin/all?status=cancelled').set('Authorization', `Bearer ${adminToken}`).expect(200);
      expectSuccessResponse(response, 200);
      expect(response.body.data.bookings).toHaveLength(1);
      expect(response.body.data.bookings[0].status).toBe('cancelled');
    });
    it('should fail for non-admin users', async () => {
      const response = await request(app).get('/api/v1/bookings/admin/all').set('Authorization', `Bearer ${token}`).expect(403);
      expect(response.body.status).toBe('fail');
      expect(response.body.message).toContain('Access denied');
    });
  });
  describe('PATCH /api/v1/bookings/:id/status', () => {
    let booking;
    beforeEach(async () => {
      booking = await createTestBooking({
        userId: user._id,
        destinationId: destination._id
      });
    });
    it('should update booking status successfully', async () => {
      const response = await request(app).patch(`/api/v1/bookings/${booking._id}/status`).set('Authorization', `Bearer ${adminToken}`).send({
        status: 'confirmed'
      }).expect(200);
      expectSuccessResponse(response, 200, 'Booking status updated successfully');
      expect(response.body.data.booking.status).toBe('confirmed');
    });
    it('should fail with invalid status', async () => {
      const response = await request(app).patch(`/api/v1/bookings/${booking._id}/status`).set('Authorization', `Bearer ${adminToken}`).send({
        status: 'invalid_status'
      }).expect(400);
      expect(response.body.status).toBe('fail');
      expect(response.body.message).toContain('Invalid booking status');
    });
    it('should fail for non-admin users', async () => {
      const response = await request(app).patch(`/api/v1/bookings/${booking._id}/status`).set('Authorization', `Bearer ${token}`).send({
        status: 'confirmed'
      }).expect(403);
      expect(response.body.status).toBe('fail');
      expect(response.body.message).toContain('Access denied');
    });
  });
  describe('GET /api/v1/bookings/availability', () => {
    it('should check availability successfully', async () => {
      const dates = generateFutureDates();
      const response = await request(app).get(`/api/v1/bookings/availability?destinationId=${destination._id}&checkInDate=${dates.checkInDate}&checkOutDate=${dates.checkOutDate}`).expect(200);
      expectSuccessResponse(response, 200);
      expect(response.body.data).toHaveProperty('available');
      expect(response.body.data).toHaveProperty('checkInDate');
      expect(response.body.data).toHaveProperty('checkOutDate');
    });
    it('should fail with missing parameters', async () => {
      const response = await request(app).get('/api/v1/bookings/availability').expect(400);
      expect(response.body.status).toBe('fail');
      expect(response.body.message).toContain('Missing required parameters');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJjcmVhdGVCb29raW5nQ29uZmlybWF0aW9uTm90aWZpY2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJjcmVhdGVCb29raW5nQ2FuY2VsbGF0aW9uTm90aWZpY2F0aW9uIiwicmVxdWlyZSIsInJlcXVlc3QiLCJhcHAiLCJzZXR1cFRlc3RFbnZpcm9ubWVudCIsImNsZWFudXBUZXN0RW52aXJvbm1lbnQiLCJjbGVhckRhdGFiYXNlIiwiY3JlYXRlVGVzdFVzZXIiLCJjcmVhdGVUZXN0QWRtaW4iLCJjcmVhdGVUZXN0RGVzdGluYXRpb24iLCJjcmVhdGVUZXN0Qm9va2luZyIsImdlbmVyYXRlVGVzdFRva2VuIiwiZ2VuZXJhdGVGdXR1cmVEYXRlcyIsImV4cGVjdFZhbGlkYXRpb25FcnJvciIsImV4cGVjdEF1dGhFcnJvciIsImV4cGVjdFN1Y2Nlc3NSZXNwb25zZSIsImV4cGVjdE5vdEZvdW5kRXJyb3IiLCJleHBlY3RDb25mbGljdEVycm9yIiwiZGVzY3JpYmUiLCJ1c2VyIiwiYWRtaW4iLCJkZXN0aW5hdGlvbiIsInRva2VuIiwiYWRtaW5Ub2tlbiIsImJlZm9yZUFsbCIsImFmdGVyQWxsIiwiYmVmb3JlRWFjaCIsIml0IiwiZGF0ZXMiLCJib29raW5nRGF0YSIsImRlc3RpbmF0aW9uSWQiLCJfaWQiLCJjaGVja0luRGF0ZSIsImNoZWNrT3V0RGF0ZSIsIm51bWJlck9mR3Vlc3RzIiwicGF5bWVudE1ldGhvZCIsInNwZWNpYWxSZXF1ZXN0cyIsImNvbnRhY3RFbWFpbCIsImNvbnRhY3RQaG9uZSIsInJlc3BvbnNlIiwicG9zdCIsInNldCIsInNlbmQiLCJleHBlY3QiLCJib2R5IiwiZGF0YSIsImJvb2tpbmciLCJ0b0hhdmVQcm9wZXJ0eSIsInRvQmUiLCJ0b1N0cmluZyIsInRvdGFsQW1vdW50IiwidG9CZUdyZWF0ZXJUaGFuIiwic3RhdHVzIiwibWVzc2FnZSIsInRvQ29udGFpbiIsInVzZXJJZCIsImdldCIsImJvb2tpbmdzIiwidG9IYXZlTGVuZ3RoIiwicGFnaW5hdGlvbiIsImN1cnJlbnQiLCJvdGhlclVzZXIiLCJlbWFpbCIsIm90aGVyVXNlclRva2VuIiwiZGVsZXRlIiwicmVhc29uIiwiY2FuY2VsbGF0aW9uUmVhc29uIiwicGF0Y2giXSwic291cmNlcyI6WyJib29raW5nLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcmVxdWVzdCA9IHJlcXVpcmUoJ3N1cGVydGVzdCcpO1xuY29uc3QgYXBwID0gcmVxdWlyZSgnLi9hcHAudGVzdCcpO1xuY29uc3Qge1xuICBzZXR1cFRlc3RFbnZpcm9ubWVudCxcbiAgY2xlYW51cFRlc3RFbnZpcm9ubWVudCxcbiAgY2xlYXJEYXRhYmFzZSxcbiAgY3JlYXRlVGVzdFVzZXIsXG4gIGNyZWF0ZVRlc3RBZG1pbixcbiAgY3JlYXRlVGVzdERlc3RpbmF0aW9uLFxuICBjcmVhdGVUZXN0Qm9va2luZyxcbiAgZ2VuZXJhdGVUZXN0VG9rZW4sXG4gIGdlbmVyYXRlRnV0dXJlRGF0ZXMsXG4gIGV4cGVjdFZhbGlkYXRpb25FcnJvcixcbiAgZXhwZWN0QXV0aEVycm9yLFxuICBleHBlY3RTdWNjZXNzUmVzcG9uc2UsXG4gIGV4cGVjdE5vdEZvdW5kRXJyb3IsXG4gIGV4cGVjdENvbmZsaWN0RXJyb3Jcbn0gPSByZXF1aXJlKCcuL3NldHVwJyk7XG5cbi8vIE1vY2sgbm90aWZpY2F0aW9uIHNlcnZpY2Vcbmplc3QubW9jaygnLi4vc2VydmljZXMvbm90aWZpY2F0aW9uLnNlcnZpY2UnLCAoKSA9PiAoe1xuICBjcmVhdGVCb29raW5nQ29uZmlybWF0aW9uTm90aWZpY2F0aW9uOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoKSxcbiAgY3JlYXRlQm9va2luZ0NhbmNlbGxhdGlvbk5vdGlmaWNhdGlvbjogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCksXG59KSk7XG5cbmRlc2NyaWJlKCdCb29raW5nIEFQSScsICgpID0+IHtcbiAgbGV0IHVzZXIsIGFkbWluLCBkZXN0aW5hdGlvbiwgdG9rZW4sIGFkbWluVG9rZW47XG5cbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBzZXR1cFRlc3RFbnZpcm9ubWVudCgpO1xuICB9KTtcblxuICBhZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgY2xlYW51cFRlc3RFbnZpcm9ubWVudCgpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBjbGVhckRhdGFiYXNlKCk7XG4gICAgXG4gICAgLy8gQ3JlYXRlIHRlc3QgZGF0YVxuICAgIHVzZXIgPSBhd2FpdCBjcmVhdGVUZXN0VXNlcigpO1xuICAgIGFkbWluID0gYXdhaXQgY3JlYXRlVGVzdEFkbWluKCk7XG4gICAgZGVzdGluYXRpb24gPSBhd2FpdCBjcmVhdGVUZXN0RGVzdGluYXRpb24oKTtcbiAgICB0b2tlbiA9IGdlbmVyYXRlVGVzdFRva2VuKHVzZXIpO1xuICAgIGFkbWluVG9rZW4gPSBnZW5lcmF0ZVRlc3RUb2tlbihhZG1pbik7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQT1NUIC9hcGkvdjEvYm9va2luZ3MnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBuZXcgYm9va2luZyBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBkYXRlcyA9IGdlbmVyYXRlRnV0dXJlRGF0ZXMoKTtcbiAgICAgIGNvbnN0IGJvb2tpbmdEYXRhID0ge1xuICAgICAgICBkZXN0aW5hdGlvbklkOiBkZXN0aW5hdGlvbi5faWQsXG4gICAgICAgIGNoZWNrSW5EYXRlOiBkYXRlcy5jaGVja0luRGF0ZSxcbiAgICAgICAgY2hlY2tPdXREYXRlOiBkYXRlcy5jaGVja091dERhdGUsXG4gICAgICAgIG51bWJlck9mR3Vlc3RzOiAyLFxuICAgICAgICBwYXltZW50TWV0aG9kOiAnY3JlZGl0LWNhcmQnLFxuICAgICAgICBzcGVjaWFsUmVxdWVzdHM6ICdMYXRlIGNoZWNrLWluIHJlcXVlc3RlZCcsXG4gICAgICAgIGNvbnRhY3RFbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBjb250YWN0UGhvbmU6ICcrMTIzNDU2Nzg5MCdcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL3YxL2Jvb2tpbmdzJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgICAuc2VuZChib29raW5nRGF0YSlcbiAgICAgICAgLmV4cGVjdCgyMDEpO1xuXG4gICAgICBleHBlY3RTdWNjZXNzUmVzcG9uc2UocmVzcG9uc2UsIDIwMSwgJ0Jvb2tpbmcgY3JlYXRlZCBzdWNjZXNzZnVsbHknKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuYm9va2luZykudG9IYXZlUHJvcGVydHkoJ19pZCcpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5ib29raW5nLnVzZXIpLnRvQmUodXNlci5faWQudG9TdHJpbmcoKSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmJvb2tpbmcuZGVzdGluYXRpb24pLnRvQmUoZGVzdGluYXRpb24uX2lkLnRvU3RyaW5nKCkpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5ib29raW5nLm51bWJlck9mR3Vlc3RzKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5ib29raW5nLnRvdGFsQW1vdW50KS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZhaWwgdG8gY3JlYXRlIGJvb2tpbmcgd2l0aCBtaXNzaW5nIHJlcXVpcmVkIGZpZWxkcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGJvb2tpbmdEYXRhID0ge1xuICAgICAgICBkZXN0aW5hdGlvbklkOiBkZXN0aW5hdGlvbi5faWQsXG4gICAgICAgIC8vIE1pc3NpbmcgY2hlY2tJbkRhdGUsIGNoZWNrT3V0RGF0ZSwgbnVtYmVyT2ZHdWVzdHNcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL3YxL2Jvb2tpbmdzJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgICAuc2VuZChib29raW5nRGF0YSlcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdGF0dXMpLnRvQmUoJ2ZhaWwnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1lc3NhZ2UpLnRvQ29udGFpbignTWlzc2luZyByZXF1aXJlZCBib29raW5nIGluZm9ybWF0aW9uJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZhaWwgdG8gY3JlYXRlIGJvb2tpbmcgd2l0aCBpbnZhbGlkIGRhdGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYm9va2luZ0RhdGEgPSB7XG4gICAgICAgIGRlc3RpbmF0aW9uSWQ6IGRlc3RpbmF0aW9uLl9pZCxcbiAgICAgICAgY2hlY2tJbkRhdGU6ICcyMDIzLTAxLTAxJywgLy8gUGFzdCBkYXRlXG4gICAgICAgIGNoZWNrT3V0RGF0ZTogJzIwMjQtMDYtMDUnLFxuICAgICAgICBudW1iZXJPZkd1ZXN0czogMlxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvdjEvYm9va2luZ3MnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApXG4gICAgICAgIC5zZW5kKGJvb2tpbmdEYXRhKVxuICAgICAgICAuZXhwZWN0KDQwMCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN0YXR1cykudG9CZSgnZmFpbCcpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9Db250YWluKCdDaGVjay1pbiBkYXRlIG11c3QgYmUgaW4gdGhlIGZ1dHVyZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBmYWlsIHRvIGNyZWF0ZSBib29raW5nIHdpdGggaW52YWxpZCBkYXRlIHJhbmdlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0ZXMgPSBnZW5lcmF0ZUZ1dHVyZURhdGVzKCk7XG4gICAgICBjb25zdCBib29raW5nRGF0YSA9IHtcbiAgICAgICAgZGVzdGluYXRpb25JZDogZGVzdGluYXRpb24uX2lkLFxuICAgICAgICBjaGVja0luRGF0ZTogZGF0ZXMuY2hlY2tPdXREYXRlLFxuICAgICAgICBjaGVja091dERhdGU6IGRhdGVzLmNoZWNrSW5EYXRlLCAvLyBCZWZvcmUgY2hlY2staW5cbiAgICAgICAgbnVtYmVyT2ZHdWVzdHM6IDJcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL3YxL2Jvb2tpbmdzJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgICAuc2VuZChib29raW5nRGF0YSlcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdGF0dXMpLnRvQmUoJ2ZhaWwnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1lc3NhZ2UpLnRvQ29udGFpbignQ2hlY2stb3V0IGRhdGUgbXVzdCBiZSBhZnRlciBjaGVjay1pbiBkYXRlJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZhaWwgdG8gY3JlYXRlIGJvb2tpbmcgZm9yIG5vbi1leGlzdGVudCBkZXN0aW5hdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGVzID0gZ2VuZXJhdGVGdXR1cmVEYXRlcygpO1xuICAgICAgY29uc3QgYm9va2luZ0RhdGEgPSB7XG4gICAgICAgIGRlc3RpbmF0aW9uSWQ6ICc1MDdmMWY3N2JjZjg2Y2Q3OTk0MzkwMTEnLCAvLyBOb24tZXhpc3RlbnQgSURcbiAgICAgICAgY2hlY2tJbkRhdGU6IGRhdGVzLmNoZWNrSW5EYXRlLFxuICAgICAgICBjaGVja091dERhdGU6IGRhdGVzLmNoZWNrT3V0RGF0ZSxcbiAgICAgICAgbnVtYmVyT2ZHdWVzdHM6IDJcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL3YxL2Jvb2tpbmdzJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgICAuc2VuZChib29raW5nRGF0YSlcbiAgICAgICAgLmV4cGVjdCg0MDQpO1xuXG4gICAgICBleHBlY3ROb3RGb3VuZEVycm9yKHJlc3BvbnNlLCA0MDQsICdEZXN0aW5hdGlvbiBub3QgZm91bmQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZmFpbCB0byBjcmVhdGUgYm9va2luZyB3aXRob3V0IGF1dGhlbnRpY2F0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0ZXMgPSBnZW5lcmF0ZUZ1dHVyZURhdGVzKCk7XG4gICAgICBjb25zdCBib29raW5nRGF0YSA9IHtcbiAgICAgICAgZGVzdGluYXRpb25JZDogZGVzdGluYXRpb24uX2lkLFxuICAgICAgICBjaGVja0luRGF0ZTogZGF0ZXMuY2hlY2tJbkRhdGUsXG4gICAgICAgIGNoZWNrT3V0RGF0ZTogZGF0ZXMuY2hlY2tPdXREYXRlLFxuICAgICAgICBudW1iZXJPZkd1ZXN0czogMlxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvdjEvYm9va2luZ3MnKVxuICAgICAgICAuc2VuZChib29raW5nRGF0YSlcbiAgICAgICAgLmV4cGVjdCg0MDEpO1xuXG4gICAgICBleHBlY3RBdXRoRXJyb3IocmVzcG9uc2UsIDQwMSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdHRVQgL2FwaS92MS9ib29raW5ncycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIC8vIENyZWF0ZSB0ZXN0IGJvb2tpbmdzXG4gICAgICBhd2FpdCBjcmVhdGVUZXN0Qm9va2luZyh7IHVzZXJJZDogdXNlci5faWQsIGRlc3RpbmF0aW9uSWQ6IGRlc3RpbmF0aW9uLl9pZCB9KTtcbiAgICAgIGF3YWl0IGNyZWF0ZVRlc3RCb29raW5nKHsgXG4gICAgICAgIHVzZXJJZDogdXNlci5faWQsIFxuICAgICAgICBkZXN0aW5hdGlvbklkOiBkZXN0aW5hdGlvbi5faWQsXG4gICAgICAgIHN0YXR1czogJ2NhbmNlbGxlZCdcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBnZXQgdXNlciBib29raW5ncyBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZ2V0KCcvYXBpL3YxL2Jvb2tpbmdzJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIGV4cGVjdFN1Y2Nlc3NSZXNwb25zZShyZXNwb25zZSwgMjAwKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuYm9va2luZ3MpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEucGFnaW5hdGlvbikudG9IYXZlUHJvcGVydHkoJ2N1cnJlbnQnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEucGFnaW5hdGlvbikudG9IYXZlUHJvcGVydHkoJ3RvdGFsJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZpbHRlciBib29raW5ncyBieSBzdGF0dXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZ2V0KCcvYXBpL3YxL2Jvb2tpbmdzP3N0YXR1cz1jYW5jZWxsZWQnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0U3VjY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlLCAyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5ib29raW5ncykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5ib29raW5nc1swXS5zdGF0dXMpLnRvQmUoJ2NhbmNlbGxlZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgcGFnaW5hdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvdjEvYm9va2luZ3M/cGFnZT0xJmxpbWl0PTEnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0U3VjY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlLCAyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5ib29raW5ncykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5wYWdpbmF0aW9uLmN1cnJlbnQpLnRvQmUoMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZhaWwgdG8gZ2V0IGJvb2tpbmdzIHdpdGhvdXQgYXV0aGVudGljYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZ2V0KCcvYXBpL3YxL2Jvb2tpbmdzJylcbiAgICAgICAgLmV4cGVjdCg0MDEpO1xuXG4gICAgICBleHBlY3RBdXRoRXJyb3IocmVzcG9uc2UsIDQwMSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdHRVQgL2FwaS92MS9ib29raW5ncy86aWQnLCAoKSA9PiB7XG4gICAgbGV0IGJvb2tpbmc7XG5cbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIGJvb2tpbmcgPSBhd2FpdCBjcmVhdGVUZXN0Qm9va2luZyh7IHVzZXJJZDogdXNlci5faWQsIGRlc3RpbmF0aW9uSWQ6IGRlc3RpbmF0aW9uLl9pZCB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZ2V0IGJvb2tpbmcgYnkgSUQgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmdldChgL2FwaS92MS9ib29raW5ncy8ke2Jvb2tpbmcuX2lkfWApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YClcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBleHBlY3RTdWNjZXNzUmVzcG9uc2UocmVzcG9uc2UsIDIwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmJvb2tpbmcuX2lkKS50b0JlKGJvb2tpbmcuX2lkLnRvU3RyaW5nKCkpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBhbGxvdyBhZG1pbiB0byBhY2Nlc3MgYW55IGJvb2tpbmcnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZ2V0KGAvYXBpL3YxL2Jvb2tpbmdzLyR7Ym9va2luZy5faWR9YClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthZG1pblRva2VufWApXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0U3VjY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlLCAyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5ib29raW5nLl9pZCkudG9CZShib29raW5nLl9pZC50b1N0cmluZygpKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZmFpbCB0byBnZXQgbm9uLWV4aXN0ZW50IGJvb2tpbmcnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZ2V0KCcvYXBpL3YxL2Jvb2tpbmdzLzUwN2YxZjc3YmNmODZjZDc5OTQzOTAxMScpXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YClcbiAgICAgICAgLmV4cGVjdCg0MDQpO1xuXG4gICAgICBleHBlY3ROb3RGb3VuZEVycm9yKHJlc3BvbnNlLCA0MDQsICdCb29raW5nIG5vdCBmb3VuZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBmYWlsIHRvIGFjY2VzcyBhbm90aGVyIHVzZXJcXCdzIGJvb2tpbmcnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvdGhlclVzZXIgPSBhd2FpdCBjcmVhdGVUZXN0VXNlcih7IGVtYWlsOiAnb3RoZXJAZXhhbXBsZS5jb20nIH0pO1xuICAgICAgY29uc3Qgb3RoZXJVc2VyVG9rZW4gPSBnZW5lcmF0ZVRlc3RUb2tlbihvdGhlclVzZXIpO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZ2V0KGAvYXBpL3YxL2Jvb2tpbmdzLyR7Ym9va2luZy5faWR9YClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHtvdGhlclVzZXJUb2tlbn1gKVxuICAgICAgICAuZXhwZWN0KDQwMyk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN0YXR1cykudG9CZSgnZmFpbCcpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9Db250YWluKCdBY2Nlc3MgZGVuaWVkJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdERUxFVEUgL2FwaS92MS9ib29raW5ncy86aWQnLCAoKSA9PiB7XG4gICAgbGV0IGJvb2tpbmc7XG5cbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIGJvb2tpbmcgPSBhd2FpdCBjcmVhdGVUZXN0Qm9va2luZyh7IHVzZXJJZDogdXNlci5faWQsIGRlc3RpbmF0aW9uSWQ6IGRlc3RpbmF0aW9uLl9pZCB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2FuY2VsIGJvb2tpbmcgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmRlbGV0ZShgL2FwaS92MS9ib29raW5ncy8ke2Jvb2tpbmcuX2lkfWApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YClcbiAgICAgICAgLnNlbmQoeyByZWFzb246ICdDaGFuZ2Ugb2YgcGxhbnMnIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0U3VjY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlLCAyMDAsICdCb29raW5nIGNhbmNlbGxlZCBzdWNjZXNzZnVsbHknKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuYm9va2luZy5zdGF0dXMpLnRvQmUoJ2NhbmNlbGxlZCcpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5ib29raW5nLmNhbmNlbGxhdGlvblJlYXNvbikudG9CZSgnQ2hhbmdlIG9mIHBsYW5zJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZhaWwgdG8gY2FuY2VsIG5vbi1leGlzdGVudCBib29raW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmRlbGV0ZSgnL2FwaS92MS9ib29raW5ncy81MDdmMWY3N2JjZjg2Y2Q3OTk0MzkwMTEnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApXG4gICAgICAgIC5zZW5kKHsgcmVhc29uOiAnQ2hhbmdlIG9mIHBsYW5zJyB9KVxuICAgICAgICAuZXhwZWN0KDQwNCk7XG5cbiAgICAgIGV4cGVjdE5vdEZvdW5kRXJyb3IocmVzcG9uc2UsIDQwNCwgJ0Jvb2tpbmcgbm90IGZvdW5kJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZhaWwgdG8gY2FuY2VsIGFub3RoZXIgdXNlclxcJ3MgYm9va2luZycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG90aGVyVXNlciA9IGF3YWl0IGNyZWF0ZVRlc3RVc2VyKHsgZW1haWw6ICdvdGhlckBleGFtcGxlLmNvbScgfSk7XG4gICAgICBjb25zdCBvdGhlclVzZXJUb2tlbiA9IGdlbmVyYXRlVGVzdFRva2VuKG90aGVyVXNlcik7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5kZWxldGUoYC9hcGkvdjEvYm9va2luZ3MvJHtib29raW5nLl9pZH1gKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke290aGVyVXNlclRva2VufWApXG4gICAgICAgIC5zZW5kKHsgcmVhc29uOiAnQ2hhbmdlIG9mIHBsYW5zJyB9KVxuICAgICAgICAuZXhwZWN0KDQwMyk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN0YXR1cykudG9CZSgnZmFpbCcpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9Db250YWluKCdBY2Nlc3MgZGVuaWVkJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZhaWwgdG8gY2FuY2VsIGFscmVhZHkgY2FuY2VsbGVkIGJvb2tpbmcnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBGaXJzdCBjYW5jZWwgdGhlIGJvb2tpbmdcbiAgICAgIGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZGVsZXRlKGAvYXBpL3YxL2Jvb2tpbmdzLyR7Ym9va2luZy5faWR9YClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgICAuc2VuZCh7IHJlYXNvbjogJ0NoYW5nZSBvZiBwbGFucycgfSk7XG5cbiAgICAgIC8vIFRyeSB0byBjYW5jZWwgYWdhaW5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5kZWxldGUoYC9hcGkvdjEvYm9va2luZ3MvJHtib29raW5nLl9pZH1gKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApXG4gICAgICAgIC5zZW5kKHsgcmVhc29uOiAnQW5vdGhlciByZWFzb24nIH0pXG4gICAgICAgIC5leHBlY3QoNDA5KTtcblxuICAgICAgZXhwZWN0Q29uZmxpY3RFcnJvcihyZXNwb25zZSwgNDA5LCAnQm9va2luZyBpcyBhbHJlYWR5IGNhbmNlbGxlZCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnR0VUIC9hcGkvdjEvYm9va2luZ3MvYWRtaW4vYWxsJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ3JlYXRlIHRlc3QgYm9va2luZ3NcbiAgICAgIGF3YWl0IGNyZWF0ZVRlc3RCb29raW5nKHsgdXNlcklkOiB1c2VyLl9pZCwgZGVzdGluYXRpb25JZDogZGVzdGluYXRpb24uX2lkIH0pO1xuICAgICAgYXdhaXQgY3JlYXRlVGVzdEJvb2tpbmcoeyBcbiAgICAgICAgdXNlcklkOiB1c2VyLl9pZCwgXG4gICAgICAgIGRlc3RpbmF0aW9uSWQ6IGRlc3RpbmF0aW9uLl9pZCxcbiAgICAgICAgc3RhdHVzOiAnY2FuY2VsbGVkJ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGdldCBhbGwgYm9va2luZ3MgZm9yIGFkbWluJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmdldCgnL2FwaS92MS9ib29raW5ncy9hZG1pbi9hbGwnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2FkbWluVG9rZW59YClcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBleHBlY3RTdWNjZXNzUmVzcG9uc2UocmVzcG9uc2UsIDIwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmJvb2tpbmdzKS50b0hhdmVMZW5ndGgoMik7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLnBhZ2luYXRpb24pLnRvSGF2ZVByb3BlcnR5KCdjdXJyZW50Jyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLnBhZ2luYXRpb24pLnRvSGF2ZVByb3BlcnR5KCd0b3RhbCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBmaWx0ZXIgYm9va2luZ3MgYnkgc3RhdHVzIGZvciBhZG1pbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvdjEvYm9va2luZ3MvYWRtaW4vYWxsP3N0YXR1cz1jYW5jZWxsZWQnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2FkbWluVG9rZW59YClcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBleHBlY3RTdWNjZXNzUmVzcG9uc2UocmVzcG9uc2UsIDIwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmJvb2tpbmdzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmJvb2tpbmdzWzBdLnN0YXR1cykudG9CZSgnY2FuY2VsbGVkJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZhaWwgZm9yIG5vbi1hZG1pbiB1c2VycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvdjEvYm9va2luZ3MvYWRtaW4vYWxsJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgICAuZXhwZWN0KDQwMyk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN0YXR1cykudG9CZSgnZmFpbCcpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9Db250YWluKCdBY2Nlc3MgZGVuaWVkJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQQVRDSCAvYXBpL3YxL2Jvb2tpbmdzLzppZC9zdGF0dXMnLCAoKSA9PiB7XG4gICAgbGV0IGJvb2tpbmc7XG5cbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIGJvb2tpbmcgPSBhd2FpdCBjcmVhdGVUZXN0Qm9va2luZyh7IHVzZXJJZDogdXNlci5faWQsIGRlc3RpbmF0aW9uSWQ6IGRlc3RpbmF0aW9uLl9pZCB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdXBkYXRlIGJvb2tpbmcgc3RhdHVzIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wYXRjaChgL2FwaS92MS9ib29raW5ncy8ke2Jvb2tpbmcuX2lkfS9zdGF0dXNgKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2FkbWluVG9rZW59YClcbiAgICAgICAgLnNlbmQoeyBzdGF0dXM6ICdjb25maXJtZWQnIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0U3VjY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlLCAyMDAsICdCb29raW5nIHN0YXR1cyB1cGRhdGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5ib29raW5nLnN0YXR1cykudG9CZSgnY29uZmlybWVkJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZhaWwgd2l0aCBpbnZhbGlkIHN0YXR1cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wYXRjaChgL2FwaS92MS9ib29raW5ncy8ke2Jvb2tpbmcuX2lkfS9zdGF0dXNgKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2FkbWluVG9rZW59YClcbiAgICAgICAgLnNlbmQoeyBzdGF0dXM6ICdpbnZhbGlkX3N0YXR1cycgfSlcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdGF0dXMpLnRvQmUoJ2ZhaWwnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1lc3NhZ2UpLnRvQ29udGFpbignSW52YWxpZCBib29raW5nIHN0YXR1cycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBmYWlsIGZvciBub24tYWRtaW4gdXNlcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucGF0Y2goYC9hcGkvdjEvYm9va2luZ3MvJHtib29raW5nLl9pZH0vc3RhdHVzYClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgICAuc2VuZCh7IHN0YXR1czogJ2NvbmZpcm1lZCcgfSlcbiAgICAgICAgLmV4cGVjdCg0MDMpO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdGF0dXMpLnRvQmUoJ2ZhaWwnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1lc3NhZ2UpLnRvQ29udGFpbignQWNjZXNzIGRlbmllZCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnR0VUIC9hcGkvdjEvYm9va2luZ3MvYXZhaWxhYmlsaXR5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY2hlY2sgYXZhaWxhYmlsaXR5IHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGVzID0gZ2VuZXJhdGVGdXR1cmVEYXRlcygpO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmdldChgL2FwaS92MS9ib29raW5ncy9hdmFpbGFiaWxpdHk/ZGVzdGluYXRpb25JZD0ke2Rlc3RpbmF0aW9uLl9pZH0mY2hlY2tJbkRhdGU9JHtkYXRlcy5jaGVja0luRGF0ZX0mY2hlY2tPdXREYXRlPSR7ZGF0ZXMuY2hlY2tPdXREYXRlfWApXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0U3VjY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlLCAyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG9IYXZlUHJvcGVydHkoJ2F2YWlsYWJsZScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG9IYXZlUHJvcGVydHkoJ2NoZWNrSW5EYXRlJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhKS50b0hhdmVQcm9wZXJ0eSgnY2hlY2tPdXREYXRlJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZhaWwgd2l0aCBtaXNzaW5nIHBhcmFtZXRlcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZ2V0KCcvYXBpL3YxL2Jvb2tpbmdzL2F2YWlsYWJpbGl0eScpXG4gICAgICAgIC5leHBlY3QoNDAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3RhdHVzKS50b0JlKCdmYWlsJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5tZXNzYWdlKS50b0NvbnRhaW4oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVycycpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBbUJBO0FBQ0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLE9BQU87RUFDbkRDLHFDQUFxQyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQUM7RUFDcEVDLHFDQUFxQyxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDO0FBQ3JFLENBQUMsQ0FBQyxDQUFDO0FBQUMsU0FBQUwsWUFBQTtFQUFBO0lBQUFHO0VBQUEsSUFBQUksT0FBQTtFQUFBUCxXQUFBLEdBQUFBLENBQUEsS0FBQUcsSUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQXZCSixNQUFNSyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDcEMsTUFBTUUsR0FBRyxHQUFHRixPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ2pDLE1BQU07RUFDSkcsb0JBQW9CO0VBQ3BCQyxzQkFBc0I7RUFDdEJDLGFBQWE7RUFDYkMsY0FBYztFQUNkQyxlQUFlO0VBQ2ZDLHFCQUFxQjtFQUNyQkMsaUJBQWlCO0VBQ2pCQyxpQkFBaUI7RUFDakJDLG1CQUFtQjtFQUNuQkMscUJBQXFCO0VBQ3JCQyxlQUFlO0VBQ2ZDLHFCQUFxQjtFQUNyQkMsbUJBQW1CO0VBQ25CQztBQUNGLENBQUMsR0FBR2hCLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFRdEJpQixRQUFRLENBQUMsYUFBYSxFQUFFLE1BQU07RUFDNUIsSUFBSUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLFdBQVcsRUFBRUMsS0FB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