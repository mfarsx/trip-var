{"version":3,"names":["body","param","query","require","ValidationError","emailRule","isEmail","withMessage","normalizeEmail","toLowerCase","passwordRule","isLength","min","matches","nameRule","trim","max","dateOfBirthRule","optional","isISO8601","custom","value","birthDate","Date","today","age","getFullYear","monthDiff","getMonth","actualAge","getDate","Error","nationalityRule","currentPasswordRule","notEmpty","newPasswordRule","destinationIdRule","isMongoId","registerSchema","loginSchema","updateProfileSchema","not","exists","updatePasswordSchema","req","newPassword","toggleFavoriteSchema","paginationSchema","isInt","validateRequest","res","next","errors","validationErrors","push","length","errorMessages","map","error","msg","errorDetails","field","message","join","sanitizeInput","sanitizeString","str","replace","Object","keys","forEach","key","module","exports"],"sources":["auth.validation.js"],"sourcesContent":["const { body, param, query } = require('express-validator');\nconst { ValidationError } = require('../utils/errors');\n\n// Common validation rules\nconst emailRule = body('email')\n  .isEmail()\n  .withMessage('Please provide a valid email address')\n  .normalizeEmail()\n  .toLowerCase();\n\nconst passwordRule = body('password')\n  .isLength({ min: 6 })\n  .withMessage('Password must be at least 6 characters long')\n  .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/)\n  .withMessage('Password must contain at least one lowercase letter, one uppercase letter, and one number');\n\nconst nameRule = body('name')\n  .trim()\n  .isLength({ min: 2, max: 50 })\n  .withMessage('Name must be between 2 and 50 characters')\n  .matches(/^[a-zA-Z\\s]+$/)\n  .withMessage('Name can only contain letters and spaces');\n\nconst dateOfBirthRule = body('dateOfBirth')\n  .optional()\n  .isISO8601()\n  .withMessage('Date of birth must be a valid date')\n  .custom((value) => {\n    if (value) {\n      const birthDate = new Date(value);\n      const today = new Date();\n      const age = today.getFullYear() - birthDate.getFullYear();\n      const monthDiff = today.getMonth() - birthDate.getMonth();\n\n      const actualAge = monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())\n        ? age - 1\n        : age;\n\n      if (actualAge < 20) {\n        throw new Error('User must be at least 20 years old');\n      }\n    }\n    return true;\n  });\n\nconst nationalityRule = body('nationality')\n  .optional()\n  .trim()\n  .isLength({ min: 2, max: 50 })\n  .withMessage('Nationality must be between 2 and 50 characters');\n\nconst currentPasswordRule = body('currentPassword')\n  .notEmpty()\n  .withMessage('Current password is required');\n\nconst newPasswordRule = body('newPassword')\n  .isLength({ min: 6 })\n  .withMessage('New password must be at least 6 characters long')\n  .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/)\n  .withMessage('New password must contain at least one lowercase letter, one uppercase letter, and one number');\n\nconst destinationIdRule = param('destinationId')\n  .isMongoId()\n  .withMessage('Invalid destination ID format');\n\n// Validation schemas\nconst registerSchema = [\n  emailRule,\n  passwordRule,\n  nameRule,\n  dateOfBirthRule,\n  nationalityRule\n];\n\nconst loginSchema = [\n  emailRule,\n  body('password')\n    .notEmpty()\n    .withMessage('Password is required')\n];\n\nconst updateProfileSchema = [\n  body('name')\n    .optional()\n    .trim()\n    .isLength({ min: 2, max: 50 })\n    .withMessage('Name must be between 2 and 50 characters')\n    .matches(/^[a-zA-Z\\s]+$/)\n    .withMessage('Name can only contain letters and spaces'),\n  body('email')\n    .optional()\n    .isEmail()\n    .withMessage('Please provide a valid email address')\n    .normalizeEmail()\n    .toLowerCase(),\n  dateOfBirthRule,\n  nationalityRule,\n  body('password')\n    .not()\n    .exists()\n    .withMessage('Password updates are not allowed in this route')\n];\n\nconst updatePasswordSchema = [\n  currentPasswordRule,\n  newPasswordRule,\n  body('confirmPassword')\n    .custom((value, { req }) => {\n      if (value !== req.body.newPassword) {\n        throw new Error('Password confirmation does not match new password');\n      }\n      return true;\n    })\n];\n\nconst toggleFavoriteSchema = [\n  destinationIdRule\n];\n\nconst paginationSchema = [\n  query('page')\n    .optional()\n    .isInt({ min: 1 })\n    .withMessage('Page must be a positive integer'),\n  query('limit')\n    .optional()\n    .isInt({ min: 1, max: 100 })\n    .withMessage('Limit must be between 1 and 100')\n];\n\n// Custom validation middleware\nconst validateRequest = (req, res, next) => {\n  const errors = [];\n\n  // Check for validation errors\n  if (req.validationErrors) {\n    errors.push(...req.validationErrors);\n  }\n\n  if (errors.length > 0) {\n    const errorMessages = errors.map(error => error.msg);\n    const errorDetails = errors.map(error => ({\n      field: error.param,\n      message: error.msg,\n      value: error.value\n    }));\n\n    throw new ValidationError(\n      `Validation failed: ${errorMessages.join(', ')}`,\n      errorDetails\n    );\n  }\n\n  next();\n};\n\n// Sanitization middleware\nconst sanitizeInput = (req, res, next) => {\n  // Remove any potential XSS attempts\n  const sanitizeString = (str) => {\n    if (typeof str !== 'string') {\n      return str;\n    }\n    return str\n      .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n      .replace(/javascript:/gi, '')\n      .replace(/on\\w+\\s*=/gi, '')\n      .trim();\n  };\n\n  // Sanitize body\n  if (req.body) {\n    Object.keys(req.body).forEach(key => {\n      if (typeof req.body[key] === 'string') {\n        req.body[key] = sanitizeString(req.body[key]);\n      }\n    });\n  }\n\n  // Sanitize query parameters\n  if (req.query) {\n    Object.keys(req.query).forEach(key => {\n      if (typeof req.query[key] === 'string') {\n        req.query[key] = sanitizeString(req.query[key]);\n      }\n    });\n  }\n\n  next();\n};\n\nmodule.exports = {\n  registerSchema,\n  loginSchema,\n  updateProfileSchema,\n  updatePasswordSchema,\n  toggleFavoriteSchema,\n  paginationSchema,\n  validateRequest,\n  sanitizeInput\n};"],"mappings":"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","ignoreList":[]}