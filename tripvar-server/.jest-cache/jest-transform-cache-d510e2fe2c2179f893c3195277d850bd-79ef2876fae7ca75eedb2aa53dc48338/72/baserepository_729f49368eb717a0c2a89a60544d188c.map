{"version":3,"names":["NotFoundError","ValidationError","require","BaseRepository","constructor","model","create","data","document","error","handleDatabaseError","findById","id","options","select","populate","lean","query","Array","isArray","forEach","pop","findOne","criteria","find","sort","createdAt","limit","skip","documents","findWithPagination","page","total","Promise","all","count","pagination","parseInt","pages","Math","ceil","hasNext","hasPrev","updateById","new","returnNew","runValidators","findByIdAndUpdate","modelName","updateOne","findOneAndUpdate","updateMany","result","deleteById","findByIdAndDelete","deleteOne","findOneAndDelete","deleteMany","countDocuments","exists","aggregate","pipeline","results","name","path","value","errors","Object","values","map","el","field","message","e","join","code","keys","keyValue","module","exports"],"sources":["base.repository.js"],"sourcesContent":["const { NotFoundError, ValidationError } = require('../utils/errors');\n\n/**\n * Base repository class with common database operations\n */\nclass BaseRepository {\n  constructor(model) {\n    this.model = model;\n  }\n\n  /**\n   * Create a new document\n   * @param {Object} data - Document data\n   * @returns {Promise<Object>} Created document\n   */\n  async create(data) {\n    try {\n      const document = await this.model.create(data);\n      return document;\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Find document by ID\n   * @param {string} id - Document ID\n   * @param {Object} options - Query options\n   * @returns {Promise<Object|null>} Found document\n   */\n  async findById(id, options = {}) {\n    try {\n      const { select, populate, lean = false } = options;\n      let query = this.model.findById(id);\n\n      if (select) {\n        query = query.select(select);\n      }\n\n      if (populate) {\n        if (Array.isArray(populate)) {\n          populate.forEach(pop => query = query.populate(pop));\n        } else {\n          query = query.populate(populate);\n        }\n      }\n\n      if (lean) {\n        query = query.lean();\n      }\n\n      const document = await query;\n      return document;\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Find one document by criteria\n   * @param {Object} criteria - Search criteria\n   * @param {Object} options - Query options\n   * @returns {Promise<Object|null>} Found document\n   */\n  async findOne(criteria, options = {}) {\n    try {\n      const { select, populate, lean = false } = options;\n      let query = this.model.findOne(criteria);\n\n      if (select) {\n        query = query.select(select);\n      }\n\n      if (populate) {\n        if (Array.isArray(populate)) {\n          populate.forEach(pop => query = query.populate(pop));\n        } else {\n          query = query.populate(populate);\n        }\n      }\n\n      if (lean) {\n        query = query.lean();\n      }\n\n      const document = await query;\n      return document;\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Find multiple documents\n   * @param {Object} criteria - Search criteria\n   * @param {Object} options - Query options\n   * @returns {Promise<Array>} Found documents\n   */\n  async find(criteria = {}, options = {}) {\n    try {\n      const {\n        select,\n        populate,\n        lean = false,\n        sort = { createdAt: -1 },\n        limit,\n        skip\n      } = options;\n\n      let query = this.model.find(criteria);\n\n      if (select) {\n        query = query.select(select);\n      }\n\n      if (populate) {\n        if (Array.isArray(populate)) {\n          populate.forEach(pop => query = query.populate(pop));\n        } else {\n          query = query.populate(populate);\n        }\n      }\n\n      if (sort) {\n        query = query.sort(sort);\n      }\n\n      if (skip) {\n        query = query.skip(skip);\n      }\n\n      if (limit) {\n        query = query.limit(limit);\n      }\n\n      if (lean) {\n        query = query.lean();\n      }\n\n      const documents = await query;\n      return documents;\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Find documents with pagination\n   * @param {Object} criteria - Search criteria\n   * @param {Object} options - Query options\n   * @returns {Promise<Object>} Paginated results\n   */\n  async findWithPagination(criteria = {}, options = {}) {\n    try {\n      const {\n        page = 1,\n        limit = 10,\n        select,\n        populate,\n        lean = false,\n        sort = { createdAt: -1 }\n      } = options;\n\n      const skip = (page - 1) * limit;\n\n      const [documents, total] = await Promise.all([\n        this.find(criteria, { select, populate, lean, sort, limit, skip }),\n        this.count(criteria)\n      ]);\n\n      return {\n        data: documents,\n        pagination: {\n          page: parseInt(page),\n          limit: parseInt(limit, 10),\n          total,\n          pages: Math.ceil(total / limit),\n          hasNext: page * limit < total,\n          hasPrev: page > 1\n        }\n      };\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Update document by ID\n   * @param {string} id - Document ID\n   * @param {Object} data - Update data\n   * @param {Object} options - Update options\n   * @returns {Promise<Object|null>} Updated document\n   */\n  async updateById(id, data, options = {}) {\n    try {\n      const {\n        new: returnNew = true,\n        runValidators = true,\n        select,\n        populate\n      } = options;\n\n      let query = this.model.findByIdAndUpdate(id, data, {\n        new: returnNew,\n        runValidators\n      });\n\n      if (select) {\n        query = query.select(select);\n      }\n\n      if (populate) {\n        if (Array.isArray(populate)) {\n          populate.forEach(pop => query = query.populate(pop));\n        } else {\n          query = query.populate(populate);\n        }\n      }\n\n      const document = await query;\n\n      if (!document) {\n        throw new NotFoundError(`${this.model.modelName} not found`);\n      }\n\n      return document;\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Update one document by criteria\n   * @param {Object} criteria - Search criteria\n   * @param {Object} data - Update data\n   * @param {Object} options - Update options\n   * @returns {Promise<Object|null>} Updated document\n   */\n  async updateOne(criteria, data, options = {}) {\n    try {\n      const {\n        new: returnNew = true,\n        runValidators = true,\n        select,\n        populate\n      } = options;\n\n      let query = this.model.findOneAndUpdate(criteria, data, {\n        new: returnNew,\n        runValidators\n      });\n\n      if (select) {\n        query = query.select(select);\n      }\n\n      if (populate) {\n        if (Array.isArray(populate)) {\n          populate.forEach(pop => query = query.populate(pop));\n        } else {\n          query = query.populate(populate);\n        }\n      }\n\n      const document = await query;\n      return document;\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Update multiple documents\n   * @param {Object} criteria - Search criteria\n   * @param {Object} data - Update data\n   * @param {Object} options - Update options\n   * @returns {Promise<Object>} Update result\n   */\n  async updateMany(criteria, data, options = {}) {\n    try {\n      const { runValidators = true } = options;\n\n      const result = await this.model.updateMany(criteria, data, {\n        runValidators\n      });\n\n      return result;\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Delete document by ID\n   * @param {string} id - Document ID\n   * @param {Object} options - Delete options\n   * @returns {Promise<Object|null>} Deleted document\n   */\n  async deleteById(id, options = {}) {\n    try {\n      const { select, populate } = options;\n\n      let query = this.model.findByIdAndDelete(id);\n\n      if (select) {\n        query = query.select(select);\n      }\n\n      if (populate) {\n        if (Array.isArray(populate)) {\n          populate.forEach(pop => query = query.populate(pop));\n        } else {\n          query = query.populate(populate);\n        }\n      }\n\n      const document = await query;\n\n      if (!document) {\n        throw new NotFoundError(`${this.model.modelName} not found`);\n      }\n\n      return document;\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Delete one document by criteria\n   * @param {Object} criteria - Search criteria\n   * @param {Object} options - Delete options\n   * @returns {Promise<Object|null>} Deleted document\n   */\n  async deleteOne(criteria, options = {}) {\n    try {\n      const { select, populate } = options;\n\n      let query = this.model.findOneAndDelete(criteria);\n\n      if (select) {\n        query = query.select(select);\n      }\n\n      if (populate) {\n        if (Array.isArray(populate)) {\n          populate.forEach(pop => query = query.populate(pop));\n        } else {\n          query = query.populate(populate);\n        }\n      }\n\n      const document = await query;\n      return document;\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Delete multiple documents\n   * @param {Object} criteria - Search criteria\n   * @returns {Promise<Object>} Delete result\n   */\n  async deleteMany(criteria) {\n    try {\n      const result = await this.model.deleteMany(criteria);\n      return result;\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Count documents\n   * @param {Object} criteria - Search criteria\n   * @returns {Promise<number>} Document count\n   */\n  async count(criteria = {}) {\n    try {\n      const count = await this.model.countDocuments(criteria);\n      return count;\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Check if document exists\n   * @param {Object} criteria - Search criteria\n   * @returns {Promise<boolean>} Existence status\n   */\n  async exists(criteria) {\n    try {\n      const count = await this.model.countDocuments(criteria);\n      return count > 0;\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Aggregate documents\n   * @param {Array} pipeline - Aggregation pipeline\n   * @returns {Promise<Array>} Aggregation results\n   */\n  async aggregate(pipeline) {\n    try {\n      const results = await this.model.aggregate(pipeline);\n      return results;\n    } catch (error) {\n      this.handleDatabaseError(error);\n    }\n  }\n\n  /**\n   * Handle database errors\n   * @param {Error} error - Database error\n   * @throws {Error} Appropriate error type\n   */\n  handleDatabaseError(error) {\n    if (error.name === 'CastError') {\n      throw new ValidationError(`Invalid ${error.path}: ${error.value}`);\n    }\n\n    if (error.name === 'ValidationError') {\n      const errors = Object.values(error.errors).map(el => ({\n        field: el.path,\n        message: el.message,\n        value: el.value\n      }));\n      throw new ValidationError(\n        `Validation failed: ${errors.map(e => e.message).join(', ')}`,\n        errors\n      );\n    }\n\n    if (error.code === 11000) {\n      const field = Object.keys(error.keyValue)[0];\n      const value = error.keyValue[field];\n      throw new ValidationError(`${field} '${value}' already exists`);\n    }\n\n    // Re-throw other errors\n    throw error;\n  }\n}\n\nmodule.exports = BaseRepository;"],"mappings":"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","ignoreList":[]}