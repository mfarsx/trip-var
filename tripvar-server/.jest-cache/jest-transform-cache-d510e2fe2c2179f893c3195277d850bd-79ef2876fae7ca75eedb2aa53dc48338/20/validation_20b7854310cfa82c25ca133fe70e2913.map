{"version":3,"names":["validationResult","require","ValidationError","validate","validations","req","res","next","Promise","all","map","validation","run","errors","isEmpty","errorMessages","array","error","msg","errorDetails","field","param","message","value","location","validationError","join","err","sanitize","options","removeHtml","removeScripts","trimStrings","allowedTags","maxLength","sanitizeString","str","sanitized","trim","replace","length","substring","body","Object","keys","forEach","key","Array","isArray","item","query","params","rateLimitValidation","windowMs","max","skipSuccessfulRequests","skipFailedRequests","requests","Map","ip","connection","remoteAddress","now","Date","windowStart","has","userRequests","get","filter","timestamp","set","status","json","retryAfter","Math","ceil","push","fileValidation","maxSize","allowedTypes","maxFiles","files","file","size","name","includes","mimetype","validateObjectId","paramName","id","test","validatePagination","page","parseInt","limit","pagination","skip","module","exports"],"sources":["validation.js"],"sourcesContent":["const { validationResult } = require('express-validator');\nconst { ValidationError } = require('../utils/errors');\n\n/**\n * Validation middleware factory\n * @param {Array} validations - Array of validation rules\n * @returns {Function} Express middleware function\n */\nconst validate = (validations) => {\n  return async(req, res, next) => {\n    try {\n      // Run all validations\n      await Promise.all(validations.map(validation => validation.run(req)));\n\n      // Check for validation errors\n      const errors = validationResult(req);\n\n      if (!errors.isEmpty()) {\n        const errorMessages = errors.array().map(error => error.msg);\n        const errorDetails = errors.array().map(error => ({\n          field: error.param,\n          message: error.msg,\n          value: error.value,\n          location: error.location\n        }));\n\n        const validationError = new ValidationError(\n          `Validation failed: ${errorMessages.join(', ')}`,\n          errorDetails\n        );\n\n        return next(validationError);\n      }\n\n      next();\n    } catch (err) {\n      next(err);\n    }\n  };\n};\n\n/**\n * Sanitization middleware\n * @param {Object} options - Sanitization options\n * @returns {Function} Express middleware function\n */\nconst sanitize = (options = {}) => {\n  const {\n    removeHtml = true,\n    removeScripts = true,\n    trimStrings = true,\n    allowedTags = [],\n    maxLength = 1000\n  } = options;\n\n  return (req, res, next) => {\n    const sanitizeString = (str) => {\n      if (typeof str !== 'string') {\n        return str;\n      }\n\n      let sanitized = str;\n\n      // Trim whitespace\n      if (trimStrings) {\n        sanitized = sanitized.trim();\n      }\n\n      // Remove HTML tags\n      if (removeHtml) {\n        sanitized = sanitized.replace(/<[^>]*>/g, '');\n      }\n\n      // Remove script tags and javascript: protocols\n      if (removeScripts) {\n        sanitized = sanitized\n          .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n          .replace(/javascript:/gi, '')\n          .replace(/on\\w+\\s*=/gi, '');\n      }\n\n      // Limit length\n      if (sanitized.length > maxLength) {\n        sanitized = sanitized.substring(0, maxLength);\n      }\n\n      return sanitized;\n    };\n\n    // Sanitize request body\n    if (req.body) {\n      Object.keys(req.body).forEach(key => {\n        if (typeof req.body[key] === 'string') {\n          req.body[key] = sanitizeString(req.body[key]);\n        } else if (Array.isArray(req.body[key])) {\n          req.body[key] = req.body[key].map(item =>\n            typeof item === 'string' ? sanitizeString(item) : item\n          );\n        }\n      });\n    }\n\n    // Sanitize query parameters\n    if (req.query) {\n      Object.keys(req.query).forEach(key => {\n        if (typeof req.query[key] === 'string') {\n          req.query[key] = sanitizeString(req.query[key]);\n        }\n      });\n    }\n\n    // Sanitize URL parameters\n    if (req.params) {\n      Object.keys(req.params).forEach(key => {\n        if (typeof req.params[key] === 'string') {\n          req.params[key] = sanitizeString(req.params[key]);\n        }\n      });\n    }\n\n    next();\n  };\n};\n\n/**\n * Rate limiting validation\n * @param {Object} options - Rate limiting options\n * @returns {Function} Express middleware function\n */\nconst rateLimitValidation = (options = {}) => {\n  const {\n    windowMs = 15 * 60 * 1000, // 15 minutes\n    max = 100, // limit each IP to 100 requests per windowMs\n    message = 'Too many requests from this IP, please try again later.',\n    skipSuccessfulRequests = false,\n    skipFailedRequests = false\n  } = options;\n\n  const requests = new Map();\n\n  return (req, res, next) => {\n    const key = req.ip || req.connection.remoteAddress;\n    const now = Date.now();\n    const windowStart = now - windowMs;\n\n    // Clean up old entries\n    if (requests.has(key)) {\n      const userRequests = requests.get(key).filter(timestamp => timestamp > windowStart);\n      requests.set(key, userRequests);\n    } else {\n      requests.set(key, []);\n    }\n\n    const userRequests = requests.get(key);\n\n    // Check if limit exceeded\n    if (userRequests.length >= max) {\n      return res.status(429).json({\n        status: 'error',\n        message,\n        retryAfter: Math.ceil(windowMs / 1000)\n      });\n    }\n\n    // Add current request\n    userRequests.push(now);\n    requests.set(key, userRequests);\n\n    next();\n  };\n};\n\n/**\n * File upload validation\n * @param {Object} options - File validation options\n * @returns {Function} Express middleware function\n */\nconst fileValidation = (options = {}) => {\n  const {\n    maxSize = 5 * 1024 * 1024, // 5MB\n    allowedTypes = ['image/jpeg', 'image/png', 'image/gif'],\n    maxFiles = 1\n  } = options;\n\n  return (req, res, next) => {\n    try {\n      if (!req.files || req.files.length === 0) {\n        return next();\n      }\n\n      const files = Array.isArray(req.files) ? req.files : [req.files];\n\n      // Check number of files\n      if (files.length > maxFiles) {\n        const error = new ValidationError(`Maximum ${maxFiles} file(s) allowed`);\n        return next(error);\n      }\n\n      // Validate each file\n      for (const file of files) {\n        // Check file size\n        if (file.size > maxSize) {\n          const error = new ValidationError(`File ${file.name} is too large. Maximum size is ${maxSize / 1024 / 1024}MB`);\n          return next(error);\n        }\n\n        // Check file type\n        if (!allowedTypes.includes(file.mimetype)) {\n          const error = new ValidationError(`File type ${file.mimetype} is not allowed. Allowed types: ${allowedTypes.join(', ')}`);\n          return next(error);\n        }\n      }\n\n      next();\n    } catch (err) {\n      next(err);\n    }\n  };\n};\n\n/**\n * MongoDB ObjectId validation\n * @param {string} paramName - Parameter name to validate\n * @returns {Function} Express middleware function\n */\nconst validateObjectId = (paramName) => {\n  return (req, res, next) => {\n    try {\n      const id = req.params[paramName];\n\n      if (!id || !/^[0-9a-fA-F]{24}$/.test(id)) {\n        const error = new ValidationError(`Invalid ${paramName} format`);\n        return next(error);\n      }\n\n      next();\n    } catch (err) {\n      next(err);\n    }\n  };\n};\n\n/**\n * Pagination validation\n * @returns {Function} Express middleware function\n */\nconst validatePagination = () => {\n  return (req, res, next) => {\n    try {\n      const page = parseInt(req.query.page, 10) || 1;\n      const limit = parseInt(req.query.limit, 10) || 10;\n\n      if (page < 1) {\n        const error = new ValidationError('Page must be a positive integer');\n        return next(error);\n      }\n\n      if (limit < 1 || limit > 100) {\n        const error = new ValidationError('Limit must be between 1 and 100');\n        return next(error);\n      }\n\n      req.pagination = {\n        page,\n        limit,\n        skip: (page - 1) * limit\n      };\n\n      next();\n    } catch (err) {\n      next(err);\n    }\n  };\n};\n\nmodule.exports = {\n  validate,\n  sanitize,\n  rateLimitValidation,\n  fileValidation,\n  validateObjectId,\n  validatePagination\n};"],"mappings":"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","ignoreList":[]}