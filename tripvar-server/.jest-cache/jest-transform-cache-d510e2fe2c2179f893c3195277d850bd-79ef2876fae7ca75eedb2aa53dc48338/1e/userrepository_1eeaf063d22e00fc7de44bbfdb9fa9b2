44a816ec7bcf6d3ae5cd705e2027a316
/* istanbul ignore next */
function cov_gjmscygas() {
  var path = "/Users/mfarsx/dev/tripvar/tripvar-server/src/repositories/user.repository.js";
  var hash = "4464f1fc47e57a8688863317d33991c0cc79fb3f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/mfarsx/dev/tripvar/tripvar-server/src/repositories/user.repository.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 23
        },
        end: {
          line: 1,
          column: 51
        }
      },
      "1": {
        start: {
          line: 2,
          column: 13
        },
        end: {
          line: 2,
          column: 51
        }
      },
      "2": {
        start: {
          line: 3,
          column: 43
        },
        end: {
          line: 3,
          column: 69
        }
      },
      "3": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 16
        }
      },
      "4": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 65
        }
      },
      "5": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 29,
          column: 6
        }
      },
      "6": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 61
        }
      },
      "7": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 75
        }
      },
      "8": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 62,
          column: 7
        }
      },
      "9": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 74,
          column: 7
        }
      },
      "10": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 86,
          column: 7
        }
      },
      "11": {
        start: {
          line: 96,
          column: 17
        },
        end: {
          line: 96,
          column: 44
        }
      },
      "12": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 100,
          column: 5
        }
      },
      "13": {
        start: {
          line: 99,
          column: 6
        },
        end: {
          line: 99,
          column: 48
        }
      },
      "14": {
        start: {
          line: 102,
          column: 23
        },
        end: {
          line: 102,
          column: 61
        }
      },
      "15": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "16": {
        start: {
          line: 105,
          column: 6
        },
        end: {
          line: 105,
          column: 55
        }
      },
      "17": {
        start: {
          line: 107,
          column: 6
        },
        end: {
          line: 107,
          column: 52
        }
      },
      "18": {
        start: {
          line: 111,
          column: 24
        },
        end: {
          line: 111,
          column: 51
        }
      },
      "19": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 116,
          column: 6
        }
      },
      "20": {
        start: {
          line: 125,
          column: 17
        },
        end: {
          line: 128,
          column: 6
        }
      },
      "21": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 132,
          column: 5
        }
      },
      "22": {
        start: {
          line: 131,
          column: 6
        },
        end: {
          line: 131,
          column: 48
        }
      },
      "23": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 134,
          column: 26
        }
      },
      "24": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 143,
          column: 54
        }
      },
      "25": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 152,
          column: 53
        }
      },
      "26": {
        start: {
          line: 160,
          column: 21
        },
        end: {
          line: 176,
          column: 5
        }
      },
      "27": {
        start: {
          line: 178,
          column: 19
        },
        end: {
          line: 178,
          column: 49
        }
      },
      "28": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 184,
          column: 6
        }
      },
      "29": {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 194,
          column: 40
        }
      },
      "30": {
        start: {
          line: 204,
          column: 25
        },
        end: {
          line: 204,
          column: 42
        }
      },
      "31": {
        start: {
          line: 206,
          column: 4
        },
        end: {
          line: 208,
          column: 5
        }
      },
      "32": {
        start: {
          line: 207,
          column: 6
        },
        end: {
          line: 207,
          column: 91
        }
      },
      "33": {
        start: {
          line: 210,
          column: 4
        },
        end: {
          line: 210,
          column: 45
        }
      },
      "34": {
        start: {
          line: 220,
          column: 27
        },
        end: {
          line: 225,
          column: 5
        }
      },
      "35": {
        start: {
          line: 227,
          column: 4
        },
        end: {
          line: 227,
          column: 46
        }
      },
      "36": {
        start: {
          line: 238,
          column: 21
        },
        end: {
          line: 243,
          column: 5
        }
      },
      "37": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 245,
          column: 40
        }
      },
      "38": {
        start: {
          line: 254,
          column: 21
        },
        end: {
          line: 274,
          column: 5
        }
      },
      "39": {
        start: {
          line: 276,
          column: 4
        },
        end: {
          line: 276,
          column: 36
        }
      },
      "40": {
        start: {
          line: 280,
          column: 0
        },
        end: {
          line: 280,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 2
          },
          end: {
            line: 6,
            column: 3
          }
        },
        loc: {
          start: {
            line: 6,
            column: 16
          },
          end: {
            line: 8,
            column: 3
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 2
          },
          end: {
            line: 16,
            column: 3
          }
        },
        loc: {
          start: {
            line: 16,
            column: 41
          },
          end: {
            line: 18,
            column: 3
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        },
        loc: {
          start: {
            line: 25,
            column: 39
          },
          end: {
            line: 30,
            column: 3
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        },
        loc: {
          start: {
            line: 38,
            column: 48
          },
          end: {
            line: 40,
            column: 3
          }
        },
        line: 38
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 48,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        },
        loc: {
          start: {
            line: 48,
            column: 62
          },
          end: {
            line: 50,
            column: 3
          }
        },
        line: 48
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 58,
            column: 2
          },
          end: {
            line: 58,
            column: 3
          }
        },
        loc: {
          start: {
            line: 58,
            column: 44
          },
          end: {
            line: 63,
            column: 3
          }
        },
        line: 58
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 71,
            column: 2
          },
          end: {
            line: 71,
            column: 3
          }
        },
        loc: {
          start: {
            line: 71,
            column: 43
          },
          end: {
            line: 75,
            column: 3
          }
        },
        line: 71
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 83,
            column: 2
          },
          end: {
            line: 83,
            column: 3
          }
        },
        loc: {
          start: {
            line: 83,
            column: 46
          },
          end: {
            line: 87,
            column: 3
          }
        },
        line: 83
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 95,
            column: 2
          },
          end: {
            line: 95,
            column: 3
          }
        },
        loc: {
          start: {
            line: 95,
            column: 46
          },
          end: {
            line: 117,
            column: 3
          }
        },
        line: 95
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 124,
            column: 2
          },
          end: {
            line: 124,
            column: 3
          }
        },
        loc: {
          start: {
            line: 124,
            column: 29
          },
          end: {
            line: 135,
            column: 3
          }
        },
        line: 124
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 142,
            column: 2
          },
          end: {
            line: 142,
            column: 3
          }
        },
        loc: {
          start: {
            line: 142,
            column: 27
          },
          end: {
            line: 144,
            column: 3
          }
        },
        line: 142
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 151,
            column: 2
          },
          end: {
            line: 151,
            column: 3
          }
        },
        loc: {
          start: {
            line: 151,
            column: 24
          },
          end: {
            line: 153,
            column: 3
          }
        },
        line: 151
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 159,
            column: 2
          },
          end: {
            line: 159,
            column: 3
          }
        },
        loc: {
          start: {
            line: 159,
            column: 24
          },
          end: {
            line: 185,
            column: 3
          }
        },
        line: 159
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 193,
            column: 2
          },
          end: {
            line: 193,
            column: 3
          }
        },
        loc: {
          start: {
            line: 193,
            column: 39
          },
          end: {
            line: 195,
            column: 3
          }
        },
        line: 193
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 203,
            column: 2
          },
          end: {
            line: 203,
            column: 3
          }
        },
        loc: {
          start: {
            line: 203,
            column: 33
          },
          end: {
            line: 211,
            column: 3
          }
        },
        line: 203
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 219,
            column: 2
          },
          end: {
            line: 219,
            column: 3
          }
        },
        loc: {
          start: {
            line: 219,
            column: 41
          },
          end: {
            line: 228,
            column: 3
          }
        },
        line: 219
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 237,
            column: 2
          },
          end: {
            line: 237,
            column: 3
          }
        },
        loc: {
          start: {
            line: 237,
            column: 58
          },
          end: {
            line: 246,
            column: 3
          }
        },
        line: 237
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 253,
            column: 2
          },
          end: {
            line: 253,
            column: 3
          }
        },
        loc: {
          start: {
            line: 253,
            column: 43
          },
          end: {
            line: 277,
            column: 3
          }
        },
        line: 253
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 27
          },
          end: {
            line: 16,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 16,
            column: 37
          },
          end: {
            line: 16,
            column: 39
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 19
          },
          end: {
            line: 38,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 38,
            column: 30
          },
          end: {
            line: 38,
            column: 32
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 34
          },
          end: {
            line: 38,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 38,
            column: 44
          },
          end: {
            line: 38,
            column: 46
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 33
          },
          end: {
            line: 48,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 48,
            column: 44
          },
          end: {
            line: 48,
            column: 46
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 48,
            column: 48
          },
          end: {
            line: 48,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 48,
            column: 58
          },
          end: {
            line: 48,
            column: 60
          }
        }],
        line: 48
      },
      "5": {
        loc: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "6": {
        loc: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        }, {
          start: {
            line: 106,
            column: 11
          },
          end: {
            line: 108,
            column: 5
          }
        }],
        line: 104
      },
      "7": {
        loc: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "8": {
        loc: {
          start: {
            line: 179,
            column: 11
          },
          end: {
            line: 184,
            column: 5
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 11
          },
          end: {
            line: 179,
            column: 20
          }
        }, {
          start: {
            line: 179,
            column: 24
          },
          end: {
            line: 184,
            column: 5
          }
        }],
        line: 179
      },
      "9": {
        loc: {
          start: {
            line: 193,
            column: 25
          },
          end: {
            line: 193,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 193,
            column: 35
          },
          end: {
            line: 193,
            column: 37
          }
        }],
        line: 193
      },
      "10": {
        loc: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "11": {
        loc: {
          start: {
            line: 219,
            column: 27
          },
          end: {
            line: 219,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 219,
            column: 37
          },
          end: {
            line: 219,
            column: 39
          }
        }],
        line: 219
      },
      "12": {
        loc: {
          start: {
            line: 237,
            column: 44
          },
          end: {
            line: 237,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 237,
            column: 54
          },
          end: {
            line: 237,
            column: 56
          }
        }],
        line: 237
      },
      "13": {
        loc: {
          start: {
            line: 253,
            column: 31
          },
          end: {
            line: 253,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 253,
            column: 39
          },
          end: {
            line: 253,
            column: 41
          }
        }],
        line: 253
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0],
      "12": [0],
      "13": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4464f1fc47e57a8688863317d33991c0cc79fb3f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_gjmscygas = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_gjmscygas();
const BaseRepository =
/* istanbul ignore next */
(cov_gjmscygas().s[0]++, require('./base.repository'));
const User =
/* istanbul ignore next */
(cov_gjmscygas().s[1]++, require('../public/models/user.model'));
const {
  NotFoundError,
  ValidationError
} =
/* istanbul ignore next */
(cov_gjmscygas().s[2]++, require('../utils/errors'));
class UserRepository extends BaseRepository {
  constructor() {
    /* istanbul ignore next */
    cov_gjmscygas().f[0]++;
    cov_gjmscygas().s[3]++;
    super(User);
  }

  /**
   * Find user by email
   * @param {string} email - User email
   * @param {Object} options - Query options
   * @returns {Promise<Object|null>} Found user
   */
  async findByEmail(email, options =
  /* istanbul ignore next */
  (cov_gjmscygas().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_gjmscygas().f[1]++;
    cov_gjmscygas().s[4]++;
    return this.findOne({
      email: email.toLowerCase()
    }, options);
  }

  /**
   * Find user by email with password
   * @param {string} email - User email
   * @returns {Promise<Object|null>} Found user with password
   */
  async findByEmailWithPassword(email) {
    /* istanbul ignore next */
    cov_gjmscygas().f[2]++;
    cov_gjmscygas().s[5]++;
    return this.findOne({
      email: email.toLowerCase()
    }, {
      select: '+password'
    });
  }

  /**
   * Find active users
   * @param {Object} criteria - Search criteria
   * @param {Object} options - Query options
   * @returns {Promise<Array>} Active users
   */
  async findActive(criteria =
  /* istanbul ignore next */
  (cov_gjmscygas().b[1][0]++, {}), options =
  /* istanbul ignore next */
  (cov_gjmscygas().b[2][0]++, {})) {
    /* istanbul ignore next */
    cov_gjmscygas().f[3]++;
    cov_gjmscygas().s[6]++;
    return this.find({
      ...criteria,
      active: true
    }, options);
  }

  /**
   * Find active users with pagination
   * @param {Object} criteria - Search criteria
   * @param {Object} options - Query options
   * @returns {Promise<Object>} Paginated active users
   */
  async findActiveWithPagination(criteria =
  /* istanbul ignore next */
  (cov_gjmscygas().b[3][0]++, {}), options =
  /* istanbul ignore next */
  (cov_gjmscygas().b[4][0]++, {})) {
    /* istanbul ignore next */
    cov_gjmscygas().f[4]++;
    cov_gjmscygas().s[7]++;
    return this.findWithPagination({
      ...criteria,
      active: true
    }, options);
  }

  /**
   * Update user password
   * @param {string} userId - User ID
   * @param {string} newPassword - New password
   * @returns {Promise<Object>} Updated user
   */
  async updatePassword(userId, newPassword) {
    /* istanbul ignore next */
    cov_gjmscygas().f[5]++;
    cov_gjmscygas().s[8]++;
    return this.updateById(userId, {
      password: newPassword,
      passwordChangedAt: new Date()
    });
  }

  /**
   * Add favorite destination
   * @param {string} userId - User ID
   * @param {string} destinationId - Destination ID
   * @returns {Promise<Object>} Updated user
   */
  async addFavorite(userId, destinationId) {
    /* istanbul ignore next */
    cov_gjmscygas().f[6]++;
    cov_gjmscygas().s[9]++;
    return this.updateById(userId, {
      $addToSet: {
        favorites: destinationId
      }
    });
  }

  /**
   * Remove favorite destination
   * @param {string} userId - User ID
   * @param {string} destinationId - Destination ID
   * @returns {Promise<Object>} Updated user
   */
  async removeFavorite(userId, destinationId) {
    /* istanbul ignore next */
    cov_gjmscygas().f[7]++;
    cov_gjmscygas().s[10]++;
    return this.updateById(userId, {
      $pull: {
        favorites: destinationId
      }
    });
  }

  /**
   * Toggle favorite destination
   * @param {string} userId - User ID
   * @param {string} destinationId - Destination ID
   * @returns {Promise<Object>} Updated user and favorite status
   */
  async toggleFavorite(userId, destinationId) {
    /* istanbul ignore next */
    cov_gjmscygas().f[8]++;
    const user =
    /* istanbul ignore next */
    (cov_gjmscygas().s[11]++, await this.findById(userId));
    /* istanbul ignore next */
    cov_gjmscygas().s[12]++;
    if (!user) {
      /* istanbul ignore next */
      cov_gjmscygas().b[5][0]++;
      cov_gjmscygas().s[13]++;
      throw new NotFoundError('User not found');
    } else
    /* istanbul ignore next */
    {
      cov_gjmscygas().b[5][1]++;
    }
    const isFavorite =
    /* istanbul ignore next */
    (cov_gjmscygas().s[14]++, user.favorites.includes(destinationId));
    /* istanbul ignore next */
    cov_gjmscygas().s[15]++;
    if (isFavorite) {
      /* istanbul ignore next */
      cov_gjmscygas().b[6][0]++;
      cov_gjmscygas().s[16]++;
      await this.removeFavorite(userId, destinationId);
    } else {
      /* istanbul ignore next */
      cov_gjmscygas().b[6][1]++;
      cov_gjmscygas().s[17]++;
      await this.addFavorite(userId, destinationId);
    }

    // Get updated user
    const updatedUser =
    /* istanbul ignore next */
    (cov_gjmscygas().s[18]++, await this.findById(userId));
    /* istanbul ignore next */
    cov_gjmscygas().s[19]++;
    return {
      user: updatedUser,
      isFavorite: !isFavorite
    };
  }

  /**
   * Get user favorites with populated destination data
   * @param {string} userId - User ID
   * @returns {Promise<Array>} User favorites
   */
  async getFavorites(userId) {
    /* istanbul ignore next */
    cov_gjmscygas().f[9]++;
    const user =
    /* istanbul ignore next */
    (cov_gjmscygas().s[20]++, await this.findById(userId, {
      populate: 'favorites',
      select: 'favorites'
    }));
    /* istanbul ignore next */
    cov_gjmscygas().s[21]++;
    if (!user) {
      /* istanbul ignore next */
      cov_gjmscygas().b[7][0]++;
      cov_gjmscygas().s[22]++;
      throw new NotFoundError('User not found');
    } else
    /* istanbul ignore next */
    {
      cov_gjmscygas().b[7][1]++;
    }
    cov_gjmscygas().s[23]++;
    return user.favorites;
  }

  /**
   * Soft delete user (set active to false)
   * @param {string} userId - User ID
   * @returns {Promise<Object>} Updated user
   */
  async softDelete(userId) {
    /* istanbul ignore next */
    cov_gjmscygas().f[10]++;
    cov_gjmscygas().s[24]++;
    return this.updateById(userId, {
      active: false
    });
  }

  /**
   * Restore soft deleted user
   * @param {string} userId - User ID
   * @returns {Promise<Object>} Updated user
   */
  async restore(userId) {
    /* istanbul ignore next */
    cov_gjmscygas().f[11]++;
    cov_gjmscygas().s[25]++;
    return this.updateById(userId, {
      active: true
    });
  }

  /**
   * Get user statistics
   * @returns {Promise<Object>} User statistics
   */
  async getStatistics() {
    /* istanbul ignore next */
    cov_gjmscygas().f[12]++;
    const pipeline =
    /* istanbul ignore next */
    (cov_gjmscygas().s[26]++, [{
      $group: {
        _id: null,
        totalUsers: {
          $sum: 1
        },
        activeUsers: {
          $sum: {
            $cond: [{
              $eq: ['$active', true]
            }, 1, 0]
          }
        },
        inactiveUsers: {
          $sum: {
            $cond: [{
              $eq: ['$active', false]
            }, 1, 0]
          }
        },
        usersWithFavorites: {
          $sum: {
            $cond: [{
              $gt: [{
                $size: '$favorites'
              }, 0]
            }, 1, 0]
          }
        }
      }
    }]);
    const result =
    /* istanbul ignore next */
    (cov_gjmscygas().s[27]++, await this.aggregate(pipeline));
    /* istanbul ignore next */
    cov_gjmscygas().s[28]++;
    return /* istanbul ignore next */(cov_gjmscygas().b[8][0]++, result[0]) ||
    /* istanbul ignore next */
    (cov_gjmscygas().b[8][1]++, {
      totalUsers: 0,
      activeUsers: 0,
      inactiveUsers: 0,
      usersWithFavorites: 0
    });
  }

  /**
   * Get users by role
   * @param {string} role - User role
   * @param {Object} options - Query options
   * @returns {Promise<Array>} Users with specified role
   */
  async findByRole(role, options =
  /* istanbul ignore next */
  (cov_gjmscygas().b[9][0]++, {})) {
    /* istanbul ignore next */
    cov_gjmscygas().f[13]++;
    cov_gjmscygas().s[29]++;
    return this.find({
      role
    }, options);
  }

  /**
   * Update user role
   * @param {string} userId - User ID
   * @param {string} role - New role
   * @returns {Promise<Object>} Updated user
   */
  async updateRole(userId, role) {
    /* istanbul ignore next */
    cov_gjmscygas().f[14]++;
    const allowedRoles =
    /* istanbul ignore next */
    (cov_gjmscygas().s[30]++, ['user', 'admin']);
    /* istanbul ignore next */
    cov_gjmscygas().s[31]++;
    if (!allowedRoles.includes(role)) {
      /* istanbul ignore next */
      cov_gjmscygas().b[10][0]++;
      cov_gjmscygas().s[32]++;
      throw new ValidationError(`Invalid role. Allowed roles: ${allowedRoles.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_gjmscygas().b[10][1]++;
    }
    cov_gjmscygas().s[33]++;
    return this.updateById(userId, {
      role
    });
  }

  /**
   * Search users by name or email
   * @param {string} searchTerm - Search term
   * @param {Object} options - Query options
   * @returns {Promise<Array>} Matching users
   */
  async search(searchTerm, options =
  /* istanbul ignore next */
  (cov_gjmscygas().b[11][0]++, {})) {
    /* istanbul ignore next */
    cov_gjmscygas().f[15]++;
    const searchCriteria =
    /* istanbul ignore next */
    (cov_gjmscygas().s[34]++, {
      $or: [{
        name: {
          $regex: searchTerm,
          $options: 'i'
        }
      }, {
        email: {
          $regex: searchTerm,
          $options: 'i'
        }
      }]
    });
    /* istanbul ignore next */
    cov_gjmscygas().s[35]++;
    return this.find(searchCriteria, options);
  }

  /**
   * Get users created in date range
   * @param {Date} startDate - Start date
   * @param {Date} endDate - End date
   * @param {Object} options - Query options
   * @returns {Promise<Array>} Users created in range
   */
  async findByDateRange(startDate, endDate, options =
  /* istanbul ignore next */
  (cov_gjmscygas().b[12][0]++, {})) {
    /* istanbul ignore next */
    cov_gjmscygas().f[16]++;
    const criteria =
    /* istanbul ignore next */
    (cov_gjmscygas().s[36]++, {
      createdAt: {
        $gte: startDate,
        $lte: endDate
      }
    });
    /* istanbul ignore next */
    cov_gjmscygas().s[37]++;
    return this.find(criteria, options);
  }

  /**
   * Get users with most favorites
   * @param {number} limit - Number of users to return
   * @returns {Promise<Array>} Users with most favorites
   */
  async getTopUsersByFavorites(limit =
  /* istanbul ignore next */
  (cov_gjmscygas().b[13][0]++, 10)) {
    /* istanbul ignore next */
    cov_gjmscygas().f[17]++;
    const pipeline =
    /* istanbul ignore next */
    (cov_gjmscygas().s[38]++, [{
      $addFields: {
        favoritesCount: {
          $size: '$favorites'
        }
      }
    }, {
      $sort: {
        favoritesCount: -1
      }
    }, {
      $limit: limit
    }, {
      $project: {
        name: 1,
        email: 1,
        favoritesCount: 1,
        createdAt: 1
      }
    }]);
    /* istanbul ignore next */
    cov_gjmscygas().s[39]++;
    return this.aggregate(pipeline);
  }
}
/* istanbul ignore next */
cov_gjmscygas().s[40]++;
module.exports = new UserRepository();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,