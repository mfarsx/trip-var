71ced4d493720995a89b5a7e070faf4c
/* istanbul ignore next */
function cov_1yfocprde9() {
  var path = "/Users/mfarsx/dev/tripvar/tripvar-server/src/routes/auth.routes.js";
  var hash = "991e7ed269c5915f1a4cd79dac96d0d747d4b2a6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/mfarsx/dev/tripvar/tripvar-server/src/routes/auth.routes.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 23
        },
        end: {
          line: 2,
          column: 64
        }
      },
      "2": {
        start: {
          line: 3,
          column: 20
        },
        end: {
          line: 3,
          column: 49
        }
      },
      "3": {
        start: {
          line: 4,
          column: 27
        },
        end: {
          line: 4,
          column: 56
        }
      },
      "4": {
        start: {
          line: 5,
          column: 31
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "5": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 44
        }
      },
      "6": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 31
        }
      },
      "7": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 23,
          column: 2
        }
      },
      "8": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 30,
          column: 2
        }
      },
      "9": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 33,
          column: 20
        }
      },
      "10": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 46
        }
      },
      "11": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 43,
          column: 2
        }
      },
      "12": {
        start: {
          line: 46,
          column: 0
        },
        end: {
          line: 54,
          column: 40
        }
      },
      "13": {
        start: {
          line: 57,
          column: 0
        },
        end: {
          line: 61,
          column: 2
        }
      },
      "14": {
        start: {
          line: 64,
          column: 0
        },
        end: {
          line: 64,
          column: 54
        }
      },
      "15": {
        start: {
          line: 65,
          column: 0
        },
        end: {
          line: 69,
          column: 2
        }
      },
      "16": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 71,
          column: 24
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "991e7ed269c5915f1a4cd79dac96d0d747d4b2a6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1yfocprde9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1yfocprde9();
const express =
/* istanbul ignore next */
(cov_1yfocprde9().s[0]++, require('express'));
const authController =
/* istanbul ignore next */
(cov_1yfocprde9().s[1]++, require('../controllers/auth.controller'));
const {
  protect
} =
/* istanbul ignore next */
(cov_1yfocprde9().s[2]++, require('../middleware/auth'));
const {
  securityConfig
} =
/* istanbul ignore next */
(cov_1yfocprde9().s[3]++, require('../config/security'));
const {
  validate,
  sanitize
} =
/* istanbul ignore next */
(cov_1yfocprde9().s[4]++, require('../middleware/validation'));
const {
  registerSchema,
  loginSchema,
  updateProfileSchema,
  updatePasswordSchema,
  toggleFavoriteSchema,
  paginationSchema
} =
/* istanbul ignore next */
(cov_1yfocprde9().s[5]++, require('../validation/auth.validation'));
const router =
/* istanbul ignore next */
(cov_1yfocprde9().s[6]++, express.Router());

// Public routes with strict rate limiting and validation
/* istanbul ignore next */
cov_1yfocprde9().s[7]++;
router.post('/register', securityConfig.authLimiter, sanitize(), validate(registerSchema), authController.register);
/* istanbul ignore next */
cov_1yfocprde9().s[8]++;
router.post('/login', securityConfig.authLimiter, sanitize(), validate(loginSchema), authController.login);

// Protected routes (everything after this middleware requires authentication)
/* istanbul ignore next */
cov_1yfocprde9().s[9]++;
router.use(protect);

// Logout route
/* istanbul ignore next */
cov_1yfocprde9().s[10]++;
router.post('/logout', authController.logout);

// Get all users
/* istanbul ignore next */
cov_1yfocprde9().s[11]++;
router.get('/users', sanitize(), validate(paginationSchema), authController.getAllUsers);

// Profile routes
/* istanbul ignore next */
cov_1yfocprde9().s[12]++;
router.route('/profile').get(authController.getProfile).patch(sanitize(), validate(updateProfileSchema), authController.updateProfile).delete(authController.deleteAccount);

// Password update
/* istanbul ignore next */
cov_1yfocprde9().s[13]++;
router.patch('/update-password', sanitize(), validate(updatePasswordSchema), authController.updatePassword);

// Favorites routes
/* istanbul ignore next */
cov_1yfocprde9().s[14]++;
router.get('/favorites', authController.getFavorites);
/* istanbul ignore next */
cov_1yfocprde9().s[15]++;
router.post('/favorites/:destinationId', sanitize(), validate(toggleFavoriteSchema), authController.toggleFavorite);
/* istanbul ignore next */
cov_1yfocprde9().s[16]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXlmb2NwcmRlOSIsImFjdHVhbENvdmVyYWdlIiwiZXhwcmVzcyIsInMiLCJyZXF1aXJlIiwiYXV0aENvbnRyb2xsZXIiLCJwcm90ZWN0Iiwic2VjdXJpdHlDb25maWciLCJ2YWxpZGF0ZSIsInNhbml0aXplIiwicmVnaXN0ZXJTY2hlbWEiLCJsb2dpblNjaGVtYSIsInVwZGF0ZVByb2ZpbGVTY2hlbWEiLCJ1cGRhdGVQYXNzd29yZFNjaGVtYSIsInRvZ2dsZUZhdm9yaXRlU2NoZW1hIiwicGFnaW5hdGlvblNjaGVtYSIsInJvdXRlciIsIlJvdXRlciIsInBvc3QiLCJhdXRoTGltaXRlciIsInJlZ2lzdGVyIiwibG9naW4iLCJ1c2UiLCJsb2dvdXQiLCJnZXQiLCJnZXRBbGxVc2VycyIsInJvdXRlIiwiZ2V0UHJvZmlsZSIsInBhdGNoIiwidXBkYXRlUHJvZmlsZSIsImRlbGV0ZSIsImRlbGV0ZUFjY291bnQiLCJ1cGRhdGVQYXNzd29yZCIsImdldEZhdm9yaXRlcyIsInRvZ2dsZUZhdm9yaXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImF1dGgucm91dGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5jb25zdCBhdXRoQ29udHJvbGxlciA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzL2F1dGguY29udHJvbGxlcicpO1xuY29uc3QgeyBwcm90ZWN0IH0gPSByZXF1aXJlKCcuLi9taWRkbGV3YXJlL2F1dGgnKTtcbmNvbnN0IHsgc2VjdXJpdHlDb25maWcgfSA9IHJlcXVpcmUoJy4uL2NvbmZpZy9zZWN1cml0eScpO1xuY29uc3QgeyB2YWxpZGF0ZSwgc2FuaXRpemUgfSA9IHJlcXVpcmUoJy4uL21pZGRsZXdhcmUvdmFsaWRhdGlvbicpO1xuY29uc3Qge1xuICByZWdpc3RlclNjaGVtYSxcbiAgbG9naW5TY2hlbWEsXG4gIHVwZGF0ZVByb2ZpbGVTY2hlbWEsXG4gIHVwZGF0ZVBhc3N3b3JkU2NoZW1hLFxuICB0b2dnbGVGYXZvcml0ZVNjaGVtYSxcbiAgcGFnaW5hdGlvblNjaGVtYVxufSA9IHJlcXVpcmUoJy4uL3ZhbGlkYXRpb24vYXV0aC52YWxpZGF0aW9uJyk7XG5cbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5cbi8vIFB1YmxpYyByb3V0ZXMgd2l0aCBzdHJpY3QgcmF0ZSBsaW1pdGluZyBhbmQgdmFsaWRhdGlvblxucm91dGVyLnBvc3QoJy9yZWdpc3RlcicsXG4gIHNlY3VyaXR5Q29uZmlnLmF1dGhMaW1pdGVyLFxuICBzYW5pdGl6ZSgpLFxuICB2YWxpZGF0ZShyZWdpc3RlclNjaGVtYSksXG4gIGF1dGhDb250cm9sbGVyLnJlZ2lzdGVyXG4pO1xuXG5yb3V0ZXIucG9zdCgnL2xvZ2luJyxcbiAgc2VjdXJpdHlDb25maWcuYXV0aExpbWl0ZXIsXG4gIHNhbml0aXplKCksXG4gIHZhbGlkYXRlKGxvZ2luU2NoZW1hKSxcbiAgYXV0aENvbnRyb2xsZXIubG9naW5cbik7XG5cbi8vIFByb3RlY3RlZCByb3V0ZXMgKGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhpcyBtaWRkbGV3YXJlIHJlcXVpcmVzIGF1dGhlbnRpY2F0aW9uKVxucm91dGVyLnVzZShwcm90ZWN0KTtcblxuLy8gTG9nb3V0IHJvdXRlXG5yb3V0ZXIucG9zdCgnL2xvZ291dCcsIGF1dGhDb250cm9sbGVyLmxvZ291dCk7XG5cbi8vIEdldCBhbGwgdXNlcnNcbnJvdXRlci5nZXQoJy91c2VycycsXG4gIHNhbml0aXplKCksXG4gIHZhbGlkYXRlKHBhZ2luYXRpb25TY2hlbWEpLFxuICBhdXRoQ29udHJvbGxlci5nZXRBbGxVc2Vyc1xuKTtcblxuLy8gUHJvZmlsZSByb3V0ZXNcbnJvdXRlclxuICAucm91dGUoJy9wcm9maWxlJylcbiAgLmdldChhdXRoQ29udHJvbGxlci5nZXRQcm9maWxlKVxuICAucGF0Y2goXG4gICAgc2FuaXRpemUoKSxcbiAgICB2YWxpZGF0ZSh1cGRhdGVQcm9maWxlU2NoZW1hKSxcbiAgICBhdXRoQ29udHJvbGxlci51cGRhdGVQcm9maWxlXG4gIClcbiAgLmRlbGV0ZShhdXRoQ29udHJvbGxlci5kZWxldGVBY2NvdW50KTtcblxuLy8gUGFzc3dvcmQgdXBkYXRlXG5yb3V0ZXIucGF0Y2goJy91cGRhdGUtcGFzc3dvcmQnLFxuICBzYW5pdGl6ZSgpLFxuICB2YWxpZGF0ZSh1cGRhdGVQYXNzd29yZFNjaGVtYSksXG4gIGF1dGhDb250cm9sbGVyLnVwZGF0ZVBhc3N3b3JkXG4pO1xuXG4vLyBGYXZvcml0ZXMgcm91dGVzXG5yb3V0ZXIuZ2V0KCcvZmF2b3JpdGVzJywgYXV0aENvbnRyb2xsZXIuZ2V0RmF2b3JpdGVzKTtcbnJvdXRlci5wb3N0KCcvZmF2b3JpdGVzLzpkZXN0aW5hdGlvbklkJyxcbiAgc2FuaXRpemUoKSxcbiAgdmFsaWRhdGUodG9nZ2xlRmF2b3JpdGVTY2hlbWEpLFxuICBhdXRoQ29udHJvbGxlci50b2dnbGVGYXZvcml0ZVxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBZVk7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQWZaLE1BQU1FLE9BQU87QUFBQTtBQUFBLENBQUFGLGNBQUEsR0FBQUcsQ0FBQSxPQUFHQyxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ2xDLE1BQU1DLGNBQWM7QUFBQTtBQUFBLENBQUFMLGNBQUEsR0FBQUcs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