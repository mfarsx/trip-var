ef6e5e77cea32d39095828351874b3e7
// Mock external services before importing routes
_getJestObj().mock('../config/redis', () => ({
  connectRedis: jest.fn().mockResolvedValue(),
  disconnectRedis: jest.fn().mockResolvedValue(),
  getRedisClient: jest.fn(() => ({
    get: jest.fn().mockResolvedValue(null),
    set: jest.fn().mockResolvedValue('OK'),
    del: jest.fn().mockResolvedValue(1),
    exists: jest.fn().mockResolvedValue(0),
    expire: jest.fn().mockResolvedValue(1),
    flushall: jest.fn().mockResolvedValue('OK'),
    ping: jest.fn().mockResolvedValue('PONG'),
    quit: jest.fn().mockResolvedValue('OK'),
    status: 'ready'
  })),
  redisUtils: {
    deleteCache: jest.fn().mockResolvedValue(true),
    getCache: jest.fn().mockResolvedValue(null),
    setCache: jest.fn().mockResolvedValue('OK'),
    exists: jest.fn().mockResolvedValue(false),
    expire: jest.fn().mockResolvedValue(true),
    flushall: jest.fn().mockResolvedValue('OK')
  }
}));

// Mock security config with relaxed rate limiting for tests
_getJestObj().mock('../config/security', () => ({
  securityConfig: {
    authLimiter: (req, res, next) => next(),
    // Skip rate limiting in tests
    generalLimiter: (req, res, next) => next() // Skip rate limiting in tests
  }
}));

// Import routes
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
// Test-specific app configuration that doesn't connect to external services
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
const slowDown = require('express-slow-down');
const authRoutes = require('../routes/auth.routes');
const destinationRoutes = require('../routes/destination.routes');
const bookingRoutes = require('../routes/booking.routes');
const healthRoutes = require('../routes/health.routes');

// Import middleware
const errorHandler = require('../middleware/errorHandler');

// Create Express app
const app = express();

// Security middleware
app.use(helmet({
  contentSecurityPolicy: false,
  // Disable for testing
  crossOriginEmbedderPolicy: false
}));

// CORS configuration
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000', 'http://localhost:5173'],
  credentials: true
}));

// Compression middleware
app.use(compression());

// Rate limiting (relaxed for testing)
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  // 15 minutes
  max: 1000,
  // limit each IP to 1000 requests per windowMs (increased for testing)
  message: 'Too many requests from this IP, please try again later.'
});
app.use('/api/', limiter);

// Speed limiting (relaxed for testing)
const speedLimiter = slowDown({
  windowMs: 15 * 60 * 1000,
  // 15 minutes
  delayAfter: 500,
  // allow 500 requests per 15 minutes, then... (increased for testing)
  delayMs: () => 100,
  // begin adding 100ms of delay per request above 500 (reduced for testing)
  validate: {
    delayMs: false
  } // Disable validation warning
});
app.use('/api/', speedLimiter);

// Body parsing middleware
app.use(express.json({
  limit: '10mb'
}));
app.use(express.urlencoded({
  extended: true,
  limit: '10mb'
}));

// Request validation middleware (disabled for tests)
// app.use(validateRequest);

// Routes
app.use('/api/v1/auth', authRoutes);
app.use('/api/v1/destinations', destinationRoutes);
app.use('/api/v1/bookings', bookingRoutes);
app.use('/health', healthRoutes);

// 404 handler for undefined routes
app.use('*', (req, res, next) => {
  const error = new Error(`Route ${req.originalUrl} not found`);
  error.statusCode = 404;
  error.status = 'fail';
  error.code = 'ROUTE_NOT_FOUND';
  error.isOperational = true;
  next(error);
});

// Error handling middleware (must be last)
app.use(errorHandler);
module.exports = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJjb25uZWN0UmVkaXMiLCJqZXN0IiwiZm4iLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImRpc2Nvbm5lY3RSZWRpcyIsImdldFJlZGlzQ2xpZW50IiwiZ2V0Iiwic2V0IiwiZGVsIiwiZXhpc3RzIiwiZXhwaXJlIiwiZmx1c2hhbGwiLCJwaW5nIiwicXVpdCIsInN0YXR1cyIsInJlZGlzVXRpbHMiLCJkZWxldGVDYWNoZSIsImdldENhY2hlIiwic2V0Q2FjaGUiLCJzZWN1cml0eUNvbmZpZyIsImF1dGhMaW1pdGVyIiwicmVxIiwicmVzIiwibmV4dCIsImdlbmVyYWxMaW1pdGVyIiwicmVxdWlyZSIsImV4cHJlc3MiLCJjb3JzIiwiaGVsbWV0IiwiY29tcHJlc3Npb24iLCJyYXRlTGltaXQiLCJzbG93RG93biIsImF1dGhSb3V0ZXMiLCJkZXN0aW5hdGlvblJvdXRlcyIsImJvb2tpbmdSb3V0ZXMiLCJoZWFsdGhSb3V0ZXMiLCJlcnJvckhhbmRsZXIiLCJhcHAiLCJ1c2UiLCJjb250ZW50U2VjdXJpdHlQb2xpY3kiLCJjcm9zc09yaWdpbkVtYmVkZGVyUG9saWN5Iiwib3JpZ2luIiwicHJvY2VzcyIsImVudiIsIkFMTE9XRURfT1JJR0lOUyIsInNwbGl0IiwiY3JlZGVudGlhbHMiLCJsaW1pdGVyIiwid2luZG93TXMiLCJtYXgiLCJtZXNzYWdlIiwic3BlZWRMaW1pdGVyIiwiZGVsYXlBZnRlciIsImRlbGF5TXMiLCJ2YWxpZGF0ZSIsImpzb24iLCJsaW1pdCIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImVycm9yIiwiRXJyb3IiLCJvcmlnaW5hbFVybCIsInN0YXR1c0NvZGUiLCJjb2RlIiwiaXNPcGVyYXRpb25hbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJhcHAudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUZXN0LXNwZWNpZmljIGFwcCBjb25maWd1cmF0aW9uIHRoYXQgZG9lc24ndCBjb25uZWN0IHRvIGV4dGVybmFsIHNlcnZpY2VzXG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgY29ycyA9IHJlcXVpcmUoJ2NvcnMnKTtcbmNvbnN0IGhlbG1ldCA9IHJlcXVpcmUoJ2hlbG1ldCcpO1xuY29uc3QgY29tcHJlc3Npb24gPSByZXF1aXJlKCdjb21wcmVzc2lvbicpO1xuY29uc3QgcmF0ZUxpbWl0ID0gcmVxdWlyZSgnZXhwcmVzcy1yYXRlLWxpbWl0Jyk7XG5jb25zdCBzbG93RG93biA9IHJlcXVpcmUoJ2V4cHJlc3Mtc2xvdy1kb3duJyk7XG5cbi8vIE1vY2sgZXh0ZXJuYWwgc2VydmljZXMgYmVmb3JlIGltcG9ydGluZyByb3V0ZXNcbmplc3QubW9jaygnLi4vY29uZmlnL3JlZGlzJywgKCkgPT4gKHtcbiAgY29ubmVjdFJlZGlzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoKSxcbiAgZGlzY29ubmVjdFJlZGlzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoKSxcbiAgZ2V0UmVkaXNDbGllbnQ6IGplc3QuZm4oKCkgPT4gKHtcbiAgICBnZXQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKSxcbiAgICBzZXQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgnT0snKSxcbiAgICBkZWw6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgxKSxcbiAgICBleGlzdHM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgwKSxcbiAgICBleHBpcmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgxKSxcbiAgICBmbHVzaGFsbDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCdPSycpLFxuICAgIHBpbmc6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgnUE9ORycpLFxuICAgIHF1aXQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgnT0snKSxcbiAgICBzdGF0dXM6ICdyZWFkeSdcbiAgfSkpLFxuICByZWRpc1V0aWxzOiB7XG4gICAgZGVsZXRlQ2FjaGU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgICBnZXRDYWNoZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpLFxuICAgIHNldENhY2hlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ09LJyksXG4gICAgZXhpc3RzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoZmFsc2UpLFxuICAgIGV4cGlyZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICAgIGZsdXNoYWxsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ09LJylcbiAgfVxufSkpO1xuXG4vLyBNb2NrIHNlY3VyaXR5IGNvbmZpZyB3aXRoIHJlbGF4ZWQgcmF0ZSBsaW1pdGluZyBmb3IgdGVzdHNcbmplc3QubW9jaygnLi4vY29uZmlnL3NlY3VyaXR5JywgKCkgPT4gKHtcbiAgc2VjdXJpdHlDb25maWc6IHtcbiAgICBhdXRoTGltaXRlcjogKHJlcSwgcmVzLCBuZXh0KSA9PiBuZXh0KCksIC8vIFNraXAgcmF0ZSBsaW1pdGluZyBpbiB0ZXN0c1xuICAgIGdlbmVyYWxMaW1pdGVyOiAocmVxLCByZXMsIG5leHQpID0+IG5leHQoKSAvLyBTa2lwIHJhdGUgbGltaXRpbmcgaW4gdGVzdHNcbiAgfVxufSkpO1xuXG4vLyBJbXBvcnQgcm91dGVzXG5jb25zdCBhdXRoUm91dGVzID0gcmVxdWlyZSgnLi4vcm91dGVzL2F1dGgucm91dGVzJyk7XG5jb25zdCBkZXN0aW5hdGlvblJvdXRlcyA9IHJlcXVpcmUoJy4uL3JvdXRlcy9kZXN0aW5hdGlvbi5yb3V0ZXMnKTtcbmNvbnN0IGJvb2tpbmdSb3V0ZXMgPSByZXF1aXJlKCcuLi9yb3V0ZXMvYm9va2luZy5yb3V0ZXMnKTtcbmNvbnN0IGhlYWx0aFJvdXRlcyA9IHJlcXVpcmUoJy4uL3JvdXRlcy9oZWFsdGgucm91dGVzJyk7XG5cbi8vIEltcG9ydCBtaWRkbGV3YXJlXG5jb25zdCBlcnJvckhhbmRsZXIgPSByZXF1aXJlKCcuLi9taWRkbGV3YXJlL2Vycm9ySGFuZGxlcicpO1xuXG4vLyBDcmVhdGUgRXhwcmVzcyBhcHBcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuLy8gU2VjdXJpdHkgbWlkZGxld2FyZVxuYXBwLnVzZShoZWxtZXQoe1xuICBjb250ZW50U2VjdXJpdHlQb2xpY3k6IGZhbHNlLCAvLyBEaXNhYmxlIGZvciB0ZXN0aW5nXG4gIGNyb3NzT3JpZ2luRW1iZWRkZXJQb2xpY3k6IGZhbHNlXG59KSk7XG5cbi8vIENPUlMgY29uZmlndXJhdGlvblxuYXBwLnVzZShjb3JzKHtcbiAgb3JpZ2luOiBwcm9jZXNzLmVudi5BTExPV0VEX09SSUdJTlM/LnNwbGl0KCcsJykgfHwgWydodHRwOi8vbG9jYWxob3N0OjMwMDAnLCAnaHR0cDovL2xvY2FsaG9zdDo1MTczJ10sXG4gIGNyZWRlbnRpYWxzOiB0cnVlXG59KSk7XG5cbi8vIENvbXByZXNzaW9uIG1pZGRsZXdhcmVcbmFwcC51c2UoY29tcHJlc3Npb24oKSk7XG5cbi8vIFJhdGUgbGltaXRpbmcgKHJlbGF4ZWQgZm9yIHRlc3RpbmcpXG5jb25zdCBsaW1pdGVyID0gcmF0ZUxpbWl0KHtcbiAgd2luZG93TXM6IDE1ICogNjAgKiAxMDAwLCAvLyAxNSBtaW51dGVzXG4gIG1heDogMTAwMCwgLy8gbGltaXQgZWFjaCBJUCB0byAxMDAwIHJlcXVlc3RzIHBlciB3aW5kb3dNcyAoaW5jcmVhc2VkIGZvciB0ZXN0aW5nKVxuICBtZXNzYWdlOiAnVG9vIG1hbnkgcmVxdWVzdHMgZnJvbSB0aGlzIElQLCBwbGVhc2UgdHJ5IGFnYWluIGxhdGVyLidcbn0pO1xuYXBwLnVzZSgnL2FwaS8nLCBsaW1pdGVyKTtcblxuLy8gU3BlZWQgbGltaXRpbmcgKHJlbGF4ZWQgZm9yIHRlc3RpbmcpXG5jb25zdCBzcGVlZExpbWl0ZXIgPSBzbG93RG93bih7XG4gIHdpbmRvd01zOiAxNSAqIDYwICogMTAwMCwgLy8gMTUgbWludXRlc1xuICBkZWxheUFmdGVyOiA1MDAsIC8vIGFsbG93IDUwMCByZXF1ZXN0cyBwZXIgMTUgbWludXRlcywgdGhlbi4uLiAoaW5jcmVhc2VkIGZvciB0ZXN0aW5nKVxuICBkZWxheU1zOiAoKSA9PiAxMDAsIC8vIGJlZ2luIGFkZGluZyAxMDBtcyBvZiBkZWxheSBwZXIgcmVxdWVzdCBhYm92ZSA1MDAgKHJlZHVjZWQgZm9yIHRlc3RpbmcpXG4gIHZhbGlkYXRlOiB7IGRlbGF5TXM6IGZhbHNlIH0gLy8gRGlzYWJsZSB2YWxpZGF0aW9uIHdhcm5pbmdcbn0pO1xuYXBwLnVzZSgnL2FwaS8nLCBzcGVlZExpbWl0ZXIpO1xuXG4vLyBCb2R5IHBhcnNpbmcgbWlkZGxld2FyZVxuYXBwLnVzZShleHByZXNzLmpzb24oeyBsaW1pdDogJzEwbWInIH0pKTtcbmFwcC51c2UoZXhwcmVzcy51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUsIGxpbWl0OiAnMTBtYicgfSkpO1xuXG5cblxuLy8gUmVxdWVzdCB2YWxpZGF0aW9uIG1pZGRsZXdhcmUgKGRpc2FibGVkIGZvciB0ZXN0cylcbi8vIGFwcC51c2UodmFsaWRhdGVSZXF1ZXN0KTtcblxuLy8gUm91dGVzXG5hcHAudXNlKCcvYXBpL3YxL2F1dGgnLCBhdXRoUm91dGVzKTtcbmFwcC51c2UoJy9hcGkvdjEvZGVzdGluYXRpb25zJywgZGVzdGluYXRpb25Sb3V0ZXMpO1xuYXBwLnVzZSgnL2FwaS92MS9ib29raW5ncycsIGJvb2tpbmdSb3V0ZXMpO1xuYXBwLnVzZSgnL2hlYWx0aCcsIGhlYWx0aFJvdXRlcyk7XG5cbi8vIDQwNCBoYW5kbGVyIGZvciB1bmRlZmluZWQgcm91dGVzXG5hcHAudXNlKCcqJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBSb3V0ZSAke3JlcS5vcmlnaW5hbFVybH0gbm90IGZvdW5kYCk7XG4gIGVycm9yLnN0YXR1c0NvZGUgPSA0MDQ7XG4gIGVycm9yLnN0YXR1cyA9ICdmYWlsJztcbiAgZXJyb3IuY29kZSA9ICdST1VURV9OT1RfRk9VTkQnO1xuICBlcnJvci5pc09wZXJhdGlvbmFsID0gdHJ1ZTtcbiAgbmV4dChlcnJvcik7XG59KTtcblxuLy8gRXJyb3IgaGFuZGxpbmcgbWlkZGxld2FyZSAobXVzdCBiZSBsYXN0KVxuYXBwLnVzZShlcnJvckhhbmRsZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcDsiXSwibWFwcGluZ3MiOiJBQVFBO0FBQ0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGlCQUFpQixFQUFFLE9BQU87RUFDbENDLFlBQVksRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDO0VBQzNDQyxlQUFlLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztFQUM5Q0UsY0FBYyxFQUFFSixJQUFJLENBQUNDLEVBQUUsQ0FBQyxPQUFPO0lBQzdCSSxHQUFHLEVBQUVMLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0lBQ3RDSSxHQUFHLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0lBQ3RDSyxHQUFHLEVBQUVQLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0lBQ25DTSxNQUFNLEVBQUVSLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0lBQ3RDTyxNQUFNLEVBQUVULElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0lBQ3RDUSxRQUFRLEVBQUVWLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0lBQzNDUyxJQUFJLEVBQUVYLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0Ms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