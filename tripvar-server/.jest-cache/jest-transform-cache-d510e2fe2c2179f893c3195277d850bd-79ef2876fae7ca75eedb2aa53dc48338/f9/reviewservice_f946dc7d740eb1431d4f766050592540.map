{"version":3,"names":["cov_20lmn17v04","actualCoverage","BaseService","s","require","ReviewService","constructor","repository","f","createReview","reviewData","existingReview","hasUserReviewed","user","destination","b","Error","review","create","updateDestinationRating","error","getReviewsByDestination","destinationId","findByDestination","getReviewsByUser","userId","findByUser","getReviewsByRating","rating","findByRating","getRecentReviews","limit","findRecent","getReviewsWithPhotos","findWithPhotos","getAverageRatingForDestination","getAverageRating","getRatingDistributionForDestination","getRatingDistribution","updateReviewHelpfulness","reviewId","helpfulCount","updateHelpfulness","ratingData","Destination","findByIdAndUpdate","averageRating","reviewCount","totalReviews","getReviewStatistics","getStatistics","canUserReviewDestination","hasReviewed","canReview","reason","Booking","hasBooking","findOne","status","getReviewsWithPagination","page","reviews","startIndex","endIndex","paginatedReviews","slice","pagination","total","length","pages","Math","ceil","module","exports"],"sources":["review.service.js"],"sourcesContent":["const BaseService = require('./base.service');\n\nclass ReviewService extends BaseService {\n  constructor(repository) {\n    super(repository);\n  }\n\n  // Create a new review\n  async createReview(reviewData) {\n    try {\n      // Check if user has already reviewed this destination\n      const existingReview = await this.repository.hasUserReviewed(\n        reviewData.user,\n        reviewData.destination\n      );\n\n      if (existingReview) {\n        throw new Error('User has already reviewed this destination');\n      }\n\n      const review = await this.repository.create(reviewData);\n      \n      // Update destination rating\n      await this.updateDestinationRating(reviewData.destination);\n      \n      return review;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get reviews by destination\n  async getReviewsByDestination(destinationId) {\n    try {\n      return await this.repository.findByDestination(destinationId);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get reviews by user\n  async getReviewsByUser(userId) {\n    try {\n      return await this.repository.findByUser(userId);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get reviews by rating\n  async getReviewsByRating(rating) {\n    try {\n      return await this.repository.findByRating(rating);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get recent reviews\n  async getRecentReviews(limit = 10) {\n    try {\n      return await this.repository.findRecent(limit);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get reviews with photos\n  async getReviewsWithPhotos() {\n    try {\n      return await this.repository.findWithPhotos();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get average rating for destination\n  async getAverageRatingForDestination(destinationId) {\n    try {\n      return await this.repository.getAverageRating(destinationId);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get rating distribution for destination\n  async getRatingDistributionForDestination(destinationId) {\n    try {\n      return await this.repository.getRatingDistribution(destinationId);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Update review helpfulness\n  async updateReviewHelpfulness(reviewId, helpfulCount) {\n    try {\n      return await this.repository.updateHelpfulness(reviewId, helpfulCount);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Update destination rating after review changes\n  async updateDestinationRating(destinationId) {\n    try {\n      const ratingData = await this.repository.getAverageRating(destinationId);\n      \n      // Update destination model with new rating\n      const Destination = require('../models/destination.model');\n      await Destination.findByIdAndUpdate(destinationId, {\n        averageRating: ratingData.averageRating,\n        reviewCount: ratingData.totalReviews\n      });\n\n      return ratingData;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get review statistics\n  async getReviewStatistics() {\n    try {\n      return await this.repository.getStatistics();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Check if user can review destination\n  async canUserReviewDestination(userId, destinationId) {\n    try {\n      // Check if user has already reviewed\n      const hasReviewed = await this.repository.hasUserReviewed(userId, destinationId);\n      \n      if (hasReviewed) {\n        return { canReview: false, reason: 'User has already reviewed this destination' };\n      }\n\n      // Check if user has any bookings for this destination\n      const Booking = require('../models/booking.model');\n      const hasBooking = await Booking.findOne({\n        user: userId,\n        destination: destinationId,\n        status: 'confirmed'\n      });\n\n      if (!hasBooking) {\n        return { canReview: false, reason: 'User must have a confirmed booking to review' };\n      }\n\n      return { canReview: true };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get reviews with pagination\n  async getReviewsWithPagination(destinationId, page = 1, limit = 10) {\n    try {\n      const reviews = await this.repository.findByDestination(destinationId);\n      const startIndex = (page - 1) * limit;\n      const endIndex = startIndex + limit;\n      \n      const paginatedReviews = reviews.slice(startIndex, endIndex);\n      \n      return {\n        reviews: paginatedReviews,\n        pagination: {\n          page,\n          limit,\n          total: reviews.length,\n          pages: Math.ceil(reviews.length / limit)\n        }\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nmodule.exports = ReviewService;"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAME,WAAW;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,gBAAgB,CAAC;AAE7C,MAAMC,aAAa,SAASH,WAAW,CAAC;EACtCI,WAAWA,CAACC,UAAU,EAAE;IAAA;IAAAP,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IACtB,KAAK,CAACI,UAAU,CAAC;EACnB;;EAEA;EACA,MAAME,YAAYA,CAACC,UAAU,EAAE;IAAA;IAAAV,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IAC7B,IAAI;MACF;MACA,MAAMQ,cAAc;MAAA;MAAA,CAAAX,cAAA,GAAAG,CAAA,OAAG,MAAM,IAAI,CAACI,UAAU,CAACK,eAAe,CAC1DF,UAAU,CAACG,IAAI,EACfH,UAAU,CAACI,WACb,CAAC;MAAC;MAAAd,cAAA,GAAAG,CAAA;MAEF,IAAIQ,cAAc,EAAE;QAAA;QAAAX,cAAA,GAAAe,CAAA;QAAAf,cAAA,GAAAG,CAAA;QAClB,MAAM,IAAIa,KAAK,CAAC,4CAA4C,CAAC;MAC/D,CAAC;MAAA;MAAA;QAAAhB,cAAA,GAAAe,CAAA;MAAA;MAED,MAAME,MAAM;MAAA;MAAA,CAAAjB,cAAA,GAAAG,CAAA,OAAG,MAAM,IAAI,CAACI,UAAU,CAACW,MAAM,CAACR,UAAU,CAAC;;MAEvD;MAAA;MAAAV,cAAA,GAAAG,CAAA;MACA,MAAM,IAAI,CAACgB,uBAAuB,CAACT,UAAU,CAACI,WAAW,CAAC;MAAC;MAAAd,cAAA,GAAAG,CAAA;MAE3D,OAAOc,MAAM;IACf,CAAC,CAAC,OAAOG,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAAG,CAAA;MACd,MAAMiB,KAAK;IACb;EACF;;EAEA;EACA,MAAMC,uBAAuBA,CAACC,aAAa,EAAE;IAAA;IAAAtB,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IAC3C,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,OAAO,MAAM,IAAI,CAACI,UAAU,CAACgB,iBAAiB,CAACD,aAAa,CAAC;IAC/D,CAAC,CAAC,OAAOF,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAAG,CAAA;MACd,MAAMiB,KAAK;IACb;EACF;;EAEA;EACA,MAAMI,gBAAgBA,CAACC,MAAM,EAAE;IAAA;IAAAzB,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IAC7B,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,OAAO,MAAM,IAAI,CAACI,UAAU,CAACmB,UAAU,CAACD,MAAM,CAAC;IACjD,CAAC,CAAC,OAAOL,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAAG,CAAA;MACd,MAAMiB,KAAK;IACb;EACF;;EAEA;EACA,MAAMO,kBAAkBA,CAACC,MAAM,EAAE;IAAA;IAAA5B,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IAC/B,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,OAAO,MAAM,IAAI,CAACI,UAAU,CAACsB,YAAY,CAACD,MAAM,CAAC;IACnD,CAAC,CAAC,OAAOR,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAAG,CAAA;MACd,MAAMiB,KAAK;IACb;EACF;;EAEA;EACA,MAAMU,gBAAgBA,CAACC,KAAK;EAAA;EAAA,CAAA/B,cAAA,GAAAe,CAAA,UAAG,EAAE,GAAE;IAAA;IAAAf,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IACjC,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,OAAO,MAAM,IAAI,CAACI,UAAU,CAACyB,UAAU,CAACD,KAAK,CAAC;IAChD,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAAG,CAAA;MACd,MAAMiB,KAAK;IACb;EACF;;EAEA;EACA,MAAMa,oBAAoBA,CAAA,EAAG;IAAA;IAAAjC,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IAC3B,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,OAAO,MAAM,IAAI,CAACI,UAAU,CAAC2B,cAAc,CAAC,CAAC;IAC/C,CAAC,CAAC,OAAOd,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAAG,CAAA;MACd,MAAMiB,KAAK;IACb;EACF;;EAEA;EACA,MAAMe,8BAA8BA,CAACb,aAAa,EAAE;IAAA;IAAAtB,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IAClD,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,OAAO,MAAM,IAAI,CAACI,UAAU,CAAC6B,gBAAgB,CAACd,aAAa,CAAC;IAC9D,CAAC,CAAC,OAAOF,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAAG,CAAA;MACd,MAAMiB,KAAK;IACb;EACF;;EAEA;EACA,MAAMiB,mCAAmCA,CAACf,aAAa,EAAE;IAAA;IAAAtB,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IACvD,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,OAAO,MAAM,IAAI,CAACI,UAAU,CAAC+B,qBAAqB,CAAChB,aAAa,CAAC;IACnE,CAAC,CAAC,OAAOF,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAAG,CAAA;MACd,MAAMiB,KAAK;IACb;EACF;;EAEA;EACA,MAAMmB,uBAAuBA,CAACC,QAAQ,EAAEC,YAAY,EAAE;IAAA;IAAAzC,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IACpD,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,OAAO,MAAM,IAAI,CAACI,UAAU,CAACmC,iBAAiB,CAACF,QAAQ,EAAEC,YAAY,CAAC;IACxE,CAAC,CAAC,OAAOrB,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAAG,CAAA;MACd,MAAMiB,KAAK;IACb;EACF;;EAEA;EACA,MAAMD,uBAAuBA,CAACG,aAAa,EAAE;IAAA;IAAAtB,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IAC3C,IAAI;MACF,MAAMwC,UAAU;MAAA;MAAA,CAAA3C,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACI,UAAU,CAAC6B,gBAAgB,CAACd,aAAa,CAAC;;MAExE;MACA,MAAMsB,WAAW;MAAA;MAAA,CAAA5C,cAAA,GAAAG,CAAA,QAAGC,OAAO,CAAC,6BAA6B,CAAC;MAAC;MAAAJ,cAAA,GAAAG,CAAA;MAC3D,MAAMyC,WAAW,CAACC,iBAAiB,CAACvB,aAAa,EAAE;QACjDwB,aAAa,EAAEH,UAAU,CAACG,aAAa;QACvCC,WAAW,EAAEJ,UAAU,CAACK;MAC1B,CAAC,CAAC;MAAC;MAAAhD,cAAA,GAAAG,CAAA;MAEH,OAAOwC,UAAU;IACnB,CAAC,CAAC,OAAOvB,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAAG,CAAA;MACd,MAAMiB,KAAK;IACb;EACF;;EAEA;EACA,MAAM6B,mBAAmBA,CAAA,EAAG;IAAA;IAAAjD,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IAC1B,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,OAAO,MAAM,IAAI,CAACI,UAAU,CAAC2C,aAAa,CAAC,CAAC;IAC9C,CAAC,CAAC,OAAO9B,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAAG,CAAA;MACd,MAAMiB,KAAK;IACb;EACF;;EAEA;EACA,MAAM+B,wBAAwBA,CAAC1B,MAAM,EAAEH,aAAa,EAAE;IAAA;IAAAtB,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IACpD,IAAI;MACF;MACA,MAAMiD,WAAW;MAAA;MAAA,CAAApD,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACI,UAAU,CAACK,eAAe,CAACa,MAAM,EAAEH,aAAa,CAAC;MAAC;MAAAtB,cAAA,GAAAG,CAAA;MAEjF,IAAIiD,WAAW,EAAE;QAAA;QAAApD,cAAA,GAAAe,CAAA;QAAAf,cAAA,GAAAG,CAAA;QACf,OAAO;UAAEkD,SAAS,EAAE,KAAK;UAAEC,MAAM,EAAE;QAA6C,CAAC;MACnF,CAAC;MAAA;MAAA;QAAAtD,cAAA,GAAAe,CAAA;MAAA;;MAED;MACA,MAAMwC,OAAO;MAAA;MAAA,CAAAvD,cAAA,GAAAG,CAAA,QAAGC,OAAO,CAAC,yBAAyB,CAAC;MAClD,MAAMoD,UAAU;MAAA;MAAA,CAAAxD,cAAA,GAAAG,CAAA,QAAG,MAAMoD,OAAO,CAACE,OAAO,CAAC;QACvC5C,IAAI,EAAEY,MAAM;QACZX,WAAW,EAAEQ,aAAa;QAC1BoC,MAAM,EAAE;MACV,CAAC,CAAC;MAAC;MAAA1D,cAAA,GAAAG,CAAA;MAEH,IAAI,CAACqD,UAAU,EAAE;QAAA;QAAAxD,cAAA,GAAAe,CAAA;QAAAf,cAAA,GAAAG,CAAA;QACf,OAAO;UAAEkD,SAAS,EAAE,KAAK;UAAEC,MAAM,EAAE;QAA+C,CAAC;MACrF,CAAC;MAAA;MAAA;QAAAtD,cAAA,GAAAe,CAAA;MAAA;MAAAf,cAAA,GAAAG,CAAA;MAED,OAAO;QAAEkD,SAAS,EAAE;MAAK,CAAC;IAC5B,CAAC,CAAC,OAAOjC,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAAG,CAAA;MACd,MAAMiB,KAAK;IACb;EACF;;EAEA;EACA,MAAMuC,wBAAwBA,CAACrC,aAAa,EAAEsC,IAAI;EAAA;EAAA,CAAA5D,cAAA,GAAAe,CAAA,UAAG,CAAC,GAAEgB,KAAK;EAAA;EAAA,CAAA/B,cAAA,GAAAe,CAAA,UAAG,EAAE,GAAE;IAAA;IAAAf,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAG,CAAA;IAClE,IAAI;MACF,MAAM0D,OAAO;MAAA;MAAA,CAAA7D,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACI,UAAU,CAACgB,iBAAiB,CAACD,aAAa,CAAC;MACtE,MAAMwC,UAAU;MAAA;MAAA,CAAA9D,cAAA,GAAAG,CAAA,QAAG,CAACyD,IAAI,GAAG,CAAC,IAAI7B,KAAK;MACrC,MAAMgC,QAAQ;MAAA;MAAA,CAAA/D,cAAA,GAAAG,CAAA,QAAG2D,UAAU,GAAG/B,KAAK;MAEnC,MAAMiC,gBAAgB;MAAA;MAAA,CAAAhE,cAAA,GAAAG,CAAA,QAAG0D,OAAO,CAACI,KAAK,CAACH,UAAU,EAAEC,QAAQ,CAAC;MAAC;MAAA/D,cAAA,GAAAG,CAAA;MAE7D,OAAO;QACL0D,OAAO,EAAEG,gBAAgB;QACzBE,UAAU,EAAE;UACVN,IAAI;UACJ7B,KAAK;UACLoC,KAAK,EAAEN,OAAO,CAACO,MAAM;UACrBC,KAAK,EAAEC,IAAI,CAACC,IAAI,CAACV,OAAO,CAACO,MAAM,GAAGrC,KAAK;QACzC;MACF,CAAC;IACH,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAAG,CAAA;MACd,MAAMiB,KAAK;IACb;EACF;AACF;AAAC;AAAApB,cAAA,GAAAG,CAAA;AAEDqE,MAAM,CAACC,OAAO,GAAGpE,aAAa","ignoreList":[]}