a3f6d1912789cac9d7a712d5d635c850
/* istanbul ignore next */
function cov_yy5jl5i23() {
  var path = "/Users/mfarsx/dev/tripvar/tripvar-server/src/config/database.js";
  var hash = "967ff064ad694720f88eb15902f27ae08da22ef1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/mfarsx/dev/tripvar/tripvar-server/src/config/database.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 1,
          column: 36
        }
      },
      "1": {
        start: {
          line: 2,
          column: 30
        },
        end: {
          line: 2,
          column: 56
        }
      },
      "2": {
        start: {
          line: 3,
          column: 15
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 76,
          column: 1
        }
      },
      "4": {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 75,
          column: 3
        }
      },
      "5": {
        start: {
          line: 7,
          column: 25
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "6": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 12,
          column: 5
        }
      },
      "7": {
        start: {
          line: 11,
          column: 6
        },
        end: {
          line: 11,
          column: 77
        }
      },
      "8": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 20,
          column: 7
        }
      },
      "9": {
        start: {
          line: 16,
          column: 6
        },
        end: {
          line: 19,
          column: 9
        }
      },
      "10": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 28,
          column: 7
        }
      },
      "11": {
        start: {
          line: 23,
          column: 6
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "12": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 7
        }
      },
      "13": {
        start: {
          line: 31,
          column: 6
        },
        end: {
          line: 31,
          column: 35
        }
      },
      "14": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 36,
          column: 7
        }
      },
      "15": {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 34
        }
      },
      "16": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 39
        }
      },
      "17": {
        start: {
          line: 42,
          column: 30
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "18": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 52,
          column: 7
        }
      },
      "19": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 60
        }
      },
      "20": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 67,
          column: 7
        }
      },
      "21": {
        start: {
          line: 59,
          column: 6
        },
        end: {
          line: 66,
          column: 7
        }
      },
      "22": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 42
        }
      },
      "23": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 66
        }
      },
      "24": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 24
        }
      },
      "25": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 74
        }
      },
      "26": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 24
        }
      },
      "27": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 73,
          column: 7
        }
      },
      "28": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 74,
          column: 14
        }
      },
      "29": {
        start: {
          line: 78,
          column: 0
        },
        end: {
          line: 78,
          column: 27
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 19
          }
        },
        loc: {
          start: {
            line: 5,
            column: 29
          },
          end: {
            line: 76,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 40
          },
          end: {
            line: 15,
            column: 41
          }
        },
        loc: {
          start: {
            line: 15,
            column: 46
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 36
          },
          end: {
            line: 22,
            column: 37
          }
        },
        loc: {
          start: {
            line: 22,
            column: 45
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 30,
            column: 43
          },
          end: {
            line: 30,
            column: 44
          }
        },
        loc: {
          start: {
            line: 30,
            column: 49
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 34,
            column: 42
          },
          end: {
            line: 34,
            column: 43
          }
        },
        loc: {
          start: {
            line: 34,
            column: 48
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 34
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 58,
            column: 25
          },
          end: {
            line: 58,
            column: 26
          }
        },
        loc: {
          start: {
            line: 58,
            column: 36
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 58
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 72,
            column: 13
          },
          end: {
            line: 72,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 43
          },
          end: {
            line: 72,
            column: 52
          }
        }, {
          start: {
            line: 72,
            column: 55
          },
          end: {
            line: 72,
            column: 64
          }
        }],
        line: 72
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "967ff064ad694720f88eb15902f27ae08da22ef1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_yy5jl5i23 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_yy5jl5i23();
const mongoose =
/* istanbul ignore next */
(cov_yy5jl5i23().s[0]++, require('mongoose'));
const {
  info,
  error,
  warn
} =
/* istanbul ignore next */
(cov_yy5jl5i23().s[1]++, require('../utils/logger'));
const config =
/* istanbul ignore next */
(cov_yy5jl5i23().s[2]++, require('./config'));
/* istanbul ignore next */
cov_yy5jl5i23().s[3]++;
const connectDB = async () => {
  /* istanbul ignore next */
  cov_yy5jl5i23().f[0]++;
  cov_yy5jl5i23().s[4]++;
  try {
    const {
      database
    } =
    /* istanbul ignore next */
    (cov_yy5jl5i23().s[5]++, config);

    // Validate MongoDB URI
    /* istanbul ignore next */
    cov_yy5jl5i23().s[6]++;
    if (!database.uri) {
      /* istanbul ignore next */
      cov_yy5jl5i23().b[0][0]++;
      cov_yy5jl5i23().s[7]++;
      throw new Error('MONGODB_URI is not defined in environment variables');
    } else
    /* istanbul ignore next */
    {
      cov_yy5jl5i23().b[0][1]++;
    }

    // Connection event handlers
    cov_yy5jl5i23().s[8]++;
    mongoose.connection.on('connected', () => {
      /* istanbul ignore next */
      cov_yy5jl5i23().f[1]++;
      cov_yy5jl5i23().s[9]++;
      info('MongoDB connected successfully', {
        uri: database.uri.replace(/\/\/.*@/, '//***:***@'),
        // Hide credentials in logs
        nodeEnv: config.server.nodeEnv
      });
    });
    /* istanbul ignore next */
    cov_yy5jl5i23().s[10]++;
    mongoose.connection.on('error', err => {
      /* istanbul ignore next */
      cov_yy5jl5i23().f[2]++;
      cov_yy5jl5i23().s[11]++;
      error('MongoDB connection error', {
        error: err.message,
        code: err.code,
        name: err.name
      });
    });
    /* istanbul ignore next */
    cov_yy5jl5i23().s[12]++;
    mongoose.connection.on('disconnected', () => {
      /* istanbul ignore next */
      cov_yy5jl5i23().f[3]++;
      cov_yy5jl5i23().s[13]++;
      warn('MongoDB disconnected');
    });
    /* istanbul ignore next */
    cov_yy5jl5i23().s[14]++;
    mongoose.connection.on('reconnected', () => {
      /* istanbul ignore next */
      cov_yy5jl5i23().f[4]++;
      cov_yy5jl5i23().s[15]++;
      info('MongoDB reconnected');
    });

    // Set mongoose options
    /* istanbul ignore next */
    cov_yy5jl5i23().s[16]++;
    mongoose.set('strictQuery', false);

    // Enhanced connection options
    const connectionOptions =
    /* istanbul ignore next */
    (cov_yy5jl5i23().s[17]++, {
      ...database.options,
      authSource: 'tripvar',
      // Specify authentication database
      retryWrites: true,
      w: 'majority'
    });
    /* istanbul ignore next */
    cov_yy5jl5i23().s[18]++;
    info('Attempting to connect to MongoDB', {
      uri: database.uri.replace(/\/\/.*@/, '//***:***@'),
      options: connectionOptions
    });

    // Connect with configuration
    /* istanbul ignore next */
    cov_yy5jl5i23().s[19]++;
    await mongoose.connect(database.uri, connectionOptions);

    // Graceful shutdown
    /* istanbul ignore next */
    cov_yy5jl5i23().s[20]++;
    process.on('SIGINT', async () => {
      /* istanbul ignore next */
      cov_yy5jl5i23().f[5]++;
      cov_yy5jl5i23().s[21]++;
      try {
        /* istanbul ignore next */
        cov_yy5jl5i23().s[22]++;
        await mongoose.connection.close();
        /* istanbul ignore next */
        cov_yy5jl5i23().s[23]++;
        info('MongoDB connection closed through app termination');
        /* istanbul ignore next */
        cov_yy5jl5i23().s[24]++;
        process.exit(0);
      } catch (err) {
        /* istanbul ignore next */
        cov_yy5jl5i23().s[25]++;
        error('Error closing MongoDB connection', {
          error: err.message
        });
        /* istanbul ignore next */
        cov_yy5jl5i23().s[26]++;
        process.exit(1);
      }
    });
  } catch (err) {
    /* istanbul ignore next */
    cov_yy5jl5i23().s[27]++;
    error('Failed to connect to MongoDB', {
      error: err.message,
      stack: config.server.isDevelopment ?
      /* istanbul ignore next */
      (cov_yy5jl5i23().b[1][0]++, err.stack) :
      /* istanbul ignore next */
      (cov_yy5jl5i23().b[1][1]++, undefined)
    });
    /* istanbul ignore next */
    cov_yy5jl5i23().s[28]++;
    throw err;
  }
};
/* istanbul ignore next */
cov_yy5jl5i23().s[29]++;
module.exports = connectDB;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,