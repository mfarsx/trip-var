5359c167f3de58734abc782699f5de5a
const BaseRepository = require('./base.repository');
const User = require('../models/user.model');
const {
  NotFoundError,
  ValidationError
} = require('../utils/errors');
class UserRepository extends BaseRepository {
  constructor() {
    super(User);
  }

  /**
   * Find user by email
   * @param {string} email - User email
   * @param {Object} options - Query options
   * @returns {Promise<Object|null>} Found user
   */
  async findByEmail(email, options = {}) {
    return this.findOne({
      email: email.toLowerCase()
    }, options);
  }

  /**
   * Find user by email with password
   * @param {string} email - User email
   * @returns {Promise<Object|null>} Found user with password
   */
  async findByEmailWithPassword(email) {
    return this.findOne({
      email: email.toLowerCase()
    }, {
      select: '+password'
    });
  }

  /**
   * Find active users
   * @param {Object} criteria - Search criteria
   * @param {Object} options - Query options
   * @returns {Promise<Array>} Active users
   */
  async findActive(criteria = {}, options = {}) {
    return this.find({
      ...criteria,
      active: true
    }, options);
  }

  /**
   * Find active users with pagination
   * @param {Object} criteria - Search criteria
   * @param {Object} options - Query options
   * @returns {Promise<Object>} Paginated active users
   */
  async findActiveWithPagination(criteria = {}, options = {}) {
    return this.findWithPagination({
      ...criteria,
      active: true
    }, options);
  }

  /**
   * Update user password
   * @param {string} userId - User ID
   * @param {string} newPassword - New password
   * @returns {Promise<Object>} Updated user
   */
  async updatePassword(userId, newPassword) {
    return this.updateById(userId, {
      password: newPassword,
      passwordChangedAt: new Date()
    });
  }

  /**
   * Add favorite destination
   * @param {string} userId - User ID
   * @param {string} destinationId - Destination ID
   * @returns {Promise<Object>} Updated user
   */
  async addFavorite(userId, destinationId) {
    return this.updateById(userId, {
      $addToSet: {
        favorites: destinationId
      }
    });
  }

  /**
   * Remove favorite destination
   * @param {string} userId - User ID
   * @param {string} destinationId - Destination ID
   * @returns {Promise<Object>} Updated user
   */
  async removeFavorite(userId, destinationId) {
    return this.updateById(userId, {
      $pull: {
        favorites: destinationId
      }
    });
  }

  /**
   * Toggle favorite destination
   * @param {string} userId - User ID
   * @param {string} destinationId - Destination ID
   * @returns {Promise<Object>} Updated user and favorite status
   */
  async toggleFavorite(userId, destinationId) {
    const user = await this.findById(userId);
    if (!user) {
      throw new NotFoundError('User not found');
    }
    const isFavorite = user.favorites.includes(destinationId);
    if (isFavorite) {
      await this.removeFavorite(userId, destinationId);
    } else {
      await this.addFavorite(userId, destinationId);
    }

    // Get updated user
    const updatedUser = await this.findById(userId);
    return {
      user: updatedUser,
      isFavorite: !isFavorite
    };
  }

  /**
   * Get user favorites with populated destination data
   * @param {string} userId - User ID
   * @returns {Promise<Array>} User favorites
   */
  async getFavorites(userId) {
    const user = await this.findById(userId, {
      populate: 'favorites',
      select: 'favorites'
    });
    if (!user) {
      throw new NotFoundError('User not found');
    }
    return user.favorites;
  }

  /**
   * Soft delete user (set active to false)
   * @param {string} userId - User ID
   * @returns {Promise<Object>} Updated user
   */
  async softDelete(userId) {
    return this.updateById(userId, {
      active: false
    });
  }

  /**
   * Restore soft deleted user
   * @param {string} userId - User ID
   * @returns {Promise<Object>} Updated user
   */
  async restore(userId) {
    return this.updateById(userId, {
      active: true
    });
  }

  /**
   * Get user statistics
   * @returns {Promise<Object>} User statistics
   */
  async getStatistics() {
    const pipeline = [{
      $group: {
        _id: null,
        totalUsers: {
          $sum: 1
        },
        activeUsers: {
          $sum: {
            $cond: [{
              $eq: ['$active', true]
            }, 1, 0]
          }
        },
        inactiveUsers: {
          $sum: {
            $cond: [{
              $eq: ['$active', false]
            }, 1, 0]
          }
        },
        usersWithFavorites: {
          $sum: {
            $cond: [{
              $gt: [{
                $size: '$favorites'
              }, 0]
            }, 1, 0]
          }
        }
      }
    }];
    const result = await this.aggregate(pipeline);
    return result[0] || {
      totalUsers: 0,
      activeUsers: 0,
      inactiveUsers: 0,
      usersWithFavorites: 0
    };
  }

  /**
   * Get users by role
   * @param {string} role - User role
   * @param {Object} options - Query options
   * @returns {Promise<Array>} Users with specified role
   */
  async findByRole(role, options = {}) {
    return this.find({
      role
    }, options);
  }

  /**
   * Update user role
   * @param {string} userId - User ID
   * @param {string} role - New role
   * @returns {Promise<Object>} Updated user
   */
  async updateRole(userId, role) {
    const allowedRoles = ['user', 'admin'];
    if (!allowedRoles.includes(role)) {
      throw new ValidationError(`Invalid role. Allowed roles: ${allowedRoles.join(', ')}`);
    }
    return this.updateById(userId, {
      role
    });
  }

  /**
   * Search users by name or email
   * @param {string} searchTerm - Search term
   * @param {Object} options - Query options
   * @returns {Promise<Array>} Matching users
   */
  async search(searchTerm, options = {}) {
    const searchCriteria = {
      $or: [{
        name: {
          $regex: searchTerm,
          $options: 'i'
        }
      }, {
        email: {
          $regex: searchTerm,
          $options: 'i'
        }
      }]
    };
    return this.find(searchCriteria, options);
  }

  /**
   * Get users created in date range
   * @param {Date} startDate - Start date
   * @param {Date} endDate - End date
   * @param {Object} options - Query options
   * @returns {Promise<Array>} Users created in range
   */
  async findByDateRange(startDate, endDate, options = {}) {
    const criteria = {
      createdAt: {
        $gte: startDate,
        $lte: endDate
      }
    };
    return this.find(criteria, options);
  }

  /**
   * Get users with most favorites
   * @param {number} limit - Number of users to return
   * @returns {Promise<Array>} Users with most favorites
   */
  async getTopUsersByFavorites(limit = 10) {
    const pipeline = [{
      $addFields: {
        favoritesCount: {
          $size: '$favorites'
        }
      }
    }, {
      $sort: {
        favoritesCount: -1
      }
    }, {
      $limit: limit
    }, {
      $project: {
        name: 1,
        email: 1,
        favoritesCount: 1,
        createdAt: 1
      }
    }];
    return this.aggregate(pipeline);
  }
}
module.exports = new UserRepository();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCYXNlUmVwb3NpdG9yeSIsInJlcXVpcmUiLCJVc2VyIiwiTm90Rm91bmRFcnJvciIsIlZhbGlkYXRpb25FcnJvciIsIlVzZXJSZXBvc2l0b3J5IiwiY29uc3RydWN0b3IiLCJmaW5kQnlFbWFpbCIsImVtYWlsIiwib3B0aW9ucyIsImZpbmRPbmUiLCJ0b0xvd2VyQ2FzZSIsImZpbmRCeUVtYWlsV2l0aFBhc3N3b3JkIiwic2VsZWN0IiwiZmluZEFjdGl2ZSIsImNyaXRlcmlhIiwiZmluZCIsImFjdGl2ZSIsImZpbmRBY3RpdmVXaXRoUGFnaW5hdGlvbiIsImZpbmRXaXRoUGFnaW5hdGlvbiIsInVwZGF0ZVBhc3N3b3JkIiwidXNlcklkIiwibmV3UGFzc3dvcmQiLCJ1cGRhdGVCeUlkIiwicGFzc3dvcmQiLCJwYXNzd29yZENoYW5nZWRBdCIsIkRhdGUiLCJhZGRGYXZvcml0ZSIsImRlc3RpbmF0aW9uSWQiLCIkYWRkVG9TZXQiLCJmYXZvcml0ZXMiLCJyZW1vdmVGYXZvcml0ZSIsIiRwdWxsIiwidG9nZ2xlRmF2b3JpdGUiLCJ1c2VyIiwiZmluZEJ5SWQiLCJpc0Zhdm9yaXRlIiwiaW5jbHVkZXMiLCJ1cGRhdGVkVXNlciIsImdldEZhdm9yaXRlcyIsInBvcHVsYXRlIiwic29mdERlbGV0ZSIsInJlc3RvcmUiLCJnZXRTdGF0aXN0aWNzIiwicGlwZWxpbmUiLCIkZ3JvdXAiLCJfaWQiLCJ0b3RhbFVzZXJzIiwiJHN1bSIsImFjdGl2ZVVzZXJzIiwiJGNvbmQiLCIkZXEiLCJpbmFjdGl2ZVVzZXJzIiwidXNlcnNXaXRoRmF2b3JpdGVzIiwiJGd0IiwiJHNpemUiLCJyZXN1bHQiLCJhZ2dyZWdhdGUiLCJmaW5kQnlSb2xlIiwicm9sZSIsInVwZGF0ZVJvbGUiLCJhbGxvd2VkUm9sZXMiLCJqb2luIiwic2VhcmNoIiwic2VhcmNoVGVybSIsInNlYXJjaENyaXRlcmlhIiwiJG9yIiwibmFtZSIsIiRyZWdleCIsIiRvcHRpb25zIiwiZmluZEJ5RGF0ZVJhbmdlIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsImNyZWF0ZWRBdCIsIiRndGUiLCIkbHRlIiwiZ2V0VG9wVXNlcnNCeUZhdm9yaXRlcyIsImxpbWl0IiwiJGFkZEZpZWxkcyIsImZhdm9yaXRlc0NvdW50IiwiJHNvcnQiLCIkbGltaXQiLCIkcHJvamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ1c2VyLnJlcG9zaXRvcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQmFzZVJlcG9zaXRvcnkgPSByZXF1aXJlKCcuL2Jhc2UucmVwb3NpdG9yeScpO1xuY29uc3QgVXNlciA9IHJlcXVpcmUoJy4uL21vZGVscy91c2VyLm1vZGVsJyk7XG5jb25zdCB7IE5vdEZvdW5kRXJyb3IsIFZhbGlkYXRpb25FcnJvciB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvZXJyb3JzJyk7XG5cbmNsYXNzIFVzZXJSZXBvc2l0b3J5IGV4dGVuZHMgQmFzZVJlcG9zaXRvcnkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihVc2VyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIHVzZXIgYnkgZW1haWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVtYWlsIC0gVXNlciBlbWFpbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFF1ZXJ5IG9wdGlvbnNcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0fG51bGw+fSBGb3VuZCB1c2VyXG4gICAqL1xuICBhc3luYyBmaW5kQnlFbWFpbChlbWFpbCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZmluZE9uZSh7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgdXNlciBieSBlbWFpbCB3aXRoIHBhc3N3b3JkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbWFpbCAtIFVzZXIgZW1haWxcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0fG51bGw+fSBGb3VuZCB1c2VyIHdpdGggcGFzc3dvcmRcbiAgICovXG4gIGFzeW5jIGZpbmRCeUVtYWlsV2l0aFBhc3N3b3JkKGVtYWlsKSB7XG4gICAgcmV0dXJuIHRoaXMuZmluZE9uZShcbiAgICAgIHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCkgfSxcbiAgICAgIHsgc2VsZWN0OiAnK3Bhc3N3b3JkJyB9XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGFjdGl2ZSB1c2Vyc1xuICAgKiBAcGFyYW0ge09iamVjdH0gY3JpdGVyaWEgLSBTZWFyY2ggY3JpdGVyaWFcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBRdWVyeSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gQWN0aXZlIHVzZXJzXG4gICAqL1xuICBhc3luYyBmaW5kQWN0aXZlKGNyaXRlcmlhID0ge30sIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmZpbmQoeyAuLi5jcml0ZXJpYSwgYWN0aXZlOiB0cnVlIH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYWN0aXZlIHVzZXJzIHdpdGggcGFnaW5hdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gY3JpdGVyaWEgLSBTZWFyY2ggY3JpdGVyaWFcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBRdWVyeSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFBhZ2luYXRlZCBhY3RpdmUgdXNlcnNcbiAgICovXG4gIGFzeW5jIGZpbmRBY3RpdmVXaXRoUGFnaW5hdGlvbihjcml0ZXJpYSA9IHt9LCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5maW5kV2l0aFBhZ2luYXRpb24oeyAuLi5jcml0ZXJpYSwgYWN0aXZlOiB0cnVlIH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB1c2VyIHBhc3N3b3JkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWQgLSBVc2VyIElEXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdQYXNzd29yZCAtIE5ldyBwYXNzd29yZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBVcGRhdGVkIHVzZXJcbiAgICovXG4gIGFzeW5jIHVwZGF0ZVBhc3N3b3JkKHVzZXJJZCwgbmV3UGFzc3dvcmQpIHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVCeUlkKHVzZXJJZCwge1xuICAgICAgcGFzc3dvcmQ6IG5ld1Bhc3N3b3JkLFxuICAgICAgcGFzc3dvcmRDaGFuZ2VkQXQ6IG5ldyBEYXRlKClcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgZmF2b3JpdGUgZGVzdGluYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZCAtIFVzZXIgSURcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRlc3RpbmF0aW9uSWQgLSBEZXN0aW5hdGlvbiBJRFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBVcGRhdGVkIHVzZXJcbiAgICovXG4gIGFzeW5jIGFkZEZhdm9yaXRlKHVzZXJJZCwgZGVzdGluYXRpb25JZCkge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZUJ5SWQodXNlcklkLCB7XG4gICAgICAkYWRkVG9TZXQ6IHsgZmF2b3JpdGVzOiBkZXN0aW5hdGlvbklkIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgZmF2b3JpdGUgZGVzdGluYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZCAtIFVzZXIgSURcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRlc3RpbmF0aW9uSWQgLSBEZXN0aW5hdGlvbiBJRFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBVcGRhdGVkIHVzZXJcbiAgICovXG4gIGFzeW5jIHJlbW92ZUZhdm9yaXRlKHVzZXJJZCwgZGVzdGluYXRpb25JZCkge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZUJ5SWQodXNlcklkLCB7XG4gICAgICAkcHVsbDogeyBmYXZvcml0ZXM6IGRlc3RpbmF0aW9uSWQgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZSBmYXZvcml0ZSBkZXN0aW5hdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcklkIC0gVXNlciBJRFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGVzdGluYXRpb25JZCAtIERlc3RpbmF0aW9uIElEXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFVwZGF0ZWQgdXNlciBhbmQgZmF2b3JpdGUgc3RhdHVzXG4gICAqL1xuICBhc3luYyB0b2dnbGVGYXZvcml0ZSh1c2VySWQsIGRlc3RpbmF0aW9uSWQpIHtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5maW5kQnlJZCh1c2VySWQpO1xuXG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgTm90Rm91bmRFcnJvcignVXNlciBub3QgZm91bmQnKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zhdm9yaXRlID0gdXNlci5mYXZvcml0ZXMuaW5jbHVkZXMoZGVzdGluYXRpb25JZCk7XG5cbiAgICBpZiAoaXNGYXZvcml0ZSkge1xuICAgICAgYXdhaXQgdGhpcy5yZW1vdmVGYXZvcml0ZSh1c2VySWQsIGRlc3RpbmF0aW9uSWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLmFkZEZhdm9yaXRlKHVzZXJJZCwgZGVzdGluYXRpb25JZCk7XG4gICAgfVxuXG4gICAgLy8gR2V0IHVwZGF0ZWQgdXNlclxuICAgIGNvbnN0IHVwZGF0ZWRVc2VyID0gYXdhaXQgdGhpcy5maW5kQnlJZCh1c2VySWQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXI6IHVwZGF0ZWRVc2VyLFxuICAgICAgaXNGYXZvcml0ZTogIWlzRmF2b3JpdGVcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB1c2VyIGZhdm9yaXRlcyB3aXRoIHBvcHVsYXRlZCBkZXN0aW5hdGlvbiBkYXRhXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWQgLSBVc2VyIElEXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gVXNlciBmYXZvcml0ZXNcbiAgICovXG4gIGFzeW5jIGdldEZhdm9yaXRlcyh1c2VySWQpIHtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5maW5kQnlJZCh1c2VySWQsIHtcbiAgICAgIHBvcHVsYXRlOiAnZmF2b3JpdGVzJyxcbiAgICAgIHNlbGVjdDogJ2Zhdm9yaXRlcydcbiAgICB9KTtcblxuICAgIGlmICghdXNlcikge1xuICAgICAgdGhyb3cgbmV3IE5vdEZvdW5kRXJyb3IoJ1VzZXIgbm90IGZvdW5kJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVzZXIuZmF2b3JpdGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNvZnQgZGVsZXRlIHVzZXIgKHNldCBhY3RpdmUgdG8gZmFsc2UpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWQgLSBVc2VyIElEXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFVwZGF0ZWQgdXNlclxuICAgKi9cbiAgYXN5bmMgc29mdERlbGV0ZSh1c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVCeUlkKHVzZXJJZCwgeyBhY3RpdmU6IGZhbHNlIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RvcmUgc29mdCBkZWxldGVkIHVzZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZCAtIFVzZXIgSURcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gVXBkYXRlZCB1c2VyXG4gICAqL1xuICBhc3luYyByZXN0b3JlKHVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZUJ5SWQodXNlcklkLCB7IGFjdGl2ZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdXNlciBzdGF0aXN0aWNzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFVzZXIgc3RhdGlzdGljc1xuICAgKi9cbiAgYXN5bmMgZ2V0U3RhdGlzdGljcygpIHtcbiAgICBjb25zdCBwaXBlbGluZSA9IFtcbiAgICAgIHtcbiAgICAgICAgJGdyb3VwOiB7XG4gICAgICAgICAgX2lkOiBudWxsLFxuICAgICAgICAgIHRvdGFsVXNlcnM6IHsgJHN1bTogMSB9LFxuICAgICAgICAgIGFjdGl2ZVVzZXJzOiB7XG4gICAgICAgICAgICAkc3VtOiB7ICRjb25kOiBbeyAkZXE6IFsnJGFjdGl2ZScsIHRydWVdIH0sIDEsIDBdIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGluYWN0aXZlVXNlcnM6IHtcbiAgICAgICAgICAgICRzdW06IHsgJGNvbmQ6IFt7ICRlcTogWyckYWN0aXZlJywgZmFsc2VdIH0sIDEsIDBdIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHVzZXJzV2l0aEZhdm9yaXRlczoge1xuICAgICAgICAgICAgJHN1bTogeyAkY29uZDogW3sgJGd0OiBbeyAkc2l6ZTogJyRmYXZvcml0ZXMnIH0sIDBdIH0sIDEsIDBdIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5hZ2dyZWdhdGUocGlwZWxpbmUpO1xuICAgIHJldHVybiByZXN1bHRbMF0gfHwge1xuICAgICAgdG90YWxVc2VyczogMCxcbiAgICAgIGFjdGl2ZVVzZXJzOiAwLFxuICAgICAgaW5hY3RpdmVVc2VyczogMCxcbiAgICAgIHVzZXJzV2l0aEZhdm9yaXRlczogMFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IHVzZXJzIGJ5IHJvbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvbGUgLSBVc2VyIHJvbGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBRdWVyeSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gVXNlcnMgd2l0aCBzcGVjaWZpZWQgcm9sZVxuICAgKi9cbiAgYXN5bmMgZmluZEJ5Um9sZShyb2xlLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5maW5kKHsgcm9sZSB9LCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdXNlciByb2xlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWQgLSBVc2VyIElEXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb2xlIC0gTmV3IHJvbGVcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gVXBkYXRlZCB1c2VyXG4gICAqL1xuICBhc3luYyB1cGRhdGVSb2xlKHVzZXJJZCwgcm9sZSkge1xuICAgIGNvbnN0IGFsbG93ZWRSb2xlcyA9IFsndXNlcicsICdhZG1pbiddO1xuXG4gICAgaWYgKCFhbGxvd2VkUm9sZXMuaW5jbHVkZXMocm9sZSkpIHtcbiAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYEludmFsaWQgcm9sZS4gQWxsb3dlZCByb2xlczogJHthbGxvd2VkUm9sZXMuam9pbignLCAnKX1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy51cGRhdGVCeUlkKHVzZXJJZCwgeyByb2xlIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlYXJjaCB1c2VycyBieSBuYW1lIG9yIGVtYWlsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWFyY2hUZXJtIC0gU2VhcmNoIHRlcm1cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBRdWVyeSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gTWF0Y2hpbmcgdXNlcnNcbiAgICovXG4gIGFzeW5jIHNlYXJjaChzZWFyY2hUZXJtLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBzZWFyY2hDcml0ZXJpYSA9IHtcbiAgICAgICRvcjogW1xuICAgICAgICB7IG5hbWU6IHsgJHJlZ2V4OiBzZWFyY2hUZXJtLCAkb3B0aW9uczogJ2knIH0gfSxcbiAgICAgICAgeyBlbWFpbDogeyAkcmVnZXg6IHNlYXJjaFRlcm0sICRvcHRpb25zOiAnaScgfSB9XG4gICAgICBdXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLmZpbmQoc2VhcmNoQ3JpdGVyaWEsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB1c2VycyBjcmVhdGVkIGluIGRhdGUgcmFuZ2VcbiAgICogQHBhcmFtIHtEYXRlfSBzdGFydERhdGUgLSBTdGFydCBkYXRlXG4gICAqIEBwYXJhbSB7RGF0ZX0gZW5kRGF0ZSAtIEVuZCBkYXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUXVlcnkgb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxBcnJheT59IFVzZXJzIGNyZWF0ZWQgaW4gcmFuZ2VcbiAgICovXG4gIGFzeW5jIGZpbmRCeURhdGVSYW5nZShzdGFydERhdGUsIGVuZERhdGUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGNyaXRlcmlhID0ge1xuICAgICAgY3JlYXRlZEF0OiB7XG4gICAgICAgICRndGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgJGx0ZTogZW5kRGF0ZVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5maW5kKGNyaXRlcmlhLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdXNlcnMgd2l0aCBtb3N0IGZhdm9yaXRlc1xuICAgKiBAcGFyYW0ge251bWJlcn0gbGltaXQgLSBOdW1iZXIgb2YgdXNlcnMgdG8gcmV0dXJuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gVXNlcnMgd2l0aCBtb3N0IGZhdm9yaXRlc1xuICAgKi9cbiAgYXN5bmMgZ2V0VG9wVXNlcnNCeUZhdm9yaXRlcyhsaW1pdCA9IDEwKSB7XG4gICAgY29uc3QgcGlwZWxpbmUgPSBbXG4gICAgICB7XG4gICAgICAgICRhZGRGaWVsZHM6IHtcbiAgICAgICAgICBmYXZvcml0ZXNDb3VudDogeyAkc2l6ZTogJyRmYXZvcml0ZXMnIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJHNvcnQ6IHsgZmF2b3JpdGVzQ291bnQ6IC0xIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICRsaW1pdDogbGltaXRcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICRwcm9qZWN0OiB7XG4gICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICBlbWFpbDogMSxcbiAgICAgICAgICBmYXZvcml0ZXNDb3VudDogMSxcbiAgICAgICAgICBjcmVhdGVkQXQ6IDFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF07XG5cbiAgICByZXR1cm4gdGhpcy5hZ2dyZWdhdGUocGlwZWxpbmUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFVzZXJSZXBvc2l0b3J5KCk7Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxjQUFjLEdBQUdDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztBQUNuRCxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztBQUM1QyxNQUFNO0VBQUVFLGFBQWE7RUFBRUM7QUFBZ0IsQ0FBQyxHQUFHSCxPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFFckUsTUFBTUksY0FBYyxTQUFTTCxjQUFjLENBQUM7RUFDMUNNLFdBQVdBLENBQUEsRUFBRztJQUNaLEtBQUssQ0FBQ0osSUFBSSxDQUFDO0VBQ2I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsTUFBTUssV0FBV0EsQ0FBQ0MsS0FBSyxFQUFFQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDckMsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQztNQUFFRixLQUFLLEVBQUVBLEtBQUssQ0FBQ0csV0FBVyxDQUFDO0lBQUUsQ0FBQyxFQUFFRixPQUFPLENBQUM7RUFDOUQ7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFLE1BQU1HLHVCQUF1QkEsQ0FBQ0osS0FBSyxFQUFFO0lBQ25DLE9BQU8sSUFBSSxDQUFDRSxPQUFPLENBQ2pCO01BQUVGLEtBQUssRUFBRUEsS0FBSyxDQUFDRyxXQUFXLENBQUM7SUFBRSxDQUFDLEVBQzlCO01BQUVFLE1BQU0sRUFBRTtJQUFZ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