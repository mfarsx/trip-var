{"version":3,"names":["cov_1y6t3e25u8","actualCoverage","BaseService","s","require","DestinationService","constructor","repository","f","searchDestinations","query","filters","b","error","getFeaturedDestinations","findFeatured","getPopularDestinations","limit","getPopular","findDestinationsByLocation","location","findByLocation","findDestinationsByCategory","category","findByCategory","findDestinationsByPriceRange","minPrice","maxPrice","findByPriceRange","updateDestinationRating","destinationId","newRating","updateRating","getDestinationStatistics","totalDestinations","count","featuredDestinations","featuredCount","length","averageRating","getAverageRating","destinations","find","totalRating","reduce","sum","dest","module","exports"],"sources":["destination.service.js"],"sourcesContent":["const BaseService = require('./base.service');\n\nclass DestinationService extends BaseService {\n  constructor(repository) {\n    super(repository);\n  }\n\n  // Search destinations\n  async searchDestinations(query, filters = {}) {\n    try {\n      return await this.repository.searchDestinations(query, filters);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get featured destinations\n  async getFeaturedDestinations() {\n    try {\n      return await this.repository.findFeatured();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get popular destinations\n  async getPopularDestinations(limit = 10) {\n    try {\n      return await this.repository.getPopular(limit);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find destinations by location\n  async findDestinationsByLocation(location) {\n    try {\n      return await this.repository.findByLocation(location);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find destinations by category\n  async findDestinationsByCategory(category) {\n    try {\n      return await this.repository.findByCategory(category);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find destinations by price range\n  async findDestinationsByPriceRange(minPrice, maxPrice) {\n    try {\n      return await this.repository.findByPriceRange(minPrice, maxPrice);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Update destination rating\n  async updateDestinationRating(destinationId, newRating) {\n    try {\n      return await this.repository.updateRating(destinationId, newRating);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get destination statistics\n  async getDestinationStatistics() {\n    try {\n      const totalDestinations = await this.repository.count();\n      const featuredDestinations = await this.repository.findFeatured();\n      \n      return {\n        totalDestinations,\n        featuredCount: featuredDestinations.length,\n        averageRating: await this.getAverageRating()\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get average rating across all destinations\n  async getAverageRating() {\n    try {\n      const destinations = await this.repository.find();\n      if (destinations.length === 0) return 0;\n      \n      const totalRating = destinations.reduce((sum, dest) => sum + (dest.averageRating || 0), 0);\n      return totalRating / destinations.length;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nmodule.exports = DestinationService;"],"mappings":"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","ignoreList":[]}