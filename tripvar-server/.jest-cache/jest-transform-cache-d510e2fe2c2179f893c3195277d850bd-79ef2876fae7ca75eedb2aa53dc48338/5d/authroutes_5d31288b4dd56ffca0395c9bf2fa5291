78c8b3a5ff7e3178ff1f7517c50b3bb9
const express = require('express');
const authController = require('../controllers/auth.controller');
const {
  protect
} = require('../middleware/auth');
const {
  securityConfig
} = require('../config/security');
const {
  validate,
  sanitize
} = require('../middleware/validation');
const {
  registerSchema,
  loginSchema,
  updateProfileSchema,
  updatePasswordSchema,
  toggleFavoriteSchema,
  paginationSchema
} = require('../validation/auth.validation');
const router = express.Router();

// Public routes with strict rate limiting and validation
router.post('/register', securityConfig.authLimiter, sanitize(), validate(registerSchema), authController.register);
router.post('/login', securityConfig.authLimiter, sanitize(), validate(loginSchema), authController.login);

// Protected routes (everything after this middleware requires authentication)
router.use(protect);

// Logout route
router.post('/logout', authController.logout);

// Get all users
router.get('/users', sanitize(), validate(paginationSchema), authController.getAllUsers);

// Profile routes
router.route('/profile').get(authController.getProfile).patch(sanitize(), validate(updateProfileSchema), authController.updateProfile).delete(authController.deleteAccount);

// Password update
router.patch('/update-password', sanitize(), validate(updatePasswordSchema), authController.updatePassword);

// Favorites routes
router.get('/favorites', authController.getFavorites);
router.post('/favorites/:destinationId', sanitize(), validate(toggleFavoriteSchema), authController.toggleFavorite);
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImF1dGhDb250cm9sbGVyIiwicHJvdGVjdCIsInNlY3VyaXR5Q29uZmlnIiwidmFsaWRhdGUiLCJzYW5pdGl6ZSIsInJlZ2lzdGVyU2NoZW1hIiwibG9naW5TY2hlbWEiLCJ1cGRhdGVQcm9maWxlU2NoZW1hIiwidXBkYXRlUGFzc3dvcmRTY2hlbWEiLCJ0b2dnbGVGYXZvcml0ZVNjaGVtYSIsInBhZ2luYXRpb25TY2hlbWEiLCJyb3V0ZXIiLCJSb3V0ZXIiLCJwb3N0IiwiYXV0aExpbWl0ZXIiLCJyZWdpc3RlciIsImxvZ2luIiwidXNlIiwibG9nb3V0IiwiZ2V0IiwiZ2V0QWxsVXNlcnMiLCJyb3V0ZSIsImdldFByb2ZpbGUiLCJwYXRjaCIsInVwZGF0ZVByb2ZpbGUiLCJkZWxldGUiLCJkZWxldGVBY2NvdW50IiwidXBkYXRlUGFzc3dvcmQiLCJnZXRGYXZvcml0ZXMiLCJ0b2dnbGVGYXZvcml0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJhdXRoLnJvdXRlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgYXV0aENvbnRyb2xsZXIgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycy9hdXRoLmNvbnRyb2xsZXInKTtcbmNvbnN0IHsgcHJvdGVjdCB9ID0gcmVxdWlyZSgnLi4vbWlkZGxld2FyZS9hdXRoJyk7XG5jb25zdCB7IHNlY3VyaXR5Q29uZmlnIH0gPSByZXF1aXJlKCcuLi9jb25maWcvc2VjdXJpdHknKTtcbmNvbnN0IHsgdmFsaWRhdGUsIHNhbml0aXplIH0gPSByZXF1aXJlKCcuLi9taWRkbGV3YXJlL3ZhbGlkYXRpb24nKTtcbmNvbnN0IHtcbiAgcmVnaXN0ZXJTY2hlbWEsXG4gIGxvZ2luU2NoZW1hLFxuICB1cGRhdGVQcm9maWxlU2NoZW1hLFxuICB1cGRhdGVQYXNzd29yZFNjaGVtYSxcbiAgdG9nZ2xlRmF2b3JpdGVTY2hlbWEsXG4gIHBhZ2luYXRpb25TY2hlbWFcbn0gPSByZXF1aXJlKCcuLi92YWxpZGF0aW9uL2F1dGgudmFsaWRhdGlvbicpO1xuXG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuXG4vLyBQdWJsaWMgcm91dGVzIHdpdGggc3RyaWN0IHJhdGUgbGltaXRpbmcgYW5kIHZhbGlkYXRpb25cbnJvdXRlci5wb3N0KCcvcmVnaXN0ZXInLFxuICBzZWN1cml0eUNvbmZpZy5hdXRoTGltaXRlcixcbiAgc2FuaXRpemUoKSxcbiAgdmFsaWRhdGUocmVnaXN0ZXJTY2hlbWEpLFxuICBhdXRoQ29udHJvbGxlci5yZWdpc3RlclxuKTtcblxucm91dGVyLnBvc3QoJy9sb2dpbicsXG4gIHNlY3VyaXR5Q29uZmlnLmF1dGhMaW1pdGVyLFxuICBzYW5pdGl6ZSgpLFxuICB2YWxpZGF0ZShsb2dpblNjaGVtYSksXG4gIGF1dGhDb250cm9sbGVyLmxvZ2luXG4pO1xuXG4vLyBQcm90ZWN0ZWQgcm91dGVzIChldmVyeXRoaW5nIGFmdGVyIHRoaXMgbWlkZGxld2FyZSByZXF1aXJlcyBhdXRoZW50aWNhdGlvbilcbnJvdXRlci51c2UocHJvdGVjdCk7XG5cbi8vIExvZ291dCByb3V0ZVxucm91dGVyLnBvc3QoJy9sb2dvdXQnLCBhdXRoQ29udHJvbGxlci5sb2dvdXQpO1xuXG4vLyBHZXQgYWxsIHVzZXJzXG5yb3V0ZXIuZ2V0KCcvdXNlcnMnLFxuICBzYW5pdGl6ZSgpLFxuICB2YWxpZGF0ZShwYWdpbmF0aW9uU2NoZW1hKSxcbiAgYXV0aENvbnRyb2xsZXIuZ2V0QWxsVXNlcnNcbik7XG5cbi8vIFByb2ZpbGUgcm91dGVzXG5yb3V0ZXJcbiAgLnJvdXRlKCcvcHJvZmlsZScpXG4gIC5nZXQoYXV0aENvbnRyb2xsZXIuZ2V0UHJvZmlsZSlcbiAgLnBhdGNoKFxuICAgIHNhbml0aXplKCksXG4gICAgdmFsaWRhdGUodXBkYXRlUHJvZmlsZVNjaGVtYSksXG4gICAgYXV0aENvbnRyb2xsZXIudXBkYXRlUHJvZmlsZVxuICApXG4gIC5kZWxldGUoYXV0aENvbnRyb2xsZXIuZGVsZXRlQWNjb3VudCk7XG5cbi8vIFBhc3N3b3JkIHVwZGF0ZVxucm91dGVyLnBhdGNoKCcvdXBkYXRlLXBhc3N3b3JkJyxcbiAgc2FuaXRpemUoKSxcbiAgdmFsaWRhdGUodXBkYXRlUGFzc3dvcmRTY2hlbWEpLFxuICBhdXRoQ29udHJvbGxlci51cGRhdGVQYXNzd29yZFxuKTtcblxuLy8gRmF2b3JpdGVzIHJvdXRlc1xucm91dGVyLmdldCgnL2Zhdm9yaXRlcycsIGF1dGhDb250cm9sbGVyLmdldEZhdm9yaXRlcyk7XG5yb3V0ZXIucG9zdCgnL2Zhdm9yaXRlcy86ZGVzdGluYXRpb25JZCcsXG4gIHNhbml0aXplKCksXG4gIHZhbGlkYXRlKHRvZ2dsZUZhdm9yaXRlU2NoZW1hKSxcbiAgYXV0aENvbnRyb2xsZXIudG9nZ2xlRmF2b3JpdGVcbik7XG5cbm1vZHVsZS5leHBvcnRzID0gcm91dGVyO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTUMsY0FBYyxHQUFHRCxPQUFPLENBQUMsZ0NBQWdDLENBQUM7QUFDaEUsTUFBTTtFQUFFRTtBQUFRLENBQUMsR0FBR0YsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBQ2pELE1BQU07RUFBRUc7QUFBZSxDQUFDLEdBQUdILE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUN4RCxNQUFNO0VBQUVJLFFBQVE7RUFBRUM7QUFBUyxDQUFDLEdBQUdMLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztBQUNsRSxNQUFNO0VBQ0pNLGNBQWM7RUFDZEMsV0FBVztFQUNYQyxtQkFBbUI7RUFDbkJDLG9CQUFvQjtFQUNwQkMsb0JBQW9CO0VBQ3BCQztBQUNGLENBQUMsR0FBR1gsT0FBTyxDQUFDLCtCQUErQixDQUFDO0FBRTVDLE1BQU1ZLE1BQU0sR0FBR2IsT0FBTyxDQUFDYyxNQUFNLENBQUMsQ0FBQzs7QUFFL0I7QUFDQUQsTUFBTSxDQUFDRSxJQUFJLENBQUMsV0FBVyxFQUNyQlgsY0FBYyxDQUFDWSxXQUFXLEVBQzFCVixRQUFRLENBQUMsQ0FBQyxFQUNWRCxRQUFRLENBQUNFLGNBQWMsQ0FBQyxFQUN4QkwsY0FBYyxDQUFDZSxRQUNqQixDQUFDO0FBRURKLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLFFBQVEsRUFDbEJYLGNBQWMsQ0FBQ1ksV0FBVyxFQUMxQlYsUUFBUSxDQUFDLENBQUMsRUFDVkQsUUFBUSxDQUFDRyxXQUFXLENBQUMsRUFDckJOLGNBQWMsQ0FBQ2dCLEtBQ2pCLENBQUM7O0FBRUQ7QUFDQUwsTUFBTSxDQUFDTSxHQUFHLENBQUNoQixPQUFPLENBQUM7O0FBRW5CO0FBQ0FVLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLFNBQVMsRUFBRWIsY0FBYyxDQUFDa0IsTUFBTSxDQUFDOztBQUU3QztBQUNBUCxNQUFNLENBQUNRLEdBQUcsQ0FBQyxRQUFRLEVBQ2pCZixRQUFRLENBQUMsQ0FBQyxFQUNWRCxRQUFRLENBQUNPLGdCQUFnQixDQUFDLEVBQzFCVixjQUFjLENBQUNvQixXQUNqQixDQUFDOztBQUVEO0FBQ0FULE1BQU0sQ0FDSFUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUNqQkYsR0FBRyxDQUFDbkIsY0FBYyxDQUFDc0IsVUFBVSxDQUFDLENBQzlCQyxLQUFLLENBQ0puQixRQUFRLENBQUMsQ0FBQyxFQUNWRCxRQUFRLENBQUNJLG1CQUFtQixDQUFDLEVBQzdCUCxjQUFjLENBQUN3QixhQUNqQixDQUFDLENBQ0FDLE1BQU0sQ0FBQ3pCLGNBQWMsQ0FBQzBCLGFBQWEsQ0FBQzs7QUFFdkM7QUFDQWYsTUFBTSxDQUFDWSxLQUFLLENBQUMsa0JBQWtCLEVBQzdCbkIsUUFBUSxDQUFDLENBQUMsRUFDVkQsUUFBUSxDQUFDSyxvQkFBb0IsQ0FBQyxFQUM5QlIsY0FBYyxDQUFDMkIsY0FDakIsQ0FBQzs7QUFFRDtBQUNBaEIsTUFBTSxDQUFDUSxHQUFHLENBQUMsWUFBWSxFQUFFbkIsY0FBYyxDQUFDNEIsWUFBWSxDQUFDO0FBQ3JEakIsTUFBTSxDQUFDRSxJQUFJLENBQUMsMkJBQTJCLEVBQ3JDVCxRQUFRLENBQUMsQ0FBQyxFQUNWRCxRQUFRLENBQUNNLG9CQUFvQixDQUFDLEVBQzlCVCxjQUFjLENBQUM2QixjQUNqQixDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHcEIsTUFBTSIsImlnbm9yZUxpc3QiOltdfQ==