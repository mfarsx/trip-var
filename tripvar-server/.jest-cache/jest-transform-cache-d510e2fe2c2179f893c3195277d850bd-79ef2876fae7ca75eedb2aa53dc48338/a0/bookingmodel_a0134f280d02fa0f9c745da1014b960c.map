{"version":3,"names":["cov_6fapnpyte","actualCoverage","mongoose","s","require","bookingSchema","Schema","user","type","Types","ObjectId","ref","required","destination","checkInDate","Date","validate","validator","v","f","message","checkOutDate","numberOfGuests","Number","min","max","pricePerNight","totalNights","totalAmount","paymentMethod","String","enum","values","paymentStatus","default","paymentIntentId","status","specialRequests","maxlength","contactEmail","lowercase","trim","test","contactPhone","cancelledAt","cancellationReason","refundAmount","refundedAt","timestamps","toJSON","virtuals","toObject","virtual","get","b","timeDiff","getTime","Math","ceil","_id","toString","slice","toUpperCase","pre","next","index","createdAt","statics","checkAvailability","destinationId","existingBookings","find","$in","$or","$lt","$gt","length","methods","calculateRefund","now","daysUntilCheckIn","Booking","model","module","exports"],"sources":["booking.model.js"],"sourcesContent":["const mongoose = require('mongoose');\n\nconst bookingSchema = new mongoose.Schema(\n  {\n    // User who made the booking\n    user: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'User',\n      required: [true, 'Booking must belong to a user']\n    },\n\n    // Destination being booked\n    destination: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Destination',\n      required: [true, 'Booking must be for a destination']\n    },\n\n    // Booking dates\n    checkInDate: {\n      type: Date,\n      required: [true, 'Check-in date is required'],\n      validate: {\n        validator: function(v) {\n          // Check-in date must be in the future\n          return v > new Date();\n        },\n        message: 'Check-in date must be in the future'\n      }\n    },\n\n    checkOutDate: {\n      type: Date,\n      required: [true, 'Check-out date is required'],\n      validate: {\n        validator: function(v) {\n          // Check-out date must be after check-in date\n          return v > this.checkInDate;\n        },\n        message: 'Check-out date must be after check-in date'\n      }\n    },\n\n    // Number of guests\n    numberOfGuests: {\n      type: Number,\n      required: [true, 'Number of guests is required'],\n      min: [1, 'At least 1 guest is required'],\n      max: [10, 'Maximum 10 guests allowed']\n    },\n\n    // Pricing information\n    pricePerNight: {\n      type: Number,\n      required: [true, 'Price per night is required'],\n      min: [0, 'Price cannot be negative']\n    },\n\n    totalNights: {\n      type: Number,\n      required: true,\n      min: [1, 'At least 1 night is required']\n    },\n\n    totalAmount: {\n      type: Number,\n      required: [true, 'Total amount is required'],\n      min: [0, 'Total amount cannot be negative']\n    },\n\n    // Payment information\n    paymentMethod: {\n      type: String,\n      required: [true, 'Payment method is required'],\n      enum: {\n        values: ['credit-card', 'paypal', 'bank-transfer'],\n        message: 'Payment method must be credit-card, paypal, or bank-transfer'\n      }\n    },\n\n    paymentStatus: {\n      type: String,\n      required: true,\n      enum: {\n        values: ['pending', 'paid', 'failed', 'refunded'],\n        message: 'Payment status must be pending, paid, failed, or refunded'\n      },\n      default: 'pending'\n    },\n\n    paymentIntentId: {\n      type: String,\n      required: false // Will be set when payment is processed\n    },\n\n    // Booking status\n    status: {\n      type: String,\n      required: true,\n      enum: {\n        values: ['confirmed', 'cancelled', 'completed', 'no-show'],\n        message: 'Status must be confirmed, cancelled, completed, or no-show'\n      },\n      default: 'confirmed'\n    },\n\n    // Additional information\n    specialRequests: {\n      type: String,\n      maxlength: [500, 'Special requests cannot exceed 500 characters'],\n      required: false\n    },\n\n    // Contact information for the booking\n    contactEmail: {\n      type: String,\n      required: [true, 'Contact email is required'],\n      lowercase: true,\n      trim: true,\n      validate: {\n        validator: function(v) {\n          return /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(v);\n        },\n        message: 'Please provide a valid email address'\n      }\n    },\n\n    contactPhone: {\n      type: String,\n      required: false,\n      trim: true\n    },\n\n    // Cancellation information\n    cancelledAt: {\n      type: Date,\n      required: false\n    },\n\n    cancellationReason: {\n      type: String,\n      required: false,\n      maxlength: [200, 'Cancellation reason cannot exceed 200 characters']\n    },\n\n    // Refund information\n    refundAmount: {\n      type: Number,\n      required: false,\n      min: [0, 'Refund amount cannot be negative']\n    },\n\n    refundedAt: {\n      type: Date,\n      required: false\n    }\n  },\n  {\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  }\n);\n\n// Virtual field for booking duration in days\nbookingSchema.virtual('duration').get(function() {\n  if (this.checkInDate && this.checkOutDate) {\n    const timeDiff = this.checkOutDate.getTime() - this.checkInDate.getTime();\n    return Math.ceil(timeDiff / (1000 * 3600 * 24));\n  }\n  return 0;\n});\n\n// Virtual field for booking reference number\nbookingSchema.virtual('bookingReference').get(function() {\n  return `TRV-${this._id.toString().slice(-8).toUpperCase()}`;\n});\n\n// Pre-save middleware to calculate total nights and amount\nbookingSchema.pre('save', function(next) {\n  if (this.checkInDate && this.checkOutDate && this.pricePerNight) {\n    const timeDiff = this.checkOutDate.getTime() - this.checkInDate.getTime();\n    this.totalNights = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    this.totalAmount = this.totalNights * this.pricePerNight * this.numberOfGuests;\n  }\n  next();\n});\n\n// Index for better query performance\nbookingSchema.index({ user: 1, createdAt: -1 });\nbookingSchema.index({ destination: 1, checkInDate: 1, checkOutDate: 1 });\nbookingSchema.index({ status: 1 });\nbookingSchema.index({ paymentStatus: 1 });\n\n// Static method to check availability\nbookingSchema.statics.checkAvailability = async function(destinationId, checkInDate, checkOutDate) {\n  const existingBookings = await this.find({\n    destination: destinationId,\n    status: { $in: ['confirmed', 'completed'] },\n    $or: [\n      {\n        checkInDate: { $lt: checkOutDate },\n        checkOutDate: { $gt: checkInDate }\n      }\n    ]\n  });\n\n  return existingBookings.length === 0;\n};\n\n// Instance method to calculate refund amount\nbookingSchema.methods.calculateRefund = function() {\n  if (this.status !== 'cancelled') {\n    return 0;\n  }\n\n  const now = new Date();\n  const daysUntilCheckIn = Math.ceil((this.checkInDate - now) / (1000 * 3600 * 24));\n\n  // Refund policy: 100% if cancelled 7+ days before, 50% if 3-6 days, 0% if less than 3 days\n  if (daysUntilCheckIn >= 7) {\n    return this.totalAmount;\n  } else if (daysUntilCheckIn >= 3) {\n    return this.totalAmount * 0.5;\n  } else {\n    return 0;\n  }\n};\n\nconst Booking = mongoose.model('Booking', bookingSchema);\n\nmodule.exports = Booking;"],"mappingseY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ,MAAME,QAAQ;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,UAAU,CAAC;AAEpC,MAAMC,aAAa;AAAA;AAAA,CAAAL,aAAA,GAAAG,CAAA,OAAG,IAAID,QAAQ,CAACI,MAAM,CACvC;EACE;EACAC,IAAI,EAAE;IACJC,IAAI,EAAEN,QAAQ,CAACI,MAAM,CAACG,KAAK,CAACC,QAAQ;IACpCC,GAAG,EAAE,MAAM;IACXC,QAAQ,EAAE,CAAC,IAAI,EAAE,+BAA+B;EAClD,CAAC;EAED;EACAC,WAAW,EAAE;IACXL,IAAI,EAAEN,QAAQ,CAACI,MAAM,CAACG,KAAK,CAACC,QAAQ;IACpCC,GAAG,EAAE,aAAa;IAClBC,QAAQ,EAAE,CAAC,IAAI,EAAE,mCAAmC;EACtD,CAAC;EAED;EACAE,WAAW,EAAE;IACXN,IAAI,EAAEO,IAAI;IACVH,QAAQ,EAAE,CAAC,IAAI,EAAE,2BAA2B,CAAC;IAC7CI,QAAQ,EAAE;MACRC,SAAS,EAAE,SAAAA,CAASC,CAAC,EAAE;QAAA;QAAAlB,aAAA,GAAAmB,CAAA;QAAAnB,aAAA,GAAAG,CAAA;QACrB;QACA,OAAOe,CAAC,GAAG,IAAIH,IAAI,CAAC,CAAC;MACvB,CAAC;MACDK,OAAO,EAAE;IACX;EACF,CAAC;EAEDC,YAAY,EAAE;IACZb,IAAI,EAAEO,IAAI;IACVH,QAAQ,EAAE,CAAC,IAAI,EAAE,4BAA4B,CAAC;IAC9CI,QAAQ,EAAE;MACRC,SAAS,EAAE,SAAAA,CAASC,CAAC,EAAE;QAAA;QAAAlB,aAAA,GAAAmB,CAAA;QAAAnB,aAAA,GAAAG,CAAA;QACrB;QACA,OAAOe,CAAC,GAAG,IAAI,CAACJ,WAAW;MAC7B,CAAC;MACDM,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAE,cAAc,EAAE;IACdd,IAAI,EAAEe,MAAM;IACZX,QAAQ,EAAE,CAAC,IAAI,EAAE,8BAA8B,CAAC;IAChDY,GAAG,EAAE,CAAC,CAAC,EAAE,8BAA8B,CAAC;IACxCC,GAAG,EAAE,CAAC,EAAE,EAAE,2BAA2B;EACvC,CAAC;EAED;EACAC,aAAa,EAAE;IACblB,IAAI,EAAEe,MAAM;IACZX,QAAQ,EAAE,CAAC,IAAI,EAAE,6BAA6B,CAAC;IAC/CY,GAAG,EAAE,CAAC,CAAC,EAAE,0BAA0B;EACrC,CAAC;EAEDG,WAAW,EAAE;IACXnB,IAAI,EAAEe,MAAM;IACZX,QAAQ,EAAE,IAAI;IACdY,GAAG,EAAE,CAAC,CAAC,EAAE,8BAA8B;EACzC,CAAC;EAEDI,WAAW,EAAE;IACXpB,IAAI,EAAEe,MAAM;IACZX,QAAQ,EAAE,CAAC,IAAI,EAAE,0BAA0B,CAAC;IAC5CY,GAAG,EAAE,CAAC,CAAC,EAAE,iCAAiC;EAC5C,CAAC;EAED;EACAK,aAAa,EAAE;IACbrB,IAAI,EAAEsB,MAAM;IACZlB,QAAQ,EAAE,CAAC,IAAI,EAAE,4BAA4B,CAAC;IAC9CmB,IAAI,EAAE;MACJC,MAAM,EAAE,CAAC,aAAa,EAAE,QAAQ,EAAE,eAAe,CAAC;MAClDZ,OAAO,EAAE;IACX;EACF,CAAC;EAEDa,aAAa,EAAE;IACbzB,IAAI,EAAEsB,MAAM;IACZlB,QAAQ,EAAE,IAAI;IACdmB,IAAI,EAAE;MACJC,MAAM,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC;MACjDZ,OAAO,EAAE;IACX,CAAC;IACDc,OAAO,EAAE;EACX,CAAC;EAEDC,eAAe,EAAE;IACf3B,IAAI,EAAEsB,MAAM;IACZlB,QAAQ,EAAE,KAAK,CAAC;EAClB,CAAC;EAED;EACAwB,MAAM,EAAE;IACN5B,IAAI,EAAEsB,MAAM;IACZlB,QAAQ,EAAE,IAAI;IACdmB,IAAI,EAAE;MACJC,MAAM,EAAE,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,SAAS,CAAC;MAC1DZ,OAAO,EAAE;IACX,CAAC;IACDc,OAAO,EAAE;EACX,CAAC;EAED;EACAG,eAAe,EAAE;IACf7B,IAAI,EAAEsB,MAAM;IACZQ,SAAS,EAAE,CAAC,GAAG,EAAE,+CAA+C,CAAC;IACjE1B,QAAQ,EAAE;EACZ,CAAC;EAED;EACA2B,YAAY,EAAE;IACZ/B,IAAI,EAAEsB,MAAM;IACZlB,QAAQ,EAAE,CAAC,IAAI,EAAE,2BAA2B,CAAC;IAC7C4B,SAAS,EAAE,IAAI;IACfC,IAAI,EAAE,IAAI;IACVzB,QAAQ,EAAE;MACRC,SAAS,EAAE,SAAAA,CAASC,CAAC,EAAE;QAAA;QAAAlB,aAAA,GAAAmB,CAAA;QAAAnB,aAAA,GAAAG,CAAA;QACrB,OAAO,6CAA6C,CAACuC,IAAI,CAACxB,CAAC,CAAC;MAC9D,CAAC;MACDE,OAAO,EAAE;IACX;EACF,CAAC;EAEDuB,YAAY,EAAE;IACZnC,IAAI,EAAEsB,MAAM;IACZlB,QAAQ,EAAE,KAAK;IACf6B,IAAI,EAAE;EACR,CAAC;EAED;EACAG,WAAW,EAAE;IACXpC,IAAI,EAAEO,IAAI;IACVH,QAAQ,EAAE;EACZ,CAAC;EAEDiC,kBAAkB,EAAE;IAClBrC,IAAI,EAAEsB,MAAM;IACZlB,QAAQ,EAAE,KAAK;IACf0B,SAAS,EAAE,CAAC,GAAG,EAAE,kDAAkD;EACrE,CAAC;EAED;EACAQ,YAAY,EAAE;IACZtC,IAAI,EAAEe,MAAM;IACZX,QAAQ,EAAE,KAAK;IACfY,GAAG,EAAE,CAAC,CAAC,EAAE,kCAAkC;EAC7C,CAAC;EAEDuB,UAAU,EAAE;IACVvC,IAAI,EAAEO,IAAI;IACVH,QAAQ,EAAE;EACZ;AACF,CAAC,EACD;EACEoC,UAAU,EAAE,IAAI;EAChBC,MAAM,EAAE;IAAEC,QAAQ,EAAE;EAAK,CAAC;EAC1BC,QAAQ,EAAE;IAAED,QAAQ,EAAE;EAAK;AAC7B,CACF,CAAC;;AAED;AAAA;AAAAlD,aAAA,GAAAG,CAAA;AACAE,aAAa,CAAC+C,OAAO,CAAC,UAAU,CAAC,CAACC,GAAG,CAAC,YAAW;EAAA;EAAArD,aAAA,GAAAmB,CAAA;EAAAnB,aAAA,GAAAG,CAAA;EAC/C;EAAI;EAAA,CAAAH,aAAA,GAAAsD,CAAA,cAAI,CAACxC,WAAW;EAAA;EAAA,CAAAd,aAAA,GAAAsD,CAAA,UAAI,IAAI,CAACjC,YAAY,GAAE;IAAA;IAAArB,aAAA,GAAAsD,CAAA;IACzC,MAAMC,QAAQ;IAAA;IAAA,CAAAvD,aAAA,GAAAG,CAAA,OAAG,IAAI,CAACkB,YAAY,CAACmC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC1C,WAAW,CAAC0C,OAAO,CAAC,CAAC;IAAC;IAAAxD,aAAA,GAAAG,CAAA;IAC1E,OAAOsD,IAAI,CAACC,IAAI,CAACH,QAAQ,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;EACjD,CAAC;EAAA;EAAA;IAAAvD,aAAA,GAAAsD,CAAA;EAAA;EAAAtD,aAAA,GAAAG,CAAA;EACD,OAAO,CAAC;AACV,CAAC,CAAC;;AAEF;AAAA;AAAAH,aAAA,GAAAG,CAAA;AACAE,aAAa,CAAC+C,OAAO,CAAC,kBAAkB,CAAC,CAACC,GAAG,CAAC,YAAW;EAAA;EAAArD,aAAA,GAAAmB,CAAA;EAAAnB,aAAA,GAAAG,CAAA;EACvD,OAAO,OAAO,IAAI,CAACwD,GAAG,CAACC,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EAAE;AAC7D,CAAC,CAAC;;AAEF;AAAA;AAAA9D,aAAA,GAAAG,CAAA;AACAE,aAAa,CAAC0D,GAAG,CAAC,MAAM,EAAE,UAASC,IAAI,EAAE;EAAA;EAAAhE,aAAA,GAAAmB,CAAA;EAAAnB,aAAA,GAAAG,CAAA;EACvC;EAAI;EAAA,CAAAH,aAAA,GAAAsD,CAAA,cAAI,CAACxC,WAAW;EAAA;EAAA,CAAAd,aAAA,GAAAsD,CAAA,UAAI,IAAI,CAACjC,YAAY;EAAA;EAAA,CAAArB,aAAA,GAAAsD,CAAA,UAAI,IAAI,CAAC5B,aAAa,GAAE;IAAA;IAAA1B,aAAA,GAAAsD,CAAA;IAC/D,MAAMC,QAAQ;IAAA;IAAA,CAAAvD,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACkB,YAAY,CAACmC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC1C,WAAW,CAAC0C,OAAO,CAAC,CAAC;IAAC;IAAAxD,aAAA,GAAAG,CAAA;IAC1E,IAAI,CAACwB,WAAW,GAAG8B,IAAI,CAACC,IAAI,CAACH,QAAQ,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;IAAC;IAAAvD,aAAA,GAAAG,CAAA;IAC5D,IAAI,CAACyB,WAAW,GAAG,IAAI,CAACD,WAAW,GAAG,IAAI,CAACD,aAAa,GAAG,IAAI,CAACJ,cAAc;EAChF,CAAC;EAAA;EAAA;IAAAtB,aAAA,GAAAsD,CAAA;EAAA;EAAAtD,aAAA,GAAAG,CAAA;EACD6D,IAAI,CAAC,CAAC;AACR,CAAC,CAAC;;AAEF;AAAA;AAAAhE,aAAA,GAAAG,CAAA;AACAE,aAAa,CAAC4D,KAAK,CAAC;EAAE1D,IAAI,EAAE,CAAC;EAAE2D,SAAS,EAAE,CAAC;AAAE,CAAC,CAAC;AAAC;AAAAlE,aAAA,GAAAG,CAAA;AAChDE,aAAa,CAAC4D,KAAK,CAAC;EAAEpD,WAAW,EAAE,CAAC;EAAEC,WAAW,EAAE,CAAC;EAAEO,YAAY,EAAE;AAAE,CAAC,CAAC;AAAC;AAAArB,aAAA,GAAAG,CAAA;AACzEE,aAAa,CAAC4D,KAAK,CAAC;EAAE7B,MAAM,EAAE;AAAE,CAAC,CAAC;AAAC;AAAApC,aAAA,GAAAG,CAAA;AACnCE,aAAa,CAAC4D,KAAK,CAAC;EAAEhC,aAAa,EAAE;AAAE,CAAC,CAAC;;AAEzC;AAAA;AAAAjC,aAAA,GAAAG,CAAA;AACAE,aAAa,CAAC8D,OAAO,CAACC,iBAAiB,GAAG,gBAAeC,aAAa,EAAEvD,WAAW,EAAEO,YAAY,EAAE;EAAA;EAAArB,aAAA,GAAAmB,CAAA;EACjG,MAAMmD,gBAAgB;EAAA;EAAA,CAAAtE,aAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACoE,IAAI,CAAC;IACvC1D,WAAW,EAAEwD,aAAa;IAC1BjC,MAAM,EAAE;MAAEoC,GAAG,EAAE,CAAC,WAAW,EAAE,WAAW;IAAE,CAAC;IAC3CC,GAAG,EAAE,CACH;MACE3D,WAAW,EAAE;QAAE4D,GAAG,EAAErD;MAAa,CAAC;MAClCA,YAAY,EAAE;QAAEsD,GAAG,EAAE7D;MAAY;IACnC,CAAC;EAEL,CAAC,CAAC;EAAC;EAAAd,aAAA,GAAAG,CAAA;EAEH,OAAOmE,gBAAgB,CAACM,MAAM,KAAK,CAAC;AACtC,CAAC;;AAED;AAAA;AAAA5E,aAAA,GAAAG,CAAA;AACAE,aAAa,CAACwE,OAAO,CAACC,eAAe,GAAG,YAAW;EAAA;EAAA9E,aAAA,GAAAmB,CAAA;EAAAnB,aAAA,GAAAG,CAAA;EACjD,IAAI,IAAI,CAACiC,MAAM,KAAK,WAAW,EAAE;IAAA;IAAApC,aAAA,GAAAsD,CAAA;IAAAtD,aAAA,GAAAG,CAAA;IAC/B,OAAO,CAAC;EACV,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAAsD,CAAA;EAAA;EAED,MAAMyB,GAAG;EAAA;EAAA,CAAA/E,aAAA,GAAAG,CAAA,QAAG,IAAIY,IAAI,CAAC,CAAC;EACtB,MAAMiE,gBAAgB;EAAA;EAAA,CAAAhF,aAAA,GAAAG,CAAA,QAAGsD,IAAI,CAACC,IAAI,CAAC,CAAC,IAAI,CAAC5C,WAAW,GAAGiE,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;;EAEjF;EAAA;EAAA/E,aAAA,GAAAG,CAAA;EACA,IAAI6E,gBAAgB,IAAI,CAAC,EAAE;IAAA;IAAAhF,aAAA,GAAAsD,CAAA;IAAAtD,aAAA,GAAAG,CAAA;IACzB,OAAO,IAAI,CAACyB,WAAW;EACzB,CAAC,MAAM;IAAA;IAAA5B,aAAA,GAAAsD,CAAA;IAAAtD,aAAA,GAAAG,CAAA;IAAA,IAAI6E,gBAAgB,IAAI,CAAC,EAAE;MAAA;MAAAhF,aAAA,GAAAsD,CAAA;MAAAtD,aAAA,GAAAG,CAAA;MAChC,OAAO,IAAI,CAACyB,WAAW,GAAG,GAAG;IAC/B,CAAC,MAAM;MAAA;MAAA5B,aAAA,GAAAsD,CAAA;MAAAtD,aAAA,GAAAG,CAAA;MACL,OAAO,CAAC;IACV;EAAA;AACF,CAAC;AAED,MAAM8E,OAAO;AAAA;AAAA,CAAAjF,aAAA,GAAAG,CAAA,QAAGD,QAAQ,CAACgF,KAAK,CAAC,SAAS,EAAE7E,aAAa,CAAC;AAAC;AAAAL,aAAA,GAAAG,CAAA;AAEzDgF,MAAM,CAACC,OAAO,GAAGH,OAAO","ignoreList":[]}