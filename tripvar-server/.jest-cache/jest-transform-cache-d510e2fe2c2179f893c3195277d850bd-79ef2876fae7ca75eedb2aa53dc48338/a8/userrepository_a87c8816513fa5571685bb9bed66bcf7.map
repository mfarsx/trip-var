{"version":3,"names":["BaseRepository","require","User","NotFoundError","ValidationError","UserRepository","constructor","findByEmail","email","options","findOne","toLowerCase","findByEmailWithPassword","select","findActive","criteria","find","active","findActiveWithPagination","findWithPagination","updatePassword","userId","newPassword","updateById","password","passwordChangedAt","Date","addFavorite","destinationId","$addToSet","favorites","removeFavorite","$pull","toggleFavorite","user","findById","isFavorite","includes","updatedUser","getFavorites","populate","softDelete","restore","getStatistics","pipeline","$group","_id","totalUsers","$sum","activeUsers","$cond","$eq","inactiveUsers","usersWithFavorites","$gt","$size","result","aggregate","findByRole","role","updateRole","allowedRoles","join","search","searchTerm","searchCriteria","$or","name","$regex","$options","findByDateRange","startDate","endDate","createdAt","$gte","$lte","getTopUsersByFavorites","limit","$addFields","favoritesCount","$sort","$limit","$project","module","exports"],"sources":["user.repository.js"],"sourcesContent":["const BaseRepository = require('./base.repository');\nconst User = require('../public/models/user.model');\nconst { NotFoundError, ValidationError } = require('../utils/errors');\n\nclass UserRepository extends BaseRepository {\n  constructor() {\n    super(User);\n  }\n\n  /**\n   * Find user by email\n   * @param {string} email - User email\n   * @param {Object} options - Query options\n   * @returns {Promise<Object|null>} Found user\n   */\n  async findByEmail(email, options = {}) {\n    return this.findOne({ email: email.toLowerCase() }, options);\n  }\n\n  /**\n   * Find user by email with password\n   * @param {string} email - User email\n   * @returns {Promise<Object|null>} Found user with password\n   */\n  async findByEmailWithPassword(email) {\n    return this.findOne(\n      { email: email.toLowerCase() },\n      { select: '+password' }\n    );\n  }\n\n  /**\n   * Find active users\n   * @param {Object} criteria - Search criteria\n   * @param {Object} options - Query options\n   * @returns {Promise<Array>} Active users\n   */\n  async findActive(criteria = {}, options = {}) {\n    return this.find({ ...criteria, active: true }, options);\n  }\n\n  /**\n   * Find active users with pagination\n   * @param {Object} criteria - Search criteria\n   * @param {Object} options - Query options\n   * @returns {Promise<Object>} Paginated active users\n   */\n  async findActiveWithPagination(criteria = {}, options = {}) {\n    return this.findWithPagination({ ...criteria, active: true }, options);\n  }\n\n  /**\n   * Update user password\n   * @param {string} userId - User ID\n   * @param {string} newPassword - New password\n   * @returns {Promise<Object>} Updated user\n   */\n  async updatePassword(userId, newPassword) {\n    return this.updateById(userId, {\n      password: newPassword,\n      passwordChangedAt: new Date()\n    });\n  }\n\n  /**\n   * Add favorite destination\n   * @param {string} userId - User ID\n   * @param {string} destinationId - Destination ID\n   * @returns {Promise<Object>} Updated user\n   */\n  async addFavorite(userId, destinationId) {\n    return this.updateById(userId, {\n      $addToSet: { favorites: destinationId }\n    });\n  }\n\n  /**\n   * Remove favorite destination\n   * @param {string} userId - User ID\n   * @param {string} destinationId - Destination ID\n   * @returns {Promise<Object>} Updated user\n   */\n  async removeFavorite(userId, destinationId) {\n    return this.updateById(userId, {\n      $pull: { favorites: destinationId }\n    });\n  }\n\n  /**\n   * Toggle favorite destination\n   * @param {string} userId - User ID\n   * @param {string} destinationId - Destination ID\n   * @returns {Promise<Object>} Updated user and favorite status\n   */\n  async toggleFavorite(userId, destinationId) {\n    const user = await this.findById(userId);\n\n    if (!user) {\n      throw new NotFoundError('User not found');\n    }\n\n    const isFavorite = user.favorites.includes(destinationId);\n\n    if (isFavorite) {\n      await this.removeFavorite(userId, destinationId);\n    } else {\n      await this.addFavorite(userId, destinationId);\n    }\n\n    // Get updated user\n    const updatedUser = await this.findById(userId);\n\n    return {\n      user: updatedUser,\n      isFavorite: !isFavorite\n    };\n  }\n\n  /**\n   * Get user favorites with populated destination data\n   * @param {string} userId - User ID\n   * @returns {Promise<Array>} User favorites\n   */\n  async getFavorites(userId) {\n    const user = await this.findById(userId, {\n      populate: 'favorites',\n      select: 'favorites'\n    });\n\n    if (!user) {\n      throw new NotFoundError('User not found');\n    }\n\n    return user.favorites;\n  }\n\n  /**\n   * Soft delete user (set active to false)\n   * @param {string} userId - User ID\n   * @returns {Promise<Object>} Updated user\n   */\n  async softDelete(userId) {\n    return this.updateById(userId, { active: false });\n  }\n\n  /**\n   * Restore soft deleted user\n   * @param {string} userId - User ID\n   * @returns {Promise<Object>} Updated user\n   */\n  async restore(userId) {\n    return this.updateById(userId, { active: true });\n  }\n\n  /**\n   * Get user statistics\n   * @returns {Promise<Object>} User statistics\n   */\n  async getStatistics() {\n    const pipeline = [\n      {\n        $group: {\n          _id: null,\n          totalUsers: { $sum: 1 },\n          activeUsers: {\n            $sum: { $cond: [{ $eq: ['$active', true] }, 1, 0] }\n          },\n          inactiveUsers: {\n            $sum: { $cond: [{ $eq: ['$active', false] }, 1, 0] }\n          },\n          usersWithFavorites: {\n            $sum: { $cond: [{ $gt: [{ $size: '$favorites' }, 0] }, 1, 0] }\n          }\n        }\n      }\n    ];\n\n    const result = await this.aggregate(pipeline);\n    return result[0] || {\n      totalUsers: 0,\n      activeUsers: 0,\n      inactiveUsers: 0,\n      usersWithFavorites: 0\n    };\n  }\n\n  /**\n   * Get users by role\n   * @param {string} role - User role\n   * @param {Object} options - Query options\n   * @returns {Promise<Array>} Users with specified role\n   */\n  async findByRole(role, options = {}) {\n    return this.find({ role }, options);\n  }\n\n  /**\n   * Update user role\n   * @param {string} userId - User ID\n   * @param {string} role - New role\n   * @returns {Promise<Object>} Updated user\n   */\n  async updateRole(userId, role) {\n    const allowedRoles = ['user', 'admin'];\n\n    if (!allowedRoles.includes(role)) {\n      throw new ValidationError(`Invalid role. Allowed roles: ${allowedRoles.join(', ')}`);\n    }\n\n    return this.updateById(userId, { role });\n  }\n\n  /**\n   * Search users by name or email\n   * @param {string} searchTerm - Search term\n   * @param {Object} options - Query options\n   * @returns {Promise<Array>} Matching users\n   */\n  async search(searchTerm, options = {}) {\n    const searchCriteria = {\n      $or: [\n        { name: { $regex: searchTerm, $options: 'i' } },\n        { email: { $regex: searchTerm, $options: 'i' } }\n      ]\n    };\n\n    return this.find(searchCriteria, options);\n  }\n\n  /**\n   * Get users created in date range\n   * @param {Date} startDate - Start date\n   * @param {Date} endDate - End date\n   * @param {Object} options - Query options\n   * @returns {Promise<Array>} Users created in range\n   */\n  async findByDateRange(startDate, endDate, options = {}) {\n    const criteria = {\n      createdAt: {\n        $gte: startDate,\n        $lte: endDate\n      }\n    };\n\n    return this.find(criteria, options);\n  }\n\n  /**\n   * Get users with most favorites\n   * @param {number} limit - Number of users to return\n   * @returns {Promise<Array>} Users with most favorites\n   */\n  async getTopUsersByFavorites(limit = 10) {\n    const pipeline = [\n      {\n        $addFields: {\n          favoritesCount: { $size: '$favorites' }\n        }\n      },\n      {\n        $sort: { favoritesCount: -1 }\n      },\n      {\n        $limit: limit\n      },\n      {\n        $project: {\n          name: 1,\n          email: 1,\n          favoritesCount: 1,\n          createdAt: 1\n        }\n      }\n    ];\n\n    return this.aggregate(pipeline);\n  }\n}\n\nmodule.exports = new UserRepository();"],"mappings":"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","ignoreList":[]}