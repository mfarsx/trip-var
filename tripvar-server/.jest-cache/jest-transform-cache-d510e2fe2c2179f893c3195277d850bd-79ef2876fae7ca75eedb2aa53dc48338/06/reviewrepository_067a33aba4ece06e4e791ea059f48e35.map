{"version":3,"names":["cov_xfipz4oiy","actualCoverage","BaseRepository","s","require","ReviewRepository","constructor","model","f","findByDestination","destinationId","find","destination","populate","sort","createdAt","error","findByUser","userId","user","findByRating","rating","findByDateRange","startDate","endDate","$gte","$lte","getAverageRating","result","aggregate","$match","$group","_id","averageRating","$avg","totalReviews","$sum","b","getRatingDistribution","count","$sort","findRecent","limit","findWithPhotos","photos","$exists","$not","$size","hasUserReviewed","review","findOne","getStatistics","stats","totalWithPhotos","$cond","$gt","$ifNull","updateHelpfulness","reviewId","helpfulCount","findByIdAndUpdate","$set","new","module","exports"],"sources":["review.repository.js"],"sourcesContent":["const BaseRepository = require('./base.repository');\n\nclass ReviewRepository extends BaseRepository {\n  constructor(model) {\n    super(model);\n  }\n\n  // Find reviews by destination\n  async findByDestination(destinationId) {\n    try {\n      return await this.model\n        .find({ destination: destinationId })\n        .populate('user', 'name email avatar')\n        .sort({ createdAt: -1 });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find reviews by user\n  async findByUser(userId) {\n    try {\n      return await this.model\n        .find({ user: userId })\n        .populate('destination', 'name city country')\n        .sort({ createdAt: -1 });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find reviews by rating\n  async findByRating(rating) {\n    try {\n      return await this.model\n        .find({ rating })\n        .populate('user destination')\n        .sort({ createdAt: -1 });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find reviews by date range\n  async findByDateRange(startDate, endDate) {\n    try {\n      return await this.model\n        .find({\n          createdAt: { $gte: startDate, $lte: endDate }\n        })\n        .populate('user destination')\n        .sort({ createdAt: -1 });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get average rating for a destination\n  async getAverageRating(destinationId) {\n    try {\n      const result = await this.model.aggregate([\n        { $match: { destination: destinationId } },\n        {\n          $group: {\n            _id: null,\n            averageRating: { $avg: '$rating' },\n            totalReviews: { $sum: 1 }\n          }\n        }\n      ]);\n      return result[0] || { averageRating: 0, totalReviews: 0 };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get rating distribution for a destination\n  async getRatingDistribution(destinationId) {\n    try {\n      const result = await this.model.aggregate([\n        { $match: { destination: destinationId } },\n        {\n          $group: {\n            _id: '$rating',\n            count: { $sum: 1 }\n          }\n        },\n        { $sort: { _id: -1 } }\n      ]);\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find recent reviews\n  async findRecent(limit = 10) {\n    try {\n      return await this.model\n        .find()\n        .populate('user', 'name avatar')\n        .populate('destination', 'name city country')\n        .sort({ createdAt: -1 })\n        .limit(limit);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find reviews with photos\n  async findWithPhotos() {\n    try {\n      return await this.model\n        .find({ photos: { $exists: true, $not: { $size: 0 } } })\n        .populate('user destination')\n        .sort({ createdAt: -1 });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Check if user has reviewed destination\n  async hasUserReviewed(userId, destinationId) {\n    try {\n      const review = await this.model.findOne({\n        user: userId,\n        destination: destinationId\n      });\n      return !!review;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get review statistics\n  async getStatistics() {\n    try {\n      const stats = await this.model.aggregate([\n        {\n          $group: {\n            _id: null,\n            totalReviews: { $sum: 1 },\n            averageRating: { $avg: '$rating' },\n            totalWithPhotos: {\n              $sum: {\n                $cond: [\n                  { $gt: [{ $size: { $ifNull: ['$photos', []] } }, 0] },\n                  1,\n                  0\n                ]\n              }\n            }\n          }\n        }\n      ]);\n      return stats[0] || { totalReviews: 0, averageRating: 0, totalWithPhotos: 0 };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Update review helpfulness\n  async updateHelpfulness(reviewId, helpfulCount) {\n    try {\n      return await this.model.findByIdAndUpdate(\n        reviewId,\n        { $set: { helpfulCount } },\n        { new: true }\n      );\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nmodule.exports = ReviewRepository;"],"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","ignoreList":[]}