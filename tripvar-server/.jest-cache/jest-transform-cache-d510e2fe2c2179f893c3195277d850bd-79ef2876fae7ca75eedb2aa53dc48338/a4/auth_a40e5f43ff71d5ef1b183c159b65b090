34ed7820cfbcb6f78e4545a1acc402f0
const jwt = require('jsonwebtoken');
const {
  promisify
} = require('util');
const User = require('../models/user.model');
const {
  UnauthorizedError,
  ForbiddenError
} = require('../utils/errors');
exports.authenticate = async (req, res, next) => {
  try {
    // 1) Get token and check if it exists
    let token;
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
      token = req.headers.authorization.split(' ')[1];
    }

    // Additional security: Check for token in cookies as fallback
    if (!token && req.cookies && req.cookies.token) {
      token = req.cookies.token;
    }
    if (!token) {
      return res.status(401).json({
        status: 'fail',
        message: 'You are not logged in! Please log in to get access.',
        code: 'UNAUTHORIZED'
      });
    }

    // 2) Verify token
    try {
      const decoded = await promisify(jwt.verify)(token, process.env.JWT_SECRET, {
        algorithms: ['HS256'] // Explicitly specify algorithm for security
      });

      // 3) Check if user still exists
      const user = await User.findById(decoded.id);
      if (!user) {
        return res.status(401).json({
          status: 'fail',
          message: 'The user belonging to this token no longer exists.',
          code: 'UNAUTHORIZED'
        });
      }

      // 4) Check if user changed password after the token was issued
      if (user.changedPasswordAfter(decoded.iat)) {
        return res.status(401).json({
          status: 'fail',
          message: 'User recently changed password! Please log in again.',
          code: 'UNAUTHORIZED'
        });
      }

      // Grant access to protected route
      req.user = user;
      next();
    } catch (err) {
      // Handle JWT specific errors with clear messages
      if (err.name === 'TokenExpiredError') {
        return res.status(401).json({
          status: 'fail',
          message: 'Your token has expired. Please log in again.',
          code: 'TOKEN_EXPIRED'
        });
      } else if (err.name === 'JsonWebTokenError') {
        return res.status(401).json({
          status: 'fail',
          message: 'Invalid token. Please log in again.',
          code: 'INVALID_TOKEN'
        });
      }
      // For other errors, pass to error handler
      next(err);
    }
  } catch (error) {
    next(error);
  }
};
exports.authorize = (...roles) => {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return next(new ForbiddenError('You do not have permission to perform this action'));
    }
    next();
  };
};

// Keep the old exports for backward compatibility
exports.protect = exports.authenticate;
exports.restrictTo = exports.authorize;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqd3QiLCJyZXF1aXJlIiwicHJvbWlzaWZ5IiwiVXNlciIsIlVuYXV0aG9yaXplZEVycm9yIiwiRm9yYmlkZGVuRXJyb3IiLCJleHBvcnRzIiwiYXV0aGVudGljYXRlIiwicmVxIiwicmVzIiwibmV4dCIsInRva2VuIiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJzdGFydHNXaXRoIiwic3BsaXQiLCJjb29raWVzIiwic3RhdHVzIiwianNvbiIsIm1lc3NhZ2UiLCJjb2RlIiwiZGVjb2RlZCIsInZlcmlmeSIsInByb2Nlc3MiLCJlbnYiLCJKV1RfU0VDUkVUIiwiYWxnb3JpdGhtcyIsInVzZXIiLCJmaW5kQnlJZCIsImlkIiwiY2hhbmdlZFBhc3N3b3JkQWZ0ZXIiLCJpYXQiLCJlcnIiLCJuYW1lIiwiZXJyb3IiLCJhdXRob3JpemUiLCJyb2xlcyIsImluY2x1ZGVzIiwicm9sZSIsInByb3RlY3QiLCJyZXN0cmljdFRvIl0sInNvdXJjZXMiOlsiYXV0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKTtcbmNvbnN0IHsgcHJvbWlzaWZ5IH0gPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBVc2VyID0gcmVxdWlyZSgnLi4vbW9kZWxzL3VzZXIubW9kZWwnKTtcbmNvbnN0IHsgVW5hdXRob3JpemVkRXJyb3IsIEZvcmJpZGRlbkVycm9yIH0gPSByZXF1aXJlKCcuLi91dGlscy9lcnJvcnMnKTtcblxuZXhwb3J0cy5hdXRoZW50aWNhdGUgPSBhc3luYyhyZXEsIHJlcywgbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIC8vIDEpIEdldCB0b2tlbiBhbmQgY2hlY2sgaWYgaXQgZXhpc3RzXG4gICAgbGV0IHRva2VuO1xuICAgIGlmIChcbiAgICAgIHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24gJiZcbiAgICAgIHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24uc3RhcnRzV2l0aCgnQmVhcmVyJylcbiAgICApIHtcbiAgICAgIHRva2VuID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbi5zcGxpdCgnICcpWzFdO1xuICAgIH1cblxuICAgIC8vIEFkZGl0aW9uYWwgc2VjdXJpdHk6IENoZWNrIGZvciB0b2tlbiBpbiBjb29raWVzIGFzIGZhbGxiYWNrXG4gICAgaWYgKCF0b2tlbiAmJiByZXEuY29va2llcyAmJiByZXEuY29va2llcy50b2tlbikge1xuICAgICAgdG9rZW4gPSByZXEuY29va2llcy50b2tlbjtcbiAgICB9XG5cbiAgICBpZiAoIXRva2VuKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICBzdGF0dXM6ICdmYWlsJyxcbiAgICAgICAgbWVzc2FnZTogJ1lvdSBhcmUgbm90IGxvZ2dlZCBpbiEgUGxlYXNlIGxvZyBpbiB0byBnZXQgYWNjZXNzLicsXG4gICAgICAgIGNvZGU6ICdVTkFVVEhPUklaRUQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyAyKSBWZXJpZnkgdG9rZW5cbiAgICB0cnkge1xuICAgICAgY29uc3QgZGVjb2RlZCA9IGF3YWl0IHByb21pc2lmeShqd3QudmVyaWZ5KSh0b2tlbiwgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCwge1xuICAgICAgICBhbGdvcml0aG1zOiBbJ0hTMjU2J10gLy8gRXhwbGljaXRseSBzcGVjaWZ5IGFsZ29yaXRobSBmb3Igc2VjdXJpdHlcbiAgICAgIH0pO1xuXG4gICAgICAvLyAzKSBDaGVjayBpZiB1c2VyIHN0aWxsIGV4aXN0c1xuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWQoZGVjb2RlZC5pZCk7XG4gICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgICBzdGF0dXM6ICdmYWlsJyxcbiAgICAgICAgICBtZXNzYWdlOiAnVGhlIHVzZXIgYmVsb25naW5nIHRvIHRoaXMgdG9rZW4gbm8gbG9uZ2VyIGV4aXN0cy4nLFxuICAgICAgICAgIGNvZGU6ICdVTkFVVEhPUklaRUQnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyA0KSBDaGVjayBpZiB1c2VyIGNoYW5nZWQgcGFzc3dvcmQgYWZ0ZXIgdGhlIHRva2VuIHdhcyBpc3N1ZWRcbiAgICAgIGlmICh1c2VyLmNoYW5nZWRQYXNzd29yZEFmdGVyKGRlY29kZWQuaWF0KSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIHN0YXR1czogJ2ZhaWwnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIHJlY2VudGx5IGNoYW5nZWQgcGFzc3dvcmQhIFBsZWFzZSBsb2cgaW4gYWdhaW4uJyxcbiAgICAgICAgICBjb2RlOiAnVU5BVVRIT1JJWkVEJ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gR3JhbnQgYWNjZXNzIHRvIHByb3RlY3RlZCByb3V0ZVxuICAgICAgcmVxLnVzZXIgPSB1c2VyO1xuICAgICAgbmV4dCgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gSGFuZGxlIEpXVCBzcGVjaWZpYyBlcnJvcnMgd2l0aCBjbGVhciBtZXNzYWdlc1xuICAgICAgaWYgKGVyci5uYW1lID09PSAnVG9rZW5FeHBpcmVkRXJyb3InKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgc3RhdHVzOiAnZmFpbCcsXG4gICAgICAgICAgbWVzc2FnZTogJ1lvdXIgdG9rZW4gaGFzIGV4cGlyZWQuIFBsZWFzZSBsb2cgaW4gYWdhaW4uJyxcbiAgICAgICAgICBjb2RlOiAnVE9LRU5fRVhQSVJFRCdcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGVyci5uYW1lID09PSAnSnNvbldlYlRva2VuRXJyb3InKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgc3RhdHVzOiAnZmFpbCcsXG4gICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgdG9rZW4uIFBsZWFzZSBsb2cgaW4gYWdhaW4uJyxcbiAgICAgICAgICBjb2RlOiAnSU5WQUxJRF9UT0tFTidcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBGb3Igb3RoZXIgZXJyb3JzLCBwYXNzIHRvIGVycm9yIGhhbmRsZXJcbiAgICAgIG5leHQoZXJyKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbmV4dChlcnJvcik7XG4gIH1cbn07XG5cbmV4cG9ydHMuYXV0aG9yaXplID0gKC4uLnJvbGVzKSA9PiB7XG4gIHJldHVybiAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICBpZiAoIXJvbGVzLmluY2x1ZGVzKHJlcS51c2VyLnJvbGUpKSB7XG4gICAgICByZXR1cm4gbmV4dChcbiAgICAgICAgbmV3IEZvcmJpZGRlbkVycm9yKCdZb3UgZG8gbm90IGhhdmUgcGVybWlzc2lvbiB0byBwZXJmb3JtIHRoaXMgYWN0aW9uJylcbiAgICAgICk7XG4gICAgfVxuICAgIG5leHQoKTtcbiAgfTtcbn07XG5cbi8vIEtlZXAgdGhlIG9sZCBleHBvcnRzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5leHBvcnRzLnByb3RlY3QgPSBleHBvcnRzLmF1dGhlbnRpY2F0ZTtcbmV4cG9ydHMucmVzdHJpY3RUbyA9IGV4cG9ydHMuYXV0aG9yaXplO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxHQUFHLEdBQUdDLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDbkMsTUFBTTtFQUFFQztBQUFVLENBQUMsR0FBR0QsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUNyQyxNQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztBQUM1QyxNQUFNO0VBQUVHLGlCQUFpQjtFQUFFQztBQUFlLENBQUMsR0FBR0osT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBRXhFSyxPQUFPLENBQUNDLFlBQVksR0FBRyxPQUFNQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxLQUFL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