73c223e321ad454d3dab61c2cd35dc95
/* istanbul ignore next */
function cov_1epfn0abmb() {
  var path = "/Users/mfarsx/dev/tripvar/tripvar-server/src/utils/asyncHandler.js";
  var hash = "687e52f26c1b0e97df7c515e6b2c7b94d8f69e57";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/mfarsx/dev/tripvar/tripvar-server/src/utils/asyncHandler.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 7,
          column: 2
        },
        end: {
          line: 9,
          column: 4
        }
      },
      "2": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 52
        }
      },
      "3": {
        start: {
          line: 17,
          column: 28
        },
        end: {
          line: 33,
          column: 1
        }
      },
      "4": {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 32,
          column: 4
        }
      },
      "5": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      "6": {
        start: {
          line: 20,
          column: 6
        },
        end: {
          line: 20,
          column: 42
        }
      },
      "7": {
        start: {
          line: 23,
          column: 34
        },
        end: {
          line: 23,
          column: 53
        }
      },
      "8": {
        start: {
          line: 24,
          column: 6
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "9": {
        start: {
          line: 30,
          column: 6
        },
        end: {
          line: 30,
          column: 18
        }
      },
      "10": {
        start: {
          line: 42,
          column: 18
        },
        end: {
          line: 66,
          column: 1
        }
      },
      "11": {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 63,
          column: 3
        }
      },
      "12": {
        start: {
          line: 45,
          column: 21
        },
        end: {
          line: 45,
          column: 22
        }
      },
      "13": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "14": {
        start: {
          line: 47,
          column: 6
        },
        end: {
          line: 47,
          column: 31
        }
      },
      "15": {
        start: {
          line: 49,
          column: 6
        },
        end: {
          line: 49,
          column: 24
        }
      },
      "16": {
        start: {
          line: 52,
          column: 6
        },
        end: {
          line: 54,
          column: 7
        }
      },
      "17": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 20
        }
      },
      "18": {
        start: {
          line: 56,
          column: 6
        },
        end: {
          line: 58,
          column: 7
        }
      },
      "19": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 20
        }
      },
      "20": {
        start: {
          line: 61,
          column: 6
        },
        end: {
          line: 61,
          column: 73
        }
      },
      "21": {
        start: {
          line: 61,
          column: 35
        },
        end: {
          line: 61,
          column: 71
        }
      },
      "22": {
        start: {
          line: 65,
          column: 2
        },
        end: {
          line: 65,
          column: 18
        }
      },
      "23": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 81,
          column: 1
        }
      },
      "24": {
        start: {
          line: 75,
          column: 2
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "25": {
        start: {
          line: 78,
          column: 6
        },
        end: {
          line: 78,
          column: 73
        }
      },
      "26": {
        start: {
          line: 78,
          column: 23
        },
        end: {
          line: 78,
          column: 61
        }
      },
      "27": {
        start: {
          line: 89,
          column: 24
        },
        end: {
          line: 104,
          column: 1
        }
      },
      "28": {
        start: {
          line: 90,
          column: 18
        },
        end: {
          line: 90,
          column: 20
        }
      },
      "29": {
        start: {
          line: 92,
          column: 2
        },
        end: {
          line: 101,
          column: 3
        }
      },
      "30": {
        start: {
          line: 92,
          column: 15
        },
        end: {
          line: 92,
          column: 16
        }
      },
      "31": {
        start: {
          line: 93,
          column: 18
        },
        end: {
          line: 93,
          column: 54
        }
      },
      "32": {
        start: {
          line: 94,
          column: 25
        },
        end: {
          line: 96,
          column: 5
        }
      },
      "33": {
        start: {
          line: 95,
          column: 29
        },
        end: {
          line: 95,
          column: 40
        }
      },
      "34": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 100,
          column: 7
        }
      },
      "35": {
        start: {
          line: 99,
          column: 6
        },
        end: {
          line: 99,
          column: 66
        }
      },
      "36": {
        start: {
          line: 103,
          column: 2
        },
        end: {
          line: 103,
          column: 17
        }
      },
      "37": {
        start: {
          line: 106,
          column: 0
        },
        end: {
          line: 112,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 21
          },
          end: {
            line: 6,
            column: 22
          }
        },
        loc: {
          start: {
            line: 6,
            column: 29
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 29
          },
          end: {
            line: 9,
            column: 3
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 28
          },
          end: {
            line: 17,
            column: 29
          }
        },
        loc: {
          start: {
            line: 17,
            column: 47
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 10
          }
        },
        loc: {
          start: {
            line: 18,
            column: 27
          },
          end: {
            line: 32,
            column: 3
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 42,
            column: 18
          },
          end: {
            line: 42,
            column: 19
          }
        },
        loc: {
          start: {
            line: 42,
            column: 68
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 42
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 61,
            column: 24
          },
          end: {
            line: 61,
            column: 25
          }
        },
        loc: {
          start: {
            line: 61,
            column: 35
          },
          end: {
            line: 61,
            column: 71
          }
        },
        line: 61
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 74,
            column: 20
          },
          end: {
            line: 74,
            column: 21
          }
        },
        loc: {
          start: {
            line: 74,
            column: 53
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 74
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 77,
            column: 17
          }
        },
        loc: {
          start: {
            line: 78,
            column: 6
          },
          end: {
            line: 78,
            column: 73
          }
        },
        line: 78
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 78,
            column: 17
          },
          end: {
            line: 78,
            column: 18
          }
        },
        loc: {
          start: {
            line: 78,
            column: 23
          },
          end: {
            line: 78,
            column: 61
          }
        },
        line: 78
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 89,
            column: 25
          }
        },
        loc: {
          start: {
            line: 89,
            column: 62
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 89
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 95,
            column: 17
          }
        },
        loc: {
          start: {
            line: 95,
            column: 29
          },
          end: {
            line: 95,
            column: 40
          }
        },
        line: 95
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 98,
            column: 37
          },
          end: {
            line: 98,
            column: 38
          }
        },
        loc: {
          start: {
            line: 99,
            column: 6
          },
          end: {
            line: 99,
            column: 66
          }
        },
        line: 99
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 35
          },
          end: {
            line: 42,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 42,
            column: 48
          },
          end: {
            line: 42,
            column: 49
          }
        }],
        line: 42
      },
      "1": {
        loc: {
          start: {
            line: 42,
            column: 51
          },
          end: {
            line: 42,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 42,
            column: 59
          },
          end: {
            line: 42,
            column: 63
          }
        }],
        line: 42
      },
      "2": {
        loc: {
          start: {
            line: 52,
            column: 6
          },
          end: {
            line: 54,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 6
          },
          end: {
            line: 54,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 10
          },
          end: {
            line: 52,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 10
          },
          end: {
            line: 52,
            column: 26
          }
        }, {
          start: {
            line: 52,
            column: 30
          },
          end: {
            line: 52,
            column: 52
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 56,
            column: 6
          },
          end: {
            line: 58,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 6
          },
          end: {
            line: 58,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "5": {
        loc: {
          start: {
            line: 74,
            column: 32
          },
          end: {
            line: 74,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 74,
            column: 44
          },
          end: {
            line: 74,
            column: 48
          }
        }],
        line: 74
      },
      "6": {
        loc: {
          start: {
            line: 89,
            column: 42
          },
          end: {
            line: 89,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 89,
            column: 56
          },
          end: {
            line: 89,
            column: 57
          }
        }],
        line: 89
      },
      "7": {
        loc: {
          start: {
            line: 99,
            column: 6
          },
          end: {
            line: 99,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 99,
            column: 38
          },
          end: {
            line: 99,
            column: 50
          }
        }, {
          start: {
            line: 99,
            column: 53
          },
          end: {
            line: 99,
            column: 66
          }
        }],
        line: 99
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0],
      "7": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "687e52f26c1b0e97df7c515e6b2c7b94d8f69e57"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1epfn0abmb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1epfn0abmb();
cov_1epfn0abmb().s[0]++;
/**
 * Async handler wrapper to catch errors in async route handlers
 * @param {Function} fn - Async function to wrap
 * @returns {Function} Express middleware function
 */
const asyncHandler = fn => {
  /* istanbul ignore next */
  cov_1epfn0abmb().f[0]++;
  cov_1epfn0abmb().s[1]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_1epfn0abmb().f[1]++;
    cov_1epfn0abmb().s[2]++;
    Promise.resolve(fn(req, res, next)).catch(next);
  };
};

/**
 * Async handler for service methods
 * @param {Function} serviceMethod - Service method to wrap
 * @returns {Function} Wrapped service method
 */
/* istanbul ignore next */
cov_1epfn0abmb().s[3]++;
const asyncServiceHandler = serviceMethod => {
  /* istanbul ignore next */
  cov_1epfn0abmb().f[2]++;
  cov_1epfn0abmb().s[4]++;
  return async (...args) => {
    /* istanbul ignore next */
    cov_1epfn0abmb().f[3]++;
    cov_1epfn0abmb().s[5]++;
    try {
      /* istanbul ignore next */
      cov_1epfn0abmb().s[6]++;
      return await serviceMethod(...args);
    } catch (error) {
      // Log service errors
      const {
        error: logError
      } =
      /* istanbul ignore next */
      (cov_1epfn0abmb().s[7]++, require('./logger'));
      /* istanbul ignore next */
      cov_1epfn0abmb().s[8]++;
      logError('Service error', {
        error: error.message,
        stack: error.stack,
        method: serviceMethod.name,
        args: args.length
      });
      /* istanbul ignore next */
      cov_1epfn0abmb().s[9]++;
      throw error;
    }
  };
};

/**
 * Retry wrapper for operations that might fail
 * @param {Function} operation - Operation to retry
 * @param {number} maxRetries - Maximum number of retries
 * @param {number} delay - Delay between retries in ms
 * @returns {Promise<*>} Operation result
 */
/* istanbul ignore next */
cov_1epfn0abmb().s[10]++;
const withRetry = async (operation, maxRetries =
/* istanbul ignore next */
(cov_1epfn0abmb().b[0][0]++, 3), delay =
/* istanbul ignore next */
(cov_1epfn0abmb().b[1][0]++, 1000)) => {
  /* istanbul ignore next */
  cov_1epfn0abmb().f[4]++;
  let lastError;
  /* istanbul ignore next */
  cov_1epfn0abmb().s[11]++;
  for (let attempt =
  /* istanbul ignore next */
  (cov_1epfn0abmb().s[12]++, 1); attempt <= maxRetries; attempt++) {
    /* istanbul ignore next */
    cov_1epfn0abmb().s[13]++;
    try {
      /* istanbul ignore next */
      cov_1epfn0abmb().s[14]++;
      return await operation();
    } catch (error) {
      /* istanbul ignore next */
      cov_1epfn0abmb().s[15]++;
      lastError = error;

      // Don't retry on validation errors or authentication errors
      /* istanbul ignore next */
      cov_1epfn0abmb().s[16]++;
      if (
      /* istanbul ignore next */
      (cov_1epfn0abmb().b[3][0]++, error.statusCode) &&
      /* istanbul ignore next */
      (cov_1epfn0abmb().b[3][1]++, error.statusCode < 500)) {
        /* istanbul ignore next */
        cov_1epfn0abmb().b[2][0]++;
        cov_1epfn0abmb().s[17]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1epfn0abmb().b[2][1]++;
      }
      cov_1epfn0abmb().s[18]++;
      if (attempt === maxRetries) {
        /* istanbul ignore next */
        cov_1epfn0abmb().b[4][0]++;
        cov_1epfn0abmb().s[19]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1epfn0abmb().b[4][1]++;
      }

      // Wait before retrying
      cov_1epfn0abmb().s[20]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1epfn0abmb().f[5]++;
        cov_1epfn0abmb().s[21]++;
        return setTimeout(resolve, delay * attempt);
      });
    }
  }
  /* istanbul ignore next */
  cov_1epfn0abmb().s[22]++;
  throw lastError;
};

/**
 * Timeout wrapper for operations
 * @param {Function} operation - Operation to wrap
 * @param {number} timeoutMs - Timeout in milliseconds
 * @returns {Promise<*>} Operation result
 */
/* istanbul ignore next */
cov_1epfn0abmb().s[23]++;
const withTimeout = (operation, timeoutMs =
/* istanbul ignore next */
(cov_1epfn0abmb().b[5][0]++, 5000)) => {
  /* istanbul ignore next */
  cov_1epfn0abmb().f[6]++;
  cov_1epfn0abmb().s[24]++;
  return Promise.race([operation(), new Promise((_, reject) => {
    /* istanbul ignore next */
    cov_1epfn0abmb().f[7]++;
    cov_1epfn0abmb().s[25]++;
    return setTimeout(() => {
      /* istanbul ignore next */
      cov_1epfn0abmb().f[8]++;
      cov_1epfn0abmb().s[26]++;
      return reject(new Error('Operation timeout'));
    }, timeoutMs);
  })]);
};

/**
 * Batch operation handler
 * @param {Array<Function>} operations - Array of operations to execute
 * @param {number} concurrency - Maximum concurrent operations
 * @returns {Promise<Array>} Results of all operations
 */
/* istanbul ignore next */
cov_1epfn0abmb().s[27]++;
const batchOperations = async (operations, concurrency =
/* istanbul ignore next */
(cov_1epfn0abmb().b[6][0]++, 5)) => {
  /* istanbul ignore next */
  cov_1epfn0abmb().f[9]++;
  const results =
  /* istanbul ignore next */
  (cov_1epfn0abmb().s[28]++, []);
  /* istanbul ignore next */
  cov_1epfn0abmb().s[29]++;
  for (let i =
  /* istanbul ignore next */
  (cov_1epfn0abmb().s[30]++, 0); i < operations.length; i += concurrency) {
    const batch =
    /* istanbul ignore next */
    (cov_1epfn0abmb().s[31]++, operations.slice(i, i + concurrency));
    const batchResults =
    /* istanbul ignore next */
    (cov_1epfn0abmb().s[32]++, await Promise.allSettled(batch.map(operation => {
      /* istanbul ignore next */
      cov_1epfn0abmb().f[10]++;
      cov_1epfn0abmb().s[33]++;
      return operation();
    })));
    /* istanbul ignore next */
    cov_1epfn0abmb().s[34]++;
    results.push(...batchResults.map(result => {
      /* istanbul ignore next */
      cov_1epfn0abmb().f[11]++;
      cov_1epfn0abmb().s[35]++;
      return result.status === 'fulfilled' ?
      /* istanbul ignore next */
      (cov_1epfn0abmb().b[7][0]++, result.value) :
      /* istanbul ignore next */
      (cov_1epfn0abmb().b[7][1]++, result.reason);
    }));
  }
  /* istanbul ignore next */
  cov_1epfn0abmb().s[36]++;
  return results;
};
/* istanbul ignore next */
cov_1epfn0abmb().s[37]++;
module.exports = {
  asyncHandler,
  asyncServiceHandler,
  withRetry,
  withTimeout,
  batchOperations
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,