{"version":3,"names":["cov_t8uibq257","actualCoverage","mongoose","s","require","getRedisClient","health","config","HealthStatus","HEALTHY","UNHEALTHY","DEGRADED","ComponentHealth","constructor","name","status","message","b","details","f","timestamp","Date","toISOString","HealthCheckResult","uptime","process","version","env","npm_package_version","environment","server","nodeEnv","components","addComponent","component","push","toJSON","checkDatabase","startTime","now","connection","readyState","db","admin","ping","responseTime","host","port","error","checkRedis","client","pong","pingResponse","checkMemory","memUsage","memoryUsage","totalMem","heapTotal","usedMem","heapUsed","usagePercent","Math","round","external","rss","checkCPU","cpuUsage","totalUsage","user","system","total","checkDiskSpace","note","checkExternalDependencies","dependencies","requiredEnvVars","missingEnvVars","filter","envVar","length","missing","performHealthCheck","result","externalDeps","forEach","dep","unhealthy","c","degraded","healthCheckMiddleware","req","res","next","healthResult","statusCode","json","livenessProbe","readinessProbe","dbHealthy","database","module","exports"],"sources":["healthCheck.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst { getRedisClient } = require('../config/redis');\nconst { health } = require('../utils/logger');\nconst config = require('../config/config');\n\n/**\n * Health check status\n */\nconst HealthStatus = {\n  HEALTHY: 'healthy',\n  UNHEALTHY: 'unhealthy',\n  DEGRADED: 'degraded'\n};\n\n/**\n * Component health check result\n */\nclass ComponentHealth {\n  constructor(name, status, message = '', details = {}) {\n    this.name = name;\n    this.status = status;\n    this.message = message;\n    this.details = details;\n    this.timestamp = new Date().toISOString();\n  }\n}\n\n/**\n * Overall health check result\n */\nclass HealthCheckResult {\n  constructor() {\n    this.status = HealthStatus.HEALTHY;\n    this.timestamp = new Date().toISOString();\n    this.uptime = process.uptime();\n    this.version = process.env.npm_package_version || '1.0.0';\n    this.environment = config.server.nodeEnv;\n    this.components = [];\n  }\n\n  addComponent(component) {\n    this.components.push(component);\n\n    // Update overall status based on component status\n    if (component.status === HealthStatus.UNHEALTHY) {\n      this.status = HealthStatus.UNHEALTHY;\n    } else if (component.status === HealthStatus.DEGRADED && this.status === HealthStatus.HEALTHY) {\n      this.status = HealthStatus.DEGRADED;\n    }\n  }\n\n  toJSON() {\n    return {\n      status: this.status,\n      timestamp: this.timestamp,\n      uptime: this.uptime,\n      version: this.version,\n      environment: this.environment,\n      components: this.components\n    };\n  }\n}\n\n/**\n * Check database health\n */\nasync function checkDatabase() {\n  const startTime = Date.now();\n\n  try {\n    // Check connection status\n    if (mongoose.connection.readyState !== 1) {\n      return new ComponentHealth(\n        'database',\n        HealthStatus.UNHEALTHY,\n        'Database connection is not established',\n        { readyState: mongoose.connection.readyState }\n      );\n    }\n\n    // Test database query\n    await mongoose.connection.db.admin().ping();\n    const responseTime = Date.now() - startTime;\n\n    return new ComponentHealth(\n      'database',\n      HealthStatus.HEALTHY,\n      'Database is healthy',\n      {\n        responseTime: `${responseTime}ms`,\n        readyState: mongoose.connection.readyState,\n        host: mongoose.connection.host,\n        port: mongoose.connection.port,\n        name: mongoose.connection.name\n      }\n    );\n  } catch (error) {\n    return new ComponentHealth(\n      'database',\n      HealthStatus.UNHEALTHY,\n      'Database health check failed',\n      {\n        error: error.message,\n        responseTime: `${Date.now() - startTime}ms`\n      }\n    );\n  }\n}\n\n/**\n * Check Redis health\n */\nasync function checkRedis() {\n  const startTime = Date.now();\n\n  try {\n    const client = getRedisClient();\n\n    if (!client) {\n      return new ComponentHealth(\n        'redis',\n        HealthStatus.DEGRADED,\n        'Redis client not available',\n        { responseTime: `${Date.now() - startTime}ms` }\n      );\n    }\n\n    // Test Redis connection\n    const pong = await client.ping();\n    const responseTime = Date.now() - startTime;\n\n    if (pong === 'PONG') {\n      return new ComponentHealth(\n        'redis',\n        HealthStatus.HEALTHY,\n        'Redis is healthy',\n        {\n          responseTime: `${responseTime}ms`,\n          status: client.status\n        }\n      );\n    } else {\n      return new ComponentHealth(\n        'redis',\n        HealthStatus.UNHEALTHY,\n        'Redis ping failed',\n        {\n          responseTime: `${responseTime}ms`,\n          pingResponse: pong\n        }\n      );\n    }\n  } catch (error) {\n    return new ComponentHealth(\n      'redis',\n      HealthStatus.DEGRADED,\n      'Redis health check failed',\n      {\n        error: error.message,\n        responseTime: `${Date.now() - startTime}ms`\n      }\n    );\n  }\n}\n\n/**\n * Check memory usage\n */\nfunction checkMemory() {\n  const memUsage = process.memoryUsage();\n  const totalMem = memUsage.heapTotal;\n  const usedMem = memUsage.heapUsed;\n  const usagePercent = (usedMem / totalMem) * 100;\n\n  let status = HealthStatus.HEALTHY;\n  let message = 'Memory usage is normal';\n\n  if (usagePercent > 90) {\n    status = HealthStatus.UNHEALTHY;\n    message = 'Memory usage is critically high';\n  } else if (usagePercent > 80) {\n    status = HealthStatus.DEGRADED;\n    message = 'Memory usage is high';\n  }\n\n  return new ComponentHealth(\n    'memory',\n    status,\n    message,\n    {\n      heapUsed: `${Math.round(usedMem / 1024 / 1024)}MB`,\n      heapTotal: `${Math.round(totalMem / 1024 / 1024)}MB`,\n      usagePercent: `${Math.round(usagePercent)}%`,\n      external: `${Math.round(memUsage.external / 1024 / 1024)}MB`,\n      rss: `${Math.round(memUsage.rss / 1024 / 1024)}MB`\n    }\n  );\n}\n\n/**\n * Check CPU usage\n */\nfunction checkCPU() {\n  const cpuUsage = process.cpuUsage();\n  const totalUsage = cpuUsage.user + cpuUsage.system;\n\n  // This is a simplified CPU check - in production, you might want to use a more sophisticated approach\n  return new ComponentHealth(\n    'cpu',\n    HealthStatus.HEALTHY,\n    'CPU usage is normal',\n    {\n      user: `${Math.round(cpuUsage.user / 1000)}ms`,\n      system: `${Math.round(cpuUsage.system / 1000)}ms`,\n      total: `${Math.round(totalUsage / 1000)}ms`\n    }\n  );\n}\n\n/**\n * Check disk space\n */\nfunction checkDiskSpace() {\n  // This is a placeholder - in production, you might want to use a library like 'diskusage'\n  return new ComponentHealth(\n    'disk',\n    HealthStatus.HEALTHY,\n    'Disk space is available',\n    {\n      note: 'Disk space monitoring not implemented'\n    }\n  );\n}\n\n/**\n * Check external dependencies\n */\nasync function checkExternalDependencies() {\n  const dependencies = [];\n\n  // Check if required environment variables are set\n  const requiredEnvVars = ['MONGODB_URI', 'JWT_SECRET'];\n  const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);\n\n  if (missingEnvVars.length > 0) {\n    dependencies.push(new ComponentHealth(\n      'environment',\n      HealthStatus.UNHEALTHY,\n      'Missing required environment variables',\n      { missing: missingEnvVars }\n    ));\n  } else {\n    dependencies.push(new ComponentHealth(\n      'environment',\n      HealthStatus.HEALTHY,\n      'All required environment variables are set'\n    ));\n  }\n\n  return dependencies;\n}\n\n/**\n * Perform comprehensive health check\n */\nasync function performHealthCheck() {\n  const result = new HealthCheckResult();\n\n  try {\n    // Check core components\n    result.addComponent(await checkDatabase());\n    result.addComponent(await checkRedis());\n    result.addComponent(checkMemory());\n    result.addComponent(checkCPU());\n    result.addComponent(checkDiskSpace());\n\n    // Check external dependencies\n    const externalDeps = await checkExternalDependencies();\n    externalDeps.forEach(dep => result.addComponent(dep));\n\n    // Log health check result\n    health('Health check completed', {\n      status: result.status,\n      components: result.components.length,\n      unhealthy: result.components.filter(c => c.status === HealthStatus.UNHEALTHY).length,\n      degraded: result.components.filter(c => c.status === HealthStatus.DEGRADED).length\n    });\n\n    return result;\n  } catch (error) {\n    result.status = HealthStatus.UNHEALTHY;\n    result.addComponent(new ComponentHealth(\n      'health-check',\n      HealthStatus.UNHEALTHY,\n      'Health check failed',\n      { error: error.message }\n    ));\n\n    return result;\n  }\n}\n\n/**\n * Health check middleware\n */\nconst healthCheckMiddleware = async(req, res, next) => {\n  try {\n    const healthResult = await performHealthCheck();\n\n    // Set appropriate HTTP status code\n    const statusCode = healthResult.status === HealthStatus.HEALTHY ? 200 :\n      healthResult.status === HealthStatus.DEGRADED ? 200 : 503;\n\n    res.status(statusCode).json(healthResult.toJSON());\n  } catch (error) {\n    res.status(503).json({\n      status: HealthStatus.UNHEALTHY,\n      timestamp: new Date().toISOString(),\n      message: 'Health check failed',\n      error: error.message\n    });\n  }\n};\n\n/**\n * Liveness probe - simple check if the application is running\n */\nconst livenessProbe = (req, res) => {\n  res.status(200).json({\n    status: 'alive',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n};\n\n/**\n * Readiness probe - check if the application is ready to serve traffic\n */\nconst readinessProbe = async(req, res) => {\n  try {\n    // Quick check of critical components\n    const dbHealthy = mongoose.connection.readyState === 1;\n\n    if (dbHealthy) {\n      res.status(200).json({\n        status: 'ready',\n        timestamp: new Date().toISOString(),\n        components: {\n          database: 'ready'\n        }\n      });\n    } else {\n      res.status(503).json({\n        status: 'not ready',\n        timestamp: new Date().toISOString(),\n        components: {\n          database: 'not ready'\n        }\n      });\n    }\n  } catch (error) {\n    res.status(503).json({\n      status: 'not ready',\n      timestamp: new Date().toISOString(),\n      error: error.message\n    });\n  }\n};\n\nmodule.exports = {\n  healthCheckMiddleware,\n  livenessProbe,\n  readinessProbe,\n  performHealthCheck,\n  HealthStatus,\n  ComponentHealth,\n  HealthCheckResult\n};"],"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","ignoreList":[]}