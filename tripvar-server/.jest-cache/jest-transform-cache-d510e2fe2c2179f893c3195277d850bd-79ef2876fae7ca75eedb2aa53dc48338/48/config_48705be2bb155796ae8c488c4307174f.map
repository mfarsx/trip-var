{"version":3,"names":["dotenv","require","path","validateEnvironment","envFile","process","env","NODE_ENV","config","resolve","cwd","server","port","parseInt","PORT","host","HOST","nodeEnv","isDevelopment","isProduction","isTest","database","uri","MONGODB_URI","options","maxPoolSize","DB_MAX_POOL_SIZE","serverSelectionTimeoutMS","DB_SERVER_SELECTION_TIMEOUT","socketTimeoutMS","DB_SOCKET_TIMEOUT","redis","url","REDIS_URL","password","REDIS_PASSWORD","retryDelayOnFailover","maxRetriesPerRequest","lazyConnect","keepAlive","connectTimeout","commandTimeout","jwt","secret","JWT_SECRET","expiresIn","JWT_EXPIRES_IN","issuer","JWT_ISSUER","audience","JWT_AUDIENCE","security","allowedOrigins","ALLOWED_ORIGINS","split","corsCredentials","CORS_CREDENTIALS","rateLimitWindowMs","RATE_LIMIT_WINDOW_MS","rateLimitMaxRequests","RATE_LIMIT_MAX_REQUESTS","authRateLimitMaxRequests","AUTH_RATE_LIMIT_MAX_REQUESTS","bcryptRounds","BCRYPT_ROUNDS","logging","level","LOG_LEVEL","filePath","LOG_FILE_PATH","maxSize","LOG_MAX_SIZE","maxFiles","LOG_MAX_FILES","datePattern","LOG_DATE_PATTERN","ssl","enabled","SSL_ENABLED","certPath","SSL_CERT_PATH","keyPath","SSL_KEY_PATH","monitoring","healthCheckInterval","HEALTH_CHECK_INTERVAL","metricsEnabled","METRICS_ENABLED","sentryDsn","SENTRY_DSN","upload","maxFileSize","MAX_FILE_SIZE","uploadPath","UPLOAD_PATH","allowedMimeTypes","ALLOWED_MIME_TYPES","email","smtpHost","SMTP_HOST","smtpPort","SMTP_PORT","smtpUser","SMTP_USER","smtpPass","SMTP_PASS","fromEmail","FROM_EMAIL","externalApis","timeout","EXTERNAL_API_TIMEOUT","retries","EXTERNAL_API_RETRIES","googleMapsApiKey","GOOGLE_MAPS_API_KEY","stripeSecretKey","STRIPE_SECRET_KEY","validateConfig","errors","length","push","startsWith","stderr","write","forEach","error","Error","module","exports"],"sources":["config.js"],"sourcesContent":["const dotenv = require('dotenv');\nconst path = require('path');\nconst { validateEnvironment } = require('../utils/envValidator');\n\n// Load environment variables based on NODE_ENV\nconst envFile = process.env.NODE_ENV === 'production'\n  ? '.env.prod'\n  : process.env.NODE_ENV === 'test'\n    ? '.env.test'\n    : '.env';\n\ndotenv.config({ path: path.resolve(process.cwd(), envFile) });\n\n// Validate environment variables\nvalidateEnvironment();\n\n// Configuration object\nconst config = {\n  // Server configuration\n  server: {\n    port: parseInt(process.env.PORT, 10) || 8000,\n    host: process.env.HOST || '0.0.0.0',\n    nodeEnv: process.env.NODE_ENV || 'development',\n    isDevelopment: process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test',\n    isProduction: process.env.NODE_ENV === 'production',\n    isTest: process.env.NODE_ENV === 'test'\n  },\n\n  // Database configuration\n  database: {\n    uri: process.env.MONGODB_URI,\n    options: {\n      maxPoolSize: parseInt(process.env.DB_MAX_POOL_SIZE, 10) || 10,\n      serverSelectionTimeoutMS: parseInt(process.env.DB_SERVER_SELECTION_TIMEOUT, 10) || 5000,\n      socketTimeoutMS: parseInt(process.env.DB_SOCKET_TIMEOUT, 10) || 45000\n    }\n  },\n\n  // Redis configuration\n  redis: {\n    url: process.env.REDIS_URL || 'redis://localhost:6379',\n    password: process.env.REDIS_PASSWORD,\n    retryDelayOnFailover: 100,\n    maxRetriesPerRequest: 3,\n    lazyConnect: true,\n    keepAlive: 30000,\n    connectTimeout: 10000,\n    commandTimeout: 5000\n  },\n\n  // JWT configuration\n  jwt: {\n    secret: process.env.JWT_SECRET,\n    expiresIn: process.env.JWT_EXPIRES_IN || '7d',\n    issuer: process.env.JWT_ISSUER || 'tripvar',\n    audience: process.env.JWT_AUDIENCE || 'tripvar-users'\n  },\n\n  // Security configuration\n  security: {\n    allowedOrigins: process.env.ALLOWED_ORIGINS\n      ? process.env.ALLOWED_ORIGINS.split(',')\n      : ['http://localhost:5173', 'http://localhost:3000'],\n    corsCredentials: process.env.CORS_CREDENTIALS === 'true',\n    rateLimitWindowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS, 10) || 900000, // 15 minutes\n    rateLimitMaxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS, 10) || 100,\n    authRateLimitMaxRequests: parseInt(process.env.AUTH_RATE_LIMIT_MAX_REQUESTS, 10) || 5,\n    bcryptRounds: parseInt(process.env.BCRYPT_ROUNDS, 10) || 12\n  },\n\n  // Logging configuration\n  logging: {\n    level: process.env.LOG_LEVEL || 'info',\n    filePath: process.env.LOG_FILE_PATH || './logs/app.log',\n    maxSize: process.env.LOG_MAX_SIZE || '20m',\n    maxFiles: parseInt(process.env.LOG_MAX_FILES, 10) || 5,\n    datePattern: process.env.LOG_DATE_PATTERN || 'YYYY-MM-DD'\n  },\n\n  // SSL/TLS configuration\n  ssl: {\n    enabled: process.env.SSL_ENABLED === 'true',\n    certPath: process.env.SSL_CERT_PATH,\n    keyPath: process.env.SSL_KEY_PATH\n  },\n\n  // Monitoring configuration\n  monitoring: {\n    healthCheckInterval: parseInt(process.env.HEALTH_CHECK_INTERVAL, 10) || 30000,\n    metricsEnabled: process.env.METRICS_ENABLED === 'true',\n    sentryDsn: process.env.SENTRY_DSN\n  },\n\n  // File upload configuration\n  upload: {\n    maxFileSize: parseInt(process.env.MAX_FILE_SIZE, 10) || 10485760, // 10MB\n    uploadPath: process.env.UPLOAD_PATH || './uploads',\n    allowedMimeTypes: process.env.ALLOWED_MIME_TYPES\n      ? process.env.ALLOWED_MIME_TYPES.split(',')\n      : ['image/jpeg', 'image/png', 'image/gif', 'image/webp']\n  },\n\n  // Email configuration\n  email: {\n    smtpHost: process.env.SMTP_HOST,\n    smtpPort: parseInt(process.env.SMTP_PORT, 10) || 587,\n    smtpUser: process.env.SMTP_USER,\n    smtpPass: process.env.SMTP_PASS,\n    fromEmail: process.env.FROM_EMAIL || 'noreply@tripvar.com'\n  },\n\n  // External APIs configuration\n  externalApis: {\n    timeout: parseInt(process.env.EXTERNAL_API_TIMEOUT, 10) || 10000,\n    retries: parseInt(process.env.EXTERNAL_API_RETRIES, 10) || 3,\n    googleMapsApiKey: process.env.GOOGLE_MAPS_API_KEY,\n    stripeSecretKey: process.env.STRIPE_SECRET_KEY\n  }\n};\n\n// Validate configuration\nconst validateConfig = () => {\n  const errors = [];\n\n  // Validate JWT secret strength\n  if (config.jwt.secret && config.jwt.secret.length < 32) {\n    errors.push('JWT_SECRET must be at least 32 characters long');\n  }\n\n  // Validate MongoDB URI format\n  if (!config.database.uri.startsWith('mongodb://') && !config.database.uri.startsWith('mongodb+srv://')) {\n    errors.push('MONGODB_URI must be a valid MongoDB connection string');\n  }\n\n  // Validate SSL configuration in production\n  if (config.server.isProduction && config.ssl.enabled) {\n    if (!config.ssl.certPath || !config.ssl.keyPath) {\n      errors.push('SSL certificate and key paths must be provided in production');\n    }\n  }\n\n  if (errors.length > 0) {\n    // Use process.stderr for critical startup errors before logger is available\n    process.stderr.write('Configuration validation errors:\\n');\n    errors.forEach(error => process.stderr.write(`- ${error}\\n`));\n    throw new Error('Configuration validation failed');\n  }\n};\n\n// Run validation\nvalidateConfig();\n\nmodule.exports = config;"],"mappings":"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","ignoreList":[]}