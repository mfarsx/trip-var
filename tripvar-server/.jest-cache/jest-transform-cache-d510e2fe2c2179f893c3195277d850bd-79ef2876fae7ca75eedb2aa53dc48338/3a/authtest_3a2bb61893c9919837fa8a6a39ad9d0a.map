{"version":3,"names":["request","require","app","setupTestEnvironment","cleanupTestEnvironment","clearDatabase","createTestUser","createTestAdmin","generateTestToken","expectValidationError","expectAuthError","expectSuccessResponse","describe","beforeAll","afterAll","beforeEach","it","userData","email","password","name","dateOfBirth","nationality","response","post","send","expect","body","data","toHaveProperty","user","toBe","not","status","code","message","toContain","loginData","console","log","token","get","set","updateData","patch","passwordData","currentPassword","newPassword","delete","toEqual","promises","Array","fill","map","responses","Promise","allSettled","rateLimitedResponses","filter","value","length","toBeGreaterThan"],"sources":["auth.test.js"],"sourcesContent":["const request = require('supertest');\nconst app = require('./app.test');\nconst {\n  setupTestEnvironment,\n  cleanupTestEnvironment,\n  clearDatabase,\n  createTestUser,\n  createTestAdmin,\n  generateTestToken,\n  expectValidationError,\n  expectAuthError,\n  expectSuccessResponse\n} = require('./setup');\n\ndescribe('Authentication API', () => {\n  beforeAll(async() => {\n    await setupTestEnvironment();\n  });\n\n  afterAll(async() => {\n    await cleanupTestEnvironment();\n  });\n\n  beforeEach(async() => {\n    await clearDatabase();\n  });\n\n  describe('POST /api/v1/auth/register', () => {\n    it('should register a new user successfully', async() => {\n      const userData = {\n        email: 'newuser@example.com',\n        password: 'NewPassword123!',\n        name: 'New User',\n        dateOfBirth: '1990-01-01',\n        nationality: 'United States'\n      };\n\n      const response = await request(app)\n        .post('/api/v1/auth/register')\n        .send(userData)\n        .expect(201);\n\n      expectSuccessResponse(response, 201, 'User registered successfully');\n      expect(response.body.data).toHaveProperty('user');\n      expect(response.body.data).toHaveProperty('token');\n      expect(response.body.data.user.email).toBe(userData.email);\n      expect(response.body.data.user.name).toBe(userData.name);\n      expect(response.body.data.user).not.toHaveProperty('password');\n    });\n\n    it('should fail to register with invalid email', async() => {\n      const userData = {\n        email: 'invalid-email',\n        password: 'ValidPassword123!',\n        name: 'Test User'\n      };\n\n      const response = await request(app)\n        .post('/api/v1/auth/register')\n        .send(userData)\n        .expect(400);\n\n      expectValidationError(response, 400, ['email']);\n    });\n\n    it('should fail to register with weak password', async() => {\n      const userData = {\n        email: 'test@example.com',\n        password: 'weak',\n        name: 'Test User'\n      };\n\n      const response = await request(app)\n        .post('/api/v1/auth/register')\n        .send(userData)\n        .expect(400);\n\n      expectValidationError(response, 400, ['password']);\n    });\n\n    it('should fail to register with duplicate email', async() => {\n      const userData = {\n        email: 'duplicate@example.com',\n        password: 'ValidPassword123!',\n        name: 'Test User'\n      };\n\n      // Create first user\n      await createTestUser({ email: userData.email });\n\n      // Try to create second user with same email\n      const response = await request(app)\n        .post('/api/v1/auth/register')\n        .send(userData)\n        .expect(409);\n\n      expect(response.body.status).toBe('fail');\n      expect(response.body.code).toBe('CONFLICT');\n      expect(response.body.message).toContain('Email');\n    });\n\n    it('should fail to register with missing required fields', async() => {\n      const userData = {\n        email: 'test@example.com'\n        // Missing password and name\n      };\n\n      const response = await request(app)\n        .post('/api/v1/auth/register')\n        .send(userData)\n        .expect(400);\n\n      expectValidationError(response, 400, ['password', 'name']);\n    });\n  });\n\n  describe('POST /api/v1/auth/login', () => {\n    beforeEach(async() => {\n      await createTestUser({\n        email: 'login@example.com',\n        password: 'LoginPassword123!'\n      });\n    });\n\n    it('should login successfully with valid credentials', async() => {\n      const loginData = {\n        email: 'login@example.com',\n        password: 'LoginPassword123!'\n      };\n\n      const response = await request(app)\n        .post('/api/v1/auth/login')\n        .send(loginData)\n        .expect(200);\n\n      expectSuccessResponse(response, 200, 'Login successful');\n      expect(response.body.data).toHaveProperty('user');\n      expect(response.body.data).toHaveProperty('token');\n      expect(response.body.data.user.email).toBe(loginData.email);\n    });\n\n    it('should fail to login with invalid email', async() => {\n      const loginData = {\n        email: 'nonexistent@example.com',\n        password: 'LoginPassword123!'\n      };\n\n      const response = await request(app)\n        .post('/api/v1/auth/login')\n        .send(loginData);\n\n      // Debug: Log the response to see what's happening\n      console.log('Login response status:', response.status);\n      console.log('Login response body:', response.body);\n\n      if (response.status === 500) {\n        // If we get a 500, let's see what the actual error is\n        expect(response.status).toBe(401);\n      } else {\n        expect(response.status).toBe(401);\n        expectAuthError(response, 401);\n      }\n    });\n\n    it('should fail to login with invalid password', async() => {\n      const loginData = {\n        email: 'login@example.com',\n        password: 'WrongPassword123!'\n      };\n\n      const response = await request(app)\n        .post('/api/v1/auth/login')\n        .send(loginData)\n        .expect(401);\n\n      expectAuthError(response, 401);\n    });\n\n    it('should fail to login with missing credentials', async() => {\n      const response = await request(app)\n        .post('/api/v1/auth/login')\n        .send({})\n        .expect(400);\n\n      expectValidationError(response, 400, ['email', 'password']);\n    });\n  });\n\n  describe('GET /api/v1/auth/profile', () => {\n    let user, token;\n\n    beforeEach(async() => {\n      user = await createTestUser();\n      token = generateTestToken(user);\n    });\n\n    it('should get user profile successfully', async() => {\n      const response = await request(app)\n        .get('/api/v1/auth/profile')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(200);\n\n      expectSuccessResponse(response, 200, 'Profile retrieved successfully');\n      expect(response.body.data.user.email).toBe(user.email);\n      expect(response.body.data.user.name).toBe(user.name);\n      expect(response.body.data.user).not.toHaveProperty('password');\n    });\n\n    it('should fail to get profile without token', async() => {\n      const response = await request(app)\n        .get('/api/v1/auth/profile')\n        .expect(401);\n\n      expectAuthError(response, 401);\n    });\n\n    it('should fail to get profile with invalid token', async() => {\n      const response = await request(app)\n        .get('/api/v1/auth/profile')\n        .set('Authorization', 'Bearer invalid-token')\n        .expect(401);\n\n      expectAuthError(response, 401);\n    });\n  });\n\n  describe('PATCH /api/v1/auth/profile', () => {\n    let user, token;\n\n    beforeEach(async() => {\n      user = await createTestUser();\n      token = generateTestToken(user);\n    });\n\n    it('should update user profile successfully', async() => {\n      const updateData = {\n        name: 'Updated Name',\n        nationality: 'Canada'\n      };\n\n      const response = await request(app)\n        .patch('/api/v1/auth/profile')\n        .set('Authorization', `Bearer ${token}`)\n        .send(updateData)\n        .expect(200);\n\n      expectSuccessResponse(response, 200, 'Profile updated successfully');\n      expect(response.body.data.user.name).toBe(updateData.name);\n      expect(response.body.data.user.nationality).toBe(updateData.nationality);\n    });\n\n    it('should fail to update profile with invalid data', async() => {\n      const updateData = {\n        name: 'A', // Too short\n        email: 'invalid-email'\n      };\n\n      const response = await request(app)\n        .patch('/api/v1/auth/profile')\n        .set('Authorization', `Bearer ${token}`)\n        .send(updateData)\n        .expect(400);\n\n      expectValidationError(response, 400, ['name', 'email']);\n    });\n\n    it('should fail to update profile without authentication', async() => {\n      const updateData = {\n        name: 'Updated Name'\n      };\n\n      const response = await request(app)\n        .patch('/api/v1/auth/profile')\n        .send(updateData)\n        .expect(401);\n\n      expectAuthError(response, 401);\n    });\n  });\n\n  describe('PATCH /api/v1/auth/update-password', () => {\n    let user, token;\n\n    beforeEach(async() => {\n      user = await createTestUser({\n        password: 'CurrentPassword123!'\n      });\n      token = generateTestToken(user);\n    });\n\n    it('should update password successfully', async() => {\n      const passwordData = {\n        currentPassword: 'CurrentPassword123!',\n        newPassword: 'NewPassword123!'\n      };\n\n      const response = await request(app)\n        .patch('/api/v1/auth/update-password')\n        .set('Authorization', `Bearer ${token}`)\n        .send(passwordData)\n        .expect(200);\n\n      expectSuccessResponse(response, 200, 'Password updated successfully');\n      expect(response.body.data).toHaveProperty('token');\n    });\n\n    it('should fail to update password with wrong current password', async() => {\n      const passwordData = {\n        currentPassword: 'WrongPassword123!',\n        newPassword: 'NewPassword123!'\n      };\n\n      const response = await request(app)\n        .patch('/api/v1/auth/update-password')\n        .set('Authorization', `Bearer ${token}`)\n        .send(passwordData)\n        .expect(401);\n\n      expectAuthError(response, 401);\n    });\n\n    it('should fail to update password with weak new password', async() => {\n      const passwordData = {\n        currentPassword: 'CurrentPassword123!',\n        newPassword: 'weak'\n      };\n\n      const response = await request(app)\n        .patch('/api/v1/auth/update-password')\n        .set('Authorization', `Bearer ${token}`)\n        .send(passwordData)\n        .expect(400);\n\n      expectValidationError(response, 400, ['newPassword']);\n    });\n  });\n\n  describe('DELETE /api/v1/auth/profile', () => {\n    let user, token;\n\n    beforeEach(async() => {\n      user = await createTestUser();\n      token = generateTestToken(user);\n    });\n\n    it('should delete user account successfully', async() => {\n      const response = await request(app)\n        .delete('/api/v1/auth/profile')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(204);\n\n      expect(response.body).toEqual({});\n    });\n\n    it('should fail to delete account without authentication', async() => {\n      const response = await request(app)\n        .delete('/api/v1/auth/profile')\n        .expect(401);\n\n      expectAuthError(response, 401);\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('should apply rate limiting to auth endpoints', async() => {\n      const userData = {\n        email: 'ratelimit@example.com',\n        password: 'RateLimitPassword123!',\n        name: 'Rate Limit User'\n      };\n\n      // Make multiple requests quickly\n      const promises = Array(10).fill().map(() =>\n        request(app)\n          .post('/api/v1/auth/register')\n          .send(userData)\n      );\n\n      const responses = await Promise.allSettled(promises);\n\n      // Some requests should be rate limited\n      const rateLimitedResponses = responses.filter(\n        response => response.status === 'fulfilled' && response.value.status === 429\n      );\n\n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}