{"version":3,"names":["cov_v304x8zb0","actualCoverage","BaseRepository","s","require","BookingRepository","constructor","model","f","findByUser","userId","find","user","populate","error","findByDestination","destinationId","destination","findByStatus","status","findByDateRange","startDate","endDate","checkIn","$gte","checkOut","$lte","findActive","now","Date","$in","findByPaymentStatus","paymentStatus","getStatistics","stats","aggregate","$group","_id","count","$sum","totalRevenue","findOverlappingBookings","excludeBookingId","b","query","$or","$lt","$gt","$ne","updateStatus","bookingId","findByIdAndUpdate","$set","new","getRevenueByDateRange","result","$match","createdAt","bookingCount","module","exports"],"sources":["booking.repository.js"],"sourcesContent":["const BaseRepository = require('./base.repository');\n\nclass BookingRepository extends BaseRepository {\n  constructor(model) {\n    super(model);\n  }\n\n  // Find bookings by user\n  async findByUser(userId) {\n    try {\n      return await this.model.find({ user: userId }).populate('destination');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find bookings by destination\n  async findByDestination(destinationId) {\n    try {\n      return await this.model.find({ destination: destinationId }).populate('user');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find bookings by status\n  async findByStatus(status) {\n    try {\n      return await this.model.find({ status }).populate('user destination');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find bookings by date range\n  async findByDateRange(startDate, endDate) {\n    try {\n      return await this.model.find({\n        checkIn: { $gte: startDate },\n        checkOut: { $lte: endDate }\n      }).populate('user destination');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find active bookings\n  async findActive() {\n    try {\n      const now = new Date();\n      return await this.model.find({\n        status: { $in: ['confirmed', 'pending'] },\n        checkOut: { $gte: now }\n      }).populate('user destination');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find bookings by payment status\n  async findByPaymentStatus(paymentStatus) {\n    try {\n      return await this.model.find({ paymentStatus }).populate('user destination');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get booking statistics\n  async getStatistics() {\n    try {\n      const stats = await this.model.aggregate([\n        {\n          $group: {\n            _id: '$status',\n            count: { $sum: 1 },\n            totalRevenue: { $sum: '$totalAmount' }\n          }\n        }\n      ]);\n      return stats;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Find overlapping bookings for a destination\n  async findOverlappingBookings(destinationId, checkIn, checkOut, excludeBookingId = null) {\n    try {\n      const query = {\n        destination: destinationId,\n        status: { $in: ['confirmed', 'pending'] },\n        $or: [\n          {\n            checkIn: { $lt: checkOut },\n            checkOut: { $gt: checkIn }\n          }\n        ]\n      };\n\n      if (excludeBookingId) {\n        query._id = { $ne: excludeBookingId };\n      }\n\n      return await this.model.find(query);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Update booking status\n  async updateStatus(bookingId, status) {\n    try {\n      return await this.model.findByIdAndUpdate(\n        bookingId,\n        { $set: { status } },\n        { new: true }\n      );\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get revenue by date range\n  async getRevenueByDateRange(startDate, endDate) {\n    try {\n      const result = await this.model.aggregate([\n        {\n          $match: {\n            createdAt: { $gte: startDate, $lte: endDate },\n            status: 'confirmed'\n          }\n        },\n        {\n          $group: {\n            _id: null,\n            totalRevenue: { $sum: '$totalAmount' },\n            bookingCount: { $sum: 1 }\n          }\n        }\n      ]);\n      return result[0] || { totalRevenue: 0, bookingCount: 0 };\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nmodule.exports = BookingRepository;"],"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","ignoreList":[]}