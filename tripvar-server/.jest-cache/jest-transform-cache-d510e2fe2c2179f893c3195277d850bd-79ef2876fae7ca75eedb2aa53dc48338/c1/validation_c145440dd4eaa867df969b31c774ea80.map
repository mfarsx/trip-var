{"version":3,"names":["cov_2ltyoc94al","actualCoverage","validationResult","s","require","ValidationError","validate","validations","f","req","res","next","Promise","all","map","validation","run","errors","isEmpty","b","errorMessages","array","error","msg","errorDetails","field","param","message","value","location","validationError","join","err","sanitize","options","removeHtml","removeScripts","trimStrings","allowedTags","maxLength","sanitizeString","str","sanitized","trim","replace","length","substring","body","Object","keys","forEach","key","Array","isArray","item","query","params","rateLimitValidation","windowMs","max","skipSuccessfulRequests","skipFailedRequests","requests","Map","ip","connection","remoteAddress","now","Date","windowStart","has","userRequests","get","filter","timestamp","set","status","json","retryAfter","Math","ceil","push","fileValidation","maxSize","allowedTypes","maxFiles","files","file","size","name","includes","mimetype","validateObjectId","paramName","id","test","validatePagination","page","parseInt","limit","pagination","skip","module","exports"],"sources":["validation.js"],"sourcesContent":["const { validationResult } = require('express-validator');\nconst { ValidationError } = require('../utils/errors');\n\n/**\n * Validation middleware factory\n * @param {Array} validations - Array of validation rules\n * @returns {Function} Express middleware function\n */\nconst validate = (validations) => {\n  return async(req, res, next) => {\n    try {\n      // Run all validations\n      await Promise.all(validations.map(validation => validation.run(req)));\n\n      // Check for validation errors\n      const errors = validationResult(req);\n\n      if (!errors.isEmpty()) {\n        const errorMessages = errors.array().map(error => error.msg);\n        const errorDetails = errors.array().map(error => ({\n          field: error.param,\n          message: error.msg,\n          value: error.value,\n          location: error.location\n        }));\n\n        const validationError = new ValidationError(\n          `Validation failed: ${errorMessages.join(', ')}`,\n          errorDetails\n        );\n\n        return next(validationError);\n      }\n\n      next();\n    } catch (err) {\n      next(err);\n    }\n  };\n};\n\n/**\n * Sanitization middleware\n * @param {Object} options - Sanitization options\n * @returns {Function} Express middleware function\n */\nconst sanitize = (options = {}) => {\n  const {\n    removeHtml = true,\n    removeScripts = true,\n    trimStrings = true,\n    allowedTags = [],\n    maxLength = 1000\n  } = options;\n\n  return (req, res, next) => {\n    const sanitizeString = (str) => {\n      if (typeof str !== 'string') {\n        return str;\n      }\n\n      let sanitized = str;\n\n      // Trim whitespace\n      if (trimStrings) {\n        sanitized = sanitized.trim();\n      }\n\n      // Remove HTML tags\n      if (removeHtml) {\n        sanitized = sanitized.replace(/<[^>]*>/g, '');\n      }\n\n      // Remove script tags and javascript: protocols\n      if (removeScripts) {\n        sanitized = sanitized\n          .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n          .replace(/javascript:/gi, '')\n          .replace(/on\\w+\\s*=/gi, '');\n      }\n\n      // Limit length\n      if (sanitized.length > maxLength) {\n        sanitized = sanitized.substring(0, maxLength);\n      }\n\n      return sanitized;\n    };\n\n    // Sanitize request body\n    if (req.body) {\n      Object.keys(req.body).forEach(key => {\n        if (typeof req.body[key] === 'string') {\n          req.body[key] = sanitizeString(req.body[key]);\n        } else if (Array.isArray(req.body[key])) {\n          req.body[key] = req.body[key].map(item =>\n            typeof item === 'string' ? sanitizeString(item) : item\n          );\n        }\n      });\n    }\n\n    // Sanitize query parameters\n    if (req.query) {\n      Object.keys(req.query).forEach(key => {\n        if (typeof req.query[key] === 'string') {\n          req.query[key] = sanitizeString(req.query[key]);\n        }\n      });\n    }\n\n    // Sanitize URL parameters\n    if (req.params) {\n      Object.keys(req.params).forEach(key => {\n        if (typeof req.params[key] === 'string') {\n          req.params[key] = sanitizeString(req.params[key]);\n        }\n      });\n    }\n\n    next();\n  };\n};\n\n/**\n * Rate limiting validation\n * @param {Object} options - Rate limiting options\n * @returns {Function} Express middleware function\n */\nconst rateLimitValidation = (options = {}) => {\n  const {\n    windowMs = 15 * 60 * 1000, // 15 minutes\n    max = 100, // limit each IP to 100 requests per windowMs\n    message = 'Too many requests from this IP, please try again later.',\n    skipSuccessfulRequests = false,\n    skipFailedRequests = false\n  } = options;\n\n  const requests = new Map();\n\n  return (req, res, next) => {\n    const key = req.ip || req.connection.remoteAddress;\n    const now = Date.now();\n    const windowStart = now - windowMs;\n\n    // Clean up old entries\n    if (requests.has(key)) {\n      const userRequests = requests.get(key).filter(timestamp => timestamp > windowStart);\n      requests.set(key, userRequests);\n    } else {\n      requests.set(key, []);\n    }\n\n    const userRequests = requests.get(key);\n\n    // Check if limit exceeded\n    if (userRequests.length >= max) {\n      return res.status(429).json({\n        status: 'error',\n        message,\n        retryAfter: Math.ceil(windowMs / 1000)\n      });\n    }\n\n    // Add current request\n    userRequests.push(now);\n    requests.set(key, userRequests);\n\n    next();\n  };\n};\n\n/**\n * File upload validation\n * @param {Object} options - File validation options\n * @returns {Function} Express middleware function\n */\nconst fileValidation = (options = {}) => {\n  const {\n    maxSize = 5 * 1024 * 1024, // 5MB\n    allowedTypes = ['image/jpeg', 'image/png', 'image/gif'],\n    maxFiles = 1\n  } = options;\n\n  return (req, res, next) => {\n    try {\n      if (!req.files || req.files.length === 0) {\n        return next();\n      }\n\n      const files = Array.isArray(req.files) ? req.files : [req.files];\n\n      // Check number of files\n      if (files.length > maxFiles) {\n        const error = new ValidationError(`Maximum ${maxFiles} file(s) allowed`);\n        return next(error);\n      }\n\n      // Validate each file\n      for (const file of files) {\n        // Check file size\n        if (file.size > maxSize) {\n          const error = new ValidationError(`File ${file.name} is too large. Maximum size is ${maxSize / 1024 / 1024}MB`);\n          return next(error);\n        }\n\n        // Check file type\n        if (!allowedTypes.includes(file.mimetype)) {\n          const error = new ValidationError(`File type ${file.mimetype} is not allowed. Allowed types: ${allowedTypes.join(', ')}`);\n          return next(error);\n        }\n      }\n\n      next();\n    } catch (err) {\n      next(err);\n    }\n  };\n};\n\n/**\n * MongoDB ObjectId validation\n * @param {string} paramName - Parameter name to validate\n * @returns {Function} Express middleware function\n */\nconst validateObjectId = (paramName) => {\n  return (req, res, next) => {\n    try {\n      const id = req.params[paramName];\n\n      if (!id || !/^[0-9a-fA-F]{24}$/.test(id)) {\n        const error = new ValidationError(`Invalid ${paramName} format`);\n        return next(error);\n      }\n\n      next();\n    } catch (err) {\n      next(err);\n    }\n  };\n};\n\n/**\n * Pagination validation\n * @returns {Function} Express middleware function\n */\nconst validatePagination = () => {\n  return (req, res, next) => {\n    try {\n      const page = parseInt(req.query.page, 10) || 1;\n      const limit = parseInt(req.query.limit, 10) || 10;\n\n      if (page < 1) {\n        const error = new ValidationError('Page must be a positive integer');\n        return next(error);\n      }\n\n      if (limit < 1 || limit > 100) {\n        const error = new ValidationError('Limit must be between 1 and 100');\n        return next(error);\n      }\n\n      req.pagination = {\n        page,\n        limit,\n        skip: (page - 1) * limit\n      };\n\n      next();\n    } catch (err) {\n      next(err);\n    }\n  };\n};\n\nmodule.exports = {\n  validate,\n  sanitize,\n  rateLimitValidation,\n  fileValidation,\n  validateObjectId,\n  validatePagination\n};"],"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","ignoreList":[]}