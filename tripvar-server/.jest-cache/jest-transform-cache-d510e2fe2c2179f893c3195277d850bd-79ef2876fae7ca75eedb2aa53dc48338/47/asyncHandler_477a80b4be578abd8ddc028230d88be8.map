{"version":3,"names":["cov_1epfn0abmb","actualCoverage","s","asyncHandler","fn","f","req","res","next","Promise","resolve","catch","asyncServiceHandler","serviceMethod","args","error","logError","require","message","stack","method","name","length","withRetry","operation","maxRetries","b","delay","lastError","attempt","statusCode","setTimeout","withTimeout","timeoutMs","race","_","reject","Error","batchOperations","operations","concurrency","results","i","batch","slice","batchResults","allSettled","map","push","result","status","value","reason","module","exports"],"sources":["asyncHandler.js"],"sourcesContent":["/**\n * Async handler wrapper to catch errors in async route handlers\n * @param {Function} fn - Async function to wrap\n * @returns {Function} Express middleware function\n */\nconst asyncHandler = (fn) => {\n  return (req, res, next) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};\n\n/**\n * Async handler for service methods\n * @param {Function} serviceMethod - Service method to wrap\n * @returns {Function} Wrapped service method\n */\nconst asyncServiceHandler = (serviceMethod) => {\n  return async(...args) => {\n    try {\n      return await serviceMethod(...args);\n    } catch (error) {\n      // Log service errors\n      const { error: logError } = require('./logger');\n      logError('Service error', {\n        error: error.message,\n        stack: error.stack,\n        method: serviceMethod.name,\n        args: args.length\n      });\n      throw error;\n    }\n  };\n};\n\n/**\n * Retry wrapper for operations that might fail\n * @param {Function} operation - Operation to retry\n * @param {number} maxRetries - Maximum number of retries\n * @param {number} delay - Delay between retries in ms\n * @returns {Promise<*>} Operation result\n */\nconst withRetry = async(operation, maxRetries = 3, delay = 1000) => {\n  let lastError;\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error;\n\n      // Don't retry on validation errors or authentication errors\n      if (error.statusCode && error.statusCode < 500) {\n        throw error;\n      }\n\n      if (attempt === maxRetries) {\n        throw error;\n      }\n\n      // Wait before retrying\n      await new Promise(resolve => setTimeout(resolve, delay * attempt));\n    }\n  }\n\n  throw lastError;\n};\n\n/**\n * Timeout wrapper for operations\n * @param {Function} operation - Operation to wrap\n * @param {number} timeoutMs - Timeout in milliseconds\n * @returns {Promise<*>} Operation result\n */\nconst withTimeout = (operation, timeoutMs = 5000) => {\n  return Promise.race([\n    operation(),\n    new Promise((_, reject) =>\n      setTimeout(() => reject(new Error('Operation timeout')), timeoutMs)\n    )\n  ]);\n};\n\n/**\n * Batch operation handler\n * @param {Array<Function>} operations - Array of operations to execute\n * @param {number} concurrency - Maximum concurrent operations\n * @returns {Promise<Array>} Results of all operations\n */\nconst batchOperations = async(operations, concurrency = 5) => {\n  const results = [];\n\n  for (let i = 0; i < operations.length; i += concurrency) {\n    const batch = operations.slice(i, i + concurrency);\n    const batchResults = await Promise.allSettled(\n      batch.map(operation => operation())\n    );\n\n    results.push(...batchResults.map(result =>\n      result.status === 'fulfilled' ? result.value : result.reason\n    ));\n  }\n\n  return results;\n};\n\nmodule.exports = {\n  asyncHandler,\n  asyncServiceHandler,\n  withRetry,\n  withTimeout,\n  batchOperations\n};"],"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","ignoreList":[]}