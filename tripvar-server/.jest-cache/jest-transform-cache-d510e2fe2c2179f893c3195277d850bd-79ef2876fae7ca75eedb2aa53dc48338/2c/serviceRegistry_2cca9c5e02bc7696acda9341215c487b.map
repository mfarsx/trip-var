{"version":3,"names":["cov_1b71vz16yc","actualCoverage","container","s","require","User","Destination","Booking","Review","Notification","UserRepository","UserService","AuthController","redisUtils","registerServices","f","registerInstance","register","singleton","registerFactory","DestinationModel","DestinationRepository","BookingModel","BookingRepository","ReviewModel","ReviewRepository","NotificationModel","NotificationRepository","DestinationService","BookingService","ReviewService","NotificationService","DestinationController","BookingController","ReviewController","NotificationController","initialize","error","Error","message","get","serviceName","has","module","exports"],"sources":["serviceRegistry.js"],"sourcesContent":["const container = require('./index');\n\n// Models\nconst User = require('../models/user.model');\nconst Destination = require('../models/destination.model');\nconst Booking = require('../models/booking.model');\nconst Review = require('../models/review.model');\n// const Payment = require('../models/payment.model'); // Payment model not implemented yet\nconst Notification = require('../models/notification.model');\n\n// Repositories\nconst UserRepository = require('../repositories/user.repository');\n\n// Services\nconst UserService = require('../services/user.service');\n\n// Controllers\nconst AuthController = require('../controllers/auth.controller');\n\n// Utils\nconst { redisUtils } = require('../middleware/redisCache');\n\n/**\n * Register all services in the container\n */\nfunction registerServices() {\n  // Register models as singletons\n  container.registerInstance('User', User);\n  container.registerInstance('Destination', Destination);\n  container.registerInstance('Booking', Booking);\n  container.registerInstance('Review', Review);\n  // container.registerInstance('Payment', Payment); // Payment model not implemented yet\n  container.registerInstance('Notification', Notification);\n\n  // Register repositories\n  container.register('UserRepository', UserRepository, [], { singleton: true });\n\n  // Register other repositories as factories\n  container.registerFactory('DestinationRepository', (DestinationModel) => {\n    const DestinationRepository = require('../repositories/destination.repository');\n    return new DestinationRepository(DestinationModel);\n  }, ['Destination']);\n\n  container.registerFactory('BookingRepository', (BookingModel) => {\n    const BookingRepository = require('../repositories/booking.repository');\n    return new BookingRepository(BookingModel);\n  }, ['Booking']);\n\n  container.registerFactory('ReviewRepository', (ReviewModel) => {\n    const ReviewRepository = require('../repositories/review.repository');\n    return new ReviewRepository(ReviewModel);\n  }, ['Review']);\n\n  // container.registerFactory('PaymentRepository', (Payment) => {\n  //   const PaymentRepository = require('../repositories/payment.repository');\n  //   return new PaymentRepository(Payment);\n  // }, ['Payment']); // Payment repository not implemented yet\n\n  container.registerFactory('NotificationRepository', (NotificationModel) => {\n    const NotificationRepository = require('../repositories/notification.repository');\n    return new NotificationRepository(NotificationModel);\n  }, ['Notification']);\n\n  // Register services\n  container.register('UserService', UserService, ['UserRepository'], { singleton: true });\n\n  // Register other services as factories\n  container.registerFactory('DestinationService', (DestinationRepository) => {\n    const DestinationService = require('../services/destination.service');\n    return new DestinationService(DestinationRepository);\n  }, ['DestinationRepository']);\n\n  container.registerFactory('BookingService', (BookingRepository) => {\n    const BookingService = require('../services/booking.service');\n    return new BookingService(BookingRepository);\n  }, ['BookingRepository']);\n\n  container.registerFactory('ReviewService', (ReviewRepository) => {\n    const ReviewService = require('../services/review.service');\n    return new ReviewService(ReviewRepository);\n  }, ['ReviewRepository']);\n\n  // container.registerFactory('PaymentService', (PaymentRepository) => {\n  //   const PaymentService = require('../services/payment.service');\n  //   return new PaymentService(PaymentRepository);\n  // }, ['PaymentRepository']); // Payment service not implemented yet\n\n  container.registerFactory('NotificationService', (NotificationRepository) => {\n    const NotificationService = require('../services/notification.service');\n    return new NotificationService(NotificationRepository);\n  }, ['NotificationRepository']);\n\n  // Register controllers\n  container.register('AuthController', AuthController, ['UserService'], { singleton: true });\n\n  // Register other controllers as factories\n  container.registerFactory('DestinationController', (DestinationService) => {\n    const DestinationController = require('../controllers/destination.controller');\n    return new DestinationController(DestinationService);\n  }, ['DestinationService']);\n\n  container.registerFactory('BookingController', (BookingService) => {\n    const BookingController = require('../controllers/booking.controller');\n    return new BookingController(BookingService);\n  }, ['BookingService']);\n\n  container.registerFactory('ReviewController', (ReviewService) => {\n    const ReviewController = require('../controllers/review.controller');\n    return new ReviewController(ReviewService);\n  }, ['ReviewService']);\n\n  // container.registerFactory('PaymentController', (PaymentService) => {\n  //   const PaymentController = require('../controllers/payment.controller');\n  //   return new PaymentController(PaymentService);\n  // }, ['PaymentService']); // Payment controller not implemented yet\n\n  container.registerFactory('NotificationController', (NotificationService) => {\n    const NotificationController = require('../controllers/notification.controller');\n    return new NotificationController(NotificationService);\n  }, ['NotificationService']);\n\n  // Register utilities\n  container.registerInstance('redisUtils', redisUtils);\n}\n\n/**\n * Initialize the service registry\n */\nfunction initialize() {\n  try {\n    registerServices();\n    // Service registry initialized successfully\n  } catch (error) {\n    throw new Error(`Failed to initialize service registry: ${error.message}`);\n  }\n}\n\n/**\n * Get a service from the container\n * @param {string} serviceName - Name of the service\n * @returns {*} Service instance\n */\nfunction get(serviceName) {\n  return container.get(serviceName);\n}\n\n/**\n * Check if a service is registered\n * @param {string} serviceName - Name of the service\n * @returns {boolean} Registration status\n */\nfunction has(serviceName) {\n  return container.has(serviceName);\n}\n\nmodule.exports = {\n  initialize,\n  get,\n  has,\n  container\n};"],"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","ignoreList":[]}