{"version":3,"names":["cov_29e8z9g9k7","actualCoverage","body","param","query","s","require","ValidationError","emailRule","isEmail","withMessage","normalizeEmail","toLowerCase","passwordRule","isLength","min","matches","nameRule","trim","max","dateOfBirthRule","optional","isISO8601","custom","value","f","b","birthDate","Date","today","age","getFullYear","monthDiff","getMonth","actualAge","getDate","Error","nationalityRule","currentPasswordRule","notEmpty","newPasswordRule","destinationIdRule","isMongoId","registerSchema","loginSchema","updateProfileSchema","not","exists","updatePasswordSchema","req","newPassword","toggleFavoriteSchema","paginationSchema","isInt","validateRequest","res","next","errors","validationErrors","push","length","errorMessages","map","error","msg","errorDetails","field","message","join","sanitizeInput","sanitizeString","str","replace","Object","keys","forEach","key","module","exports"],"sources":["auth.validation.js"],"sourcesContent":["const { body, param, query } = require('express-validator');\nconst { ValidationError } = require('../utils/errors');\n\n// Common validation rules\nconst emailRule = body('email')\n  .isEmail()\n  .withMessage('Please provide a valid email address')\n  .normalizeEmail()\n  .toLowerCase();\n\nconst passwordRule = body('password')\n  .isLength({ min: 6 })\n  .withMessage('Password must be at least 6 characters long')\n  .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/)\n  .withMessage('Password must contain at least one lowercase letter, one uppercase letter, and one number');\n\nconst nameRule = body('name')\n  .trim()\n  .isLength({ min: 2, max: 50 })\n  .withMessage('Name must be between 2 and 50 characters')\n  .matches(/^[a-zA-Z\\s]+$/)\n  .withMessage('Name can only contain letters and spaces');\n\nconst dateOfBirthRule = body('dateOfBirth')\n  .optional()\n  .isISO8601()\n  .withMessage('Date of birth must be a valid date')\n  .custom((value) => {\n    if (value) {\n      const birthDate = new Date(value);\n      const today = new Date();\n      const age = today.getFullYear() - birthDate.getFullYear();\n      const monthDiff = today.getMonth() - birthDate.getMonth();\n\n      const actualAge = monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())\n        ? age - 1\n        : age;\n\n      if (actualAge < 20) {\n        throw new Error('User must be at least 20 years old');\n      }\n    }\n    return true;\n  });\n\nconst nationalityRule = body('nationality')\n  .optional()\n  .trim()\n  .isLength({ min: 2, max: 50 })\n  .withMessage('Nationality must be between 2 and 50 characters');\n\nconst currentPasswordRule = body('currentPassword')\n  .notEmpty()\n  .withMessage('Current password is required');\n\nconst newPasswordRule = body('newPassword')\n  .isLength({ min: 6 })\n  .withMessage('New password must be at least 6 characters long')\n  .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/)\n  .withMessage('New password must contain at least one lowercase letter, one uppercase letter, and one number');\n\nconst destinationIdRule = param('destinationId')\n  .isMongoId()\n  .withMessage('Invalid destination ID format');\n\n// Validation schemas\nconst registerSchema = [\n  emailRule,\n  passwordRule,\n  nameRule,\n  dateOfBirthRule,\n  nationalityRule\n];\n\nconst loginSchema = [\n  emailRule,\n  body('password')\n    .notEmpty()\n    .withMessage('Password is required')\n];\n\nconst updateProfileSchema = [\n  body('name')\n    .optional()\n    .trim()\n    .isLength({ min: 2, max: 50 })\n    .withMessage('Name must be between 2 and 50 characters')\n    .matches(/^[a-zA-Z\\s]+$/)\n    .withMessage('Name can only contain letters and spaces'),\n  body('email')\n    .optional()\n    .isEmail()\n    .withMessage('Please provide a valid email address')\n    .normalizeEmail()\n    .toLowerCase(),\n  dateOfBirthRule,\n  nationalityRule,\n  body('password')\n    .not()\n    .exists()\n    .withMessage('Password updates are not allowed in this route')\n];\n\nconst updatePasswordSchema = [\n  currentPasswordRule,\n  newPasswordRule,\n  body('confirmPassword')\n    .custom((value, { req }) => {\n      if (value !== req.body.newPassword) {\n        throw new Error('Password confirmation does not match new password');\n      }\n      return true;\n    })\n];\n\nconst toggleFavoriteSchema = [\n  destinationIdRule\n];\n\nconst paginationSchema = [\n  query('page')\n    .optional()\n    .isInt({ min: 1 })\n    .withMessage('Page must be a positive integer'),\n  query('limit')\n    .optional()\n    .isInt({ min: 1, max: 100 })\n    .withMessage('Limit must be between 1 and 100')\n];\n\n// Custom validation middleware\nconst validateRequest = (req, res, next) => {\n  const errors = [];\n\n  // Check for validation errors\n  if (req.validationErrors) {\n    errors.push(...req.validationErrors);\n  }\n\n  if (errors.length > 0) {\n    const errorMessages = errors.map(error => error.msg);\n    const errorDetails = errors.map(error => ({\n      field: error.param,\n      message: error.msg,\n      value: error.value\n    }));\n\n    throw new ValidationError(\n      `Validation failed: ${errorMessages.join(', ')}`,\n      errorDetails\n    );\n  }\n\n  next();\n};\n\n// Sanitization middleware\nconst sanitizeInput = (req, res, next) => {\n  // Remove any potential XSS attempts\n  const sanitizeString = (str) => {\n    if (typeof str !== 'string') {\n      return str;\n    }\n    return str\n      .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n      .replace(/javascript:/gi, '')\n      .replace(/on\\w+\\s*=/gi, '')\n      .trim();\n  };\n\n  // Sanitize body\n  if (req.body) {\n    Object.keys(req.body).forEach(key => {\n      if (typeof req.body[key] === 'string') {\n        req.body[key] = sanitizeString(req.body[key]);\n      }\n    });\n  }\n\n  // Sanitize query parameters\n  if (req.query) {\n    Object.keys(req.query).forEach(key => {\n      if (typeof req.query[key] === 'string') {\n        req.query[key] = sanitizeString(req.query[key]);\n      }\n    });\n  }\n\n  next();\n};\n\nmodule.exports = {\n  registerSchema,\n  loginSchema,\n  updateProfileSchema,\n  updatePasswordSchema,\n  toggleFavoriteSchema,\n  paginationSchema,\n  validateRequest,\n  sanitizeInput\n};"],"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","ignoreList":[]}