{"version":3,"names":["request","require","app","setupTestEnvironment","cleanupTestEnvironment","clearDatabase","createTestUser","generateTestToken","expectValidationError","expectAuthError","expectSuccessResponse","describe","beforeAll","afterAll","beforeEach","it","response","post","set","send","expect","body","status","toBe","message","toContain","largeData","repeat","data","email","get","patch","toBeDefined","longString","password","name","undefined","requests","Array","fill","map","responses","Promise","allSettled","successfulResponses","filter","value","length","userData","_","index","createPromises","adminUser","role","title","description","location","category","price","isArray","destinations"],"sources":["error-handling.test.js"],"sourcesContent":["const request = require('supertest');\nconst app = require('./app.test');\nconst {\n  setupTestEnvironment,\n  cleanupTestEnvironment,\n  clearDatabase,\n  createTestUser,\n  generateTestToken,\n  expectValidationError,\n  expectAuthError,\n  expectSuccessResponse\n} = require('./setup');\n\ndescribe('Error Handling Tests', () => {\n  beforeAll(async () => {\n    await setupTestEnvironment();\n  });\n\n  afterAll(async () => {\n    await cleanupTestEnvironment();\n  });\n\n  beforeEach(async () => {\n    await clearDatabase();\n  });\n\n  describe('Malformed Request Handling', () => {\n    it('should handle malformed JSON gracefully', async () => {\n      const response = await request(app)\n        .post('/api/v1/auth/register')\n        .set('Content-Type', 'application/json')\n        .send('invalid json')\n        .expect(400);\n\n      expect(response.body.status).toBe('fail');\n      expect(response.body.message).toContain('JSON');\n    });\n\n    it('should handle oversized request body', async () => {\n      const largeData = 'x'.repeat(11 * 1024 * 1024); // 11MB\n\n      const response = await request(app)\n        .post('/api/v1/auth/register')\n        .set('Content-Type', 'application/json')\n        .send({ data: largeData })\n        .expect(413); // Payload too large\n\n      expect(response.body.status).toBe('fail');\n    });\n\n    it('should handle missing Content-Type header', async () => {\n      const response = await request(app)\n        .post('/api/v1/auth/register')\n        .send({ email: 'test@example.com' })\n        .expect(400);\n\n      expect(response.body.status).toBe('fail');\n    });\n  });\n\n  describe('Invalid Route Handling', () => {\n    it('should return 404 for undefined routes', async () => {\n      const response = await request(app)\n        .get('/api/v1/nonexistent-route')\n        .expect(404);\n\n      expect(response.body.status).toBe('fail');\n      expect(response.body.message).toContain('not found');\n    });\n\n    it('should return 404 for unsupported HTTP methods on existing routes', async () => {\n      const response = await request(app)\n        .patch('/api/v1/destinations')\n        .expect(404);\n\n      expect(response.body.status).toBe('fail');\n    });\n  });\n\n  describe('Database Error Handling', () => {\n    it('should handle database connection errors gracefully', async () => {\n      // This test verifies the API responds properly under normal conditions\n      const response = await request(app)\n        .get('/api/v1/destinations')\n        .expect(200);\n\n      // Should respond with success status\n      expect(response.body.status).toBe('success');\n      expect(response.body.data).toBeDefined();\n    });\n  });\n\n  describe('Authentication Error Scenarios', () => {\n    it('should handle malformed authorization header', async () => {\n      const response = await request(app)\n        .get('/api/v1/auth/profile')\n        .set('Authorization', 'InvalidFormat token')\n        .expect(401);\n\n      expectAuthError(response, 401);\n    });\n\n    it('should handle empty authorization header', async () => {\n      const response = await request(app)\n        .get('/api/v1/auth/profile')\n        .set('Authorization', '')\n        .expect(401);\n\n      expectAuthError(response, 401);\n    });\n\n    it('should handle missing authorization header', async () => {\n      const response = await request(app)\n        .get('/api/v1/auth/profile')\n        .expect(401);\n\n      expectAuthError(response, 401);\n    });\n  });\n\n  describe('Input Validation Edge Cases', () => {\n    it('should handle extremely long input strings', async () => {\n      const longString = 'a'.repeat(10000);\n      \n      const response = await request(app)\n        .post('/api/v1/auth/register')\n        .send({\n          email: 'test@example.com',\n          password: 'ValidPassword123!',\n          name: longString\n        })\n        .expect(400);\n\n      expectValidationError(response, 400, ['name']);\n    });\n\n    it('should handle special characters in input', async () => {\n      const response = await request(app)\n        .post('/api/v1/auth/register')\n        .send({\n          email: 'test@example.com',\n          password: 'ValidPassword123!',\n          name: '<script>alert(\"xss\")</script>'\n        })\n        .expect(201); // Should be sanitized and accepted\n\n      expectSuccessResponse(response, 201);\n    });\n\n    it('should handle null and undefined values', async () => {\n      const response = await request(app)\n        .post('/api/v1/auth/register')\n        .send({\n          email: null,\n          password: undefined,\n          name: 'Test User'\n        })\n        .expect(400);\n\n      expectValidationError(response, 400, ['email', 'password']);\n    });\n\n    it('should handle empty strings', async () => {\n      const response = await request(app)\n        .post('/api/v1/auth/register')\n        .send({\n          email: '',\n          password: '',\n          name: ''\n        })\n        .expect(400);\n\n      expectValidationError(response, 400, ['email', 'password', 'name']);\n    });\n  });\n\n  describe('Rate Limiting Edge Cases', () => {\n    it('should handle rapid successive requests', async () => {\n      const requests = Array(20).fill().map(() =>\n        request(app).get('/api/v1/destinations')\n      );\n\n      const responses = await Promise.allSettled(requests);\n      \n      // All requests should complete (rate limiting may or may not kick in depending on timing)\n      const successfulResponses = responses.filter(\n        response => response.status === 'fulfilled' && \n        (response.value.status === 200 || response.value.status === 429)\n      );\n\n      expect(responses.length).toBe(20);\n      expect(successfulResponses.length).toBe(20);\n    });\n  });\n\n  describe('Concurrent Request Handling', () => {\n    it('should handle concurrent user registrations', async () => {\n      const userData = {\n        email: 'concurrent@example.com',\n        password: 'ConcurrentPassword123!',\n        name: 'Concurrent User'\n      };\n\n      const requests = Array(5).fill().map((_, index) =>\n        request(app)\n          .post('/api/v1/auth/register')\n          .send({\n            ...userData,\n            email: `concurrent${index}@example.com`\n          })\n      );\n\n      const responses = await Promise.allSettled(requests);\n      \n      // All should succeed since they have different emails\n      const successfulResponses = responses.filter(\n        response => response.status === 'fulfilled' && response.value.status === 201\n      );\n\n      expect(successfulResponses.length).toBe(5);\n    });\n  });\n\n  describe('Memory and Resource Management', () => {\n    it('should handle large response payloads', async () => {\n      // Create multiple destinations to test large responses\n      const createPromises = Array(100).fill().map(async (_, index) => {\n        const adminUser = await createTestUser({ role: 'admin' });\n        return request(app)\n          .post('/api/v1/destinations')\n          .set('Authorization', `Bearer ${generateTestToken(adminUser)}`)\n          .send({\n            title: `Test Destination ${index}`,\n            description: 'Test description',\n            location: 'Test Location',\n            category: 'Test',\n            price: 100\n          });\n      });\n\n      // This test ensures the server can handle large response payloads\n      const response = await request(app)\n        .get('/api/v1/destinations')\n        .expect(200);\n\n      expect(response.body.status).toBe('success');\n      expect(Array.isArray(response.body.data.destinations)).toBe(true);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}